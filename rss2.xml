<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>시간이 지나면 또 봐야지</title>
    <link>https://borakim-b.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>개발 블로그</description>
    <pubDate>Wed, 17 Feb 2021 07:10:15 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Katalon을 활용한 웹 UI 테스트 자동화 어떨까?</title>
      <link>https://borakim-b.github.io/2021/02/17/20210217-test-katalon/</link>
      <guid>https://borakim-b.github.io/2021/02/17/20210217-test-katalon/</guid>
      <pubDate>Wed, 17 Feb 2021 06:48:18 GMT</pubDate>
      <description>
      
        &lt;p&gt;웹 UI 테스트 자동화를 위해 Katalon을 리서치 했던 내용과 간단한 실습 그리고 어떻게 활용하면 좋을지에 대한 생각&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>웹 UI 테스트 자동화를 위해 Katalon을 리서치 했던 내용과 간단한 실습 그리고 어떻게 활용하면 좋을지에 대한 생각<br><a id="more"></a></p><h2 id="Katalon-Product"><a href="#Katalon-Product" class="headerlink" title="Katalon Product"></a>Katalon Product</h2><p>Katalon 에서 <a href="https://www.katalon.com/all-products/" rel="external nofollow noopener noreferrer" target="_blank">제공</a>하는 솔루션 중에 Katalon Studio (Free)를 사용 했다.</p><h3 id="Katalon-Studio"><a href="#Katalon-Studio" class="headerlink" title="Katalon Studio"></a>Katalon Studio</h3><p>Katalon Studio는 개발자와 QA를 위한 Katalon LCC에서 개발한 자동화 테스트 솔루션이다.<br>웹, API, 모바일 및 데스크톱 애플리케이션 테스트가 가능하다<br>사용자 인터페이스는 Eclipse Rich Client Platform (RCP)에 구현된 통합 개발 환경(IDE) 이고, IDE를 사용하여 오픈소스 자동화 프레임워크인 Selenium, Appium을 기반으로 구축되었다.<br>Katalon Studio의 테스트 케이스 스크립트의 엔진으로 Groovy 를 사용한다.</p><ul><li>Java 8 지원</li></ul><p>Selenium API jar 사용 가능</p><ul><li>실제로 Katalon에 내장 된 대부분의 Keyword는 Selenium을 기반으로 함<br>Html Selector로 (Html의 특정 요소나 속성에 접근하기 위한 경로)<a href="https://docs.katalon.com/katalon-studio/docs/xpath_katalon_studio_tips.html#what-is-xpath" rel="external nofollow noopener noreferrer" target="_blank">XPath</a>를 지원<ul><li><a href="https://www.testim.io/blog/xpath-vs-css-selector-difference-choose/" rel="external nofollow noopener noreferrer" target="_blank">XPath vs CSS</a><ul><li>XPath는 구글 크롬 개발자도구에서 Element 선택 후 <code>Copy XPath</code>  옵션을 지원하고, Elements 탭에서 XPath 기반으로 특정 Element를 찾을 수 도 있다.<br>XPath 관련 크롬익스텐션들도 존재 한다.</li></ul></li></ul></li><li>전체 Test Suite 또는 개별 Test Case를 실행할 수 있다.</li></ul><h4 id="지원하는-테스트-환경"><a href="#지원하는-테스트-환경" class="headerlink" title="지원하는 테스트 환경"></a>지원하는 테스트 환경</h4><ul><li><strong>브라우저</strong> Chrome, Firefox, IE, Safari, Edge</li><li><strong>모바일 브라우저</strong> Android, iOS</li></ul><p><a href="https://docs.katalon.com/katalon-studio/docs/supported-environments.html#browsers" rel="external nofollow noopener noreferrer" target="_blank">Supported Environments</a></p><h4 id="Document-amp-Videos"><a href="#Document-amp-Videos" class="headerlink" title="Document &amp; Videos"></a>Document &amp; Videos</h4><p><a href="https://docs.katalon.com/katalon-studio/docs/overview.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.katalon.com/katalon-studio/docs/overview.html</a><br><a href="https://docs.katalon.com/katalon-studio/videos/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.katalon.com/katalon-studio/videos/index.html</a></p><h4 id="Sample-Projects"><a href="#Sample-Projects" class="headerlink" title="Sample Projects"></a>Sample Projects</h4><p><a href="https://github.com/katalon-studio-samples" rel="external nofollow noopener noreferrer" target="_blank">Katalon Studio Sample Projects</a></p><h3 id="Katalon-Runtime-Engine"><a href="#Katalon-Runtime-Engine" class="headerlink" title="Katalon Runtime Engine"></a>Katalon Runtime Engine</h3><p>KRE는 Katalon Studio의 테스트 실행 애드온으로 CLI 모드에서 자동화 테스트를 실행할 수 있다.<br>테스트 예약 CI와의 통합과 같은 시나리오에서 사용할 수 있다.<br>예를들어 테스트 중인 애플리케이션이 업데이트 되면 Jenkins가 트리거하여 테스트가 실행되도록 설정할 수 있다.</p><h4 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h4><p><a href="https://docs.katalon.com/katalon-studio/docs/intro-RE.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.katalon.com/katalon-studio/docs/intro-RE.html</a></p><h4 id="License"><a href="#License" class="headerlink" title="License"></a>License</h4><blockquote><p>Free License</p><p><u>The free license granted for each Katalon account only includes the standard Katalon Studio with starter features</u>. Currently, <u>the free license for Katalon Runtime Engine is not available</u>. If you wish to execute Katalon Studio in console mode, you need to subscribe to a Katalon Runtime Engine license. You can upgrade the free Katalon Studio to Katalon Studio Enterprise with a paid license without having to re-download.</p></blockquote><p>KRE 관련 License <a href="https://docs.katalon.com/katalon-studio/docs/intro-RE.html#license" rel="external nofollow noopener noreferrer" target="_blank">더 알아보기</a></p><p><br></p><h2 id="준비"><a href="#준비" class="headerlink" title="준비"></a>준비</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><ol><li><p><a href="https://www.katalon.com/" rel="external nofollow noopener noreferrer" target="_blank">https://www.katalon.com/</a> 접속 후 가입</p></li><li><p>계정 로그인 후 Katalon Studio 다운로드 및 설치</p></li><li><p>Katalon Studion 실행 후 로그인</p></li></ol><h4 id="Document-1"><a href="#Document-1" class="headerlink" title="Document"></a>Document</h4><p>macOS Catalina 에서 설치할 경우 <a href="https://docs.katalon.com/katalon-studio/docs/getting-started.html#for-macos" rel="external nofollow noopener noreferrer" target="_blank">참고</a></p><p><br></p><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><h3 id="Katalon-Studio-이용-테스트-케이스-작성"><a href="#Katalon-Studio-이용-테스트-케이스-작성" class="headerlink" title="Katalon Studio 이용 테스트 케이스 작성"></a>Katalon Studio 이용 테스트 케이스 작성</h3><h4 id="Document-2"><a href="#Document-2" class="headerlink" title="Document"></a>Document</h4><p><a href="https://docs.katalon.com/katalon-studio/docs/create-test-case.html#in-manual-view" rel="external nofollow noopener noreferrer" target="_blank">https://docs.katalon.com/katalon-studio/docs/create-test-case.html#in-manual-view</a></p><h4 id="테스트-케이스-생성"><a href="#테스트-케이스-생성" class="headerlink" title="테스트 케이스 생성"></a>테스트 케이스 생성</h4><p>Test Cases &gt; New &gt; Test Case<br>테스트케이스 기본정보 작성 후 저장 </p><ul><li>예) Name : scenario_01 </li></ul><h4 id="테스트-케이스-녹화"><a href="#테스트-케이스-녹화" class="headerlink" title="테스트 케이스 녹화"></a>테스트 케이스 녹화</h4><ol><li><p>Web Recoder 선택</p></li><li><p>URL 입력 </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/test-app#/</span><br></pre></td></tr></table></figure><ol start="3"><li><p>브라우저 선택</p></li><li><p>크롬 브라우저 선택</p><p>크롬 확장프로그램 설치 후 진행 </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://chrome.google.com/webstore/detail/katalon-recorder-selenium/ljdobmomdgdljniojadhoplhkpialdid</span><br></pre></td></tr></table></figure><ol start="5"><li><p>테스트를 새로운 브라우저 또는 현재 활성화된 브라우저에서 시작할지 선택브라우저가 실행되고 테스트 대상 URL의 페이지가 랜더링 된다.</p></li><li><p>테스트 시나리오에 따라서 녹화 진행</p><p><strong>RECORDED ACTIONS</strong>에 웹페이지에서 액션을 할 때마다 액션이 추가된다</p></li><li><p><code>Save Script</code> 선택 </p></li></ol><h4 id="실행-1"><a href="#실행-1" class="headerlink" title="실행"></a>실행</h4><ul><li><p>등록한 Test Case 선택 후 <code>Run(Command + Shift + A)</code> 실행 </p></li><li><p>등록한 Test Suite 선택 후 <code>Run(Command + Shift + A)</code> 실행 </p><p><strong>Test Suite</strong></p><ul><li><p>Test Suites &gt; New &gt; Test Suite</p><p>Test Case를 add 하여 생성가능하고, 실행 시 순차적으로 실행된다.</p></li></ul></li><li><p>등록한 Test Suite Collection 선택 후 <code>Run(Command + Shift + A)</code> 실행 </p><p><strong>Test Suite Collection</strong></p><ul><li><p>Test Suites &gt; New &gt; Test Suite Collection</p><p>Test Suite를 add 하여 생성가능하고, 실행 시 순차적으로 실행된다.</p></li></ul></li></ul><h4 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h4><ul><li><p>Test Cases 에 Web Recoder에서 녹화한 액션이 <code>Script</code>로 작성되어 있는 것을 확인 할 수있다.</p></li><li><p>테스트 케이스에서 사용되는 Object 들은 Object Repository에 저장되고 테스트 케이스 Script에서 사용된다.</p></li></ul><h3 id="Katalon-Studio-사용-팁"><a href="#Katalon-Studio-사용-팁" class="headerlink" title="Katalon Studio 사용 팁"></a>Katalon Studio 사용 팁</h3><h4 id="Execution-Profile"><a href="#Execution-Profile" class="headerlink" title="Execution Profile"></a><a href="https://docs.katalon.com/katalon-studio/docs/execution-profile-v54.html" rel="external nofollow noopener noreferrer" target="_blank">Execution Profile</a></h4><ul><li><p>Profile에 따라 스크립트 실행이 가능해서 각각의 환경에 맞춰 테스트가 가능하다.</p></li><li><p>Global Variables 저장</p><p>테스트케이스의 동일한 이름의 Variables가 있어도 전역변수가 우선된다.</p><p><strong>스크립트로 적용된 예제</strong></p><p>Profile</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">GlobalVariableEntities</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>local<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tag</span>&gt;</span><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">defaultProfile</span>&gt;</span>true<span class="tag">&lt;/<span class="name">defaultProfile</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">GlobalVariableEntity</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">initValue</span>&gt;</span>'localhost:8080'<span class="tag">&lt;/<span class="name">initValue</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>host<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">GlobalVariableEntity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">GlobalVariableEntities</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Test Case</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">'Open browser and navigate to demo AUT site'</span></span><br><span class="line">WebUI.openBrowser(<span class="string">''</span>)</span><br><span class="line">WebUI.navigateToUrl(WebUI.concatenate([<span class="string">'http://'</span>, GlobalVariable.host,<span class="string">'/test-app/'</span>] <span class="keyword">as</span> String[]))</span><br><span class="line">...</span><br><span class="line"><span class="string">'Close browser'</span></span><br><span class="line">WebUI.closeBrowser()</span><br></pre></td></tr></table></figure></li></ul><h4 id="Common-tips-for-using-Xpath-in-Katalon-Studio"><a href="#Common-tips-for-using-Xpath-in-Katalon-Studio" class="headerlink" title="Common tips for using Xpath in Katalon Studio"></a><a href="https://docs.katalon.com/katalon-studio/docs/xpath_katalon_studio_tips.html#xpath-basics" rel="external nofollow noopener noreferrer" target="_blank">Common tips for using Xpath in Katalon Studio</a></h4><h4 id="WebUI-Get-Attribute"><a href="#WebUI-Get-Attribute" class="headerlink" title="[WebUI] Get Attribute"></a><a href="https://docs.katalon.com/katalon-studio/docs/webui-get-attribute.html#description" rel="external nofollow noopener noreferrer" target="_blank">[WebUI] Get Attribute</a></h4><h4 id="WebUI-Execute-JavaScript"><a href="#WebUI-Execute-JavaScript" class="headerlink" title="[WebUI] Execute JavaScript"></a><a href="https://docs.katalon.com/katalon-studio/docs/webui-execute-javascript.html#description-" rel="external nofollow noopener noreferrer" target="_blank">[WebUI] Execute JavaScript</a></h4><h4 id="How-to-use-Selenium-WebDriver-in-Katalon-Studio"><a href="#How-to-use-Selenium-WebDriver-in-Katalon-Studio" class="headerlink" title="How to use Selenium WebDriver in Katalon Studio"></a><a href="https://docs.katalon.com/katalon-studio/docs/using_selenium_webdriver_katalon_studio.html#introduction" rel="external nofollow noopener noreferrer" target="_blank">How to use Selenium WebDriver in Katalon Studio</a></h4><h4 id="Manage-Test-Data"><a href="#Manage-Test-Data" class="headerlink" title="Manage Test Data"></a><a href="https://docs.katalon.com/katalon-studio/docs/manage-test-data.html" rel="external nofollow noopener noreferrer" target="_blank">Manage Test Data</a></h4><ul><li><p>Data Files &gt; New &gt; Test Data</p><p>Excel File, CSV File, Database Data, Internal Data</p></li><li><p>저장된 데이터를 기반으로 테스트 가능</p></li><li><p>예제코드</p><p>Internal Data 생성 후 테스트</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.kms.katalon.core.testdata.TestDataFactory.findTestData</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line"><span class="string">'&gt;&gt; 데이터 추가'</span></span><br><span class="line"><span class="keyword">def</span> testList = findTestData(<span class="string">'Data Files/testlist'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i &lt;= testList.getRowNumbers(); i++) &#123;</span><br><span class="line">WebUI.setText(findTestObject(<span class="string">"Object Repository/Pages/main/input"</span>), testList.getValue(<span class="number">1</span>, i))</span><br><span class="line">WebUI.sendKeys(findTestObject(<span class="string">'Object Repository/Pages/main/input'</span>), Keys.chord(Keys.ENTER))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Custom-Keywords"><a href="#Custom-Keywords" class="headerlink" title="Custom Keywords"></a><a href="https://docs.katalon.com/katalon-studio/docs/introduction-to-custom-keywords.html" rel="external nofollow noopener noreferrer" target="_blank">Custom Keywords</a></h4><p>생성 된 키워드는 다른 내장 키워드와 마찬가지로 테스트케이스 스크립트 작성 시 사용할 수 있다.</p><ul><li><p>다수의 테스트케이스에서 공통으로 사용되는 부분을 별도의 커스텀 키워드 (function)로 정의해서 사용</p></li><li><p>각 테스트 케이스에서는 전체적인 흐름을 정의하고(단계 별 커스텀 키워드 함수 호출), 세부 테스트 로직은 커스텀 키워드에 구현하는 방식으로 작성할 수 있다.</p></li></ul><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><h4 id="Store-Project-Code-to-Cloud"><a href="#Store-Project-Code-to-Cloud" class="headerlink" title="Store Project Code to Cloud"></a>Store Project Code to Cloud</h4><p><a href="https://www.katalon.com/testops/" rel="external nofollow noopener noreferrer" target="_blank">Katalon TestOps</a> 에서 Team, Project 생성이 되어있으면 Katalon Studio에서 업로드가 가능하다.<br>업로드된 프로젝트는 TestOps &gt; Test Planning &gt; Test Projects 에서 조회 할 수 있고, zip 파일로 다운로드 가능하다.</p><h4 id="Katalon-Store"><a href="#Katalon-Store" class="headerlink" title="Katalon Store"></a><a href="https://docs.katalon.com/katalon-store/docs/user/getting-started.html#sign-in-to-katalon-store" rel="external nofollow noopener noreferrer" target="_blank">Katalon Store</a></h4><p>Katalon Studio 에 플러그인을 설치해서 사용할 수 있다.</p><p><br></p><h3 id="활용에-대한-생각"><a href="#활용에-대한-생각" class="headerlink" title="활용에 대한 생각"></a>활용에 대한 생각</h3><h4 id="Object-Repository-관리"><a href="#Object-Repository-관리" class="headerlink" title="Object Repository 관리"></a>Object Repository 관리</h4><p>Test Case 는 시나리오 별로 작성하지만 Test Case에서 사용되는 Object들은 Object Repository에 있는 Object들로 재사용 될 수 구조를 가지고 있다.<br>Object들은 속성(<code>xpath:attributes</code>), 위치정보 (<code>xpath:attribues</code>, <code>xpath:position</code>), .. XPath를 가지고 있다.<br>웹페이지 제작 시 컴포넌트 단위로 작업하지만 테스트의 경우 페이지 별로 이루어지는 경우라면 복잡도를 줄이고, 사이드이펙트가 없도록 Object는 페이지 단위로 관리하는게 좋을 것 같다. </p><h4 id="Object-Naming"><a href="#Object-Naming" class="headerlink" title="Object Naming"></a>Object Naming</h4><p>애플리케이션의 Element를 유추 가능하도록 공통된 네이밍 룰이 필요하고, 네이밍 룰에 맞춰서 오브젝트명을 작성하는게 지속적으로 테스트케이스를 업데이트 해나가는 과정에서 xpath가 변경되었을 때 대응하기 수월할 것 같다.</p><h4 id="Wait-time-issue"><a href="#Wait-time-issue" class="headerlink" title="Wait-time issue"></a>Wait-time issue</h4><p>네트워크 안정성, 인터넷 대역폭, AUT(Application Under Test)의 성능 및 실행중인 컴퓨터의 성능과 같은 요소로 인해 스크립팅 된 대로 정확하게 수행되지 않을 수 있다.<br>특정 Element가 로드되기 전이나 서버의 처리시간이 오래걸리는 액션의 경우 (비동기로 무언가 처리하는 경우 특히)<br>어플리케이션 대기로 인해 Object를 찾지 못하거나 Object를 클릭할 수 없거나 하는 등의 문제를 만날 수 있다.</p><p><a href="https://docs.katalon.com/katalon-studio/docs/solving_common_issue_wait_time.html" rel="external nofollow noopener noreferrer" target="_blank">Katalon 가이드</a>는 페이지가 로드될 때까지 기다리거나 특정 요소가 준비될 때까지 다음작업을 진행하지 않고 대기하는 등의 keyword를 제공한다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Open browser and navigate to Katalon site'</span></span><br><span class="line">WebUI.openBrowser(<span class="string">"https://katalon.com"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="string">'Wait for Katalon Studio page to load with wait used as Global Variable'</span></span><br><span class="line">WebUI.waitForPageLoad(GlobalVariable.G_Timeout_Small)</span><br><span class="line"> </span><br><span class="line"><span class="string">'Click on \'Login\'  button to navigate to Login page'</span></span><br><span class="line">WebUI.click(findTestObject(<span class="string">'Page_KatalonHomepage/btn_Login'</span>))</span><br><span class="line">...</span><br><span class="line"><span class="string">'Wait for failed message to be present'</span></span><br><span class="line">WebUI.waitForElementPresent(findTestObject(<span class="string">'Page_KataloLogin/div_LoginMessage'</span>), GlobalVariable.G_Timeout_Small, FailureHandling.CONTINUE_ON_FAILURE)</span><br></pre></td></tr></table></figure><p>서버 환경에 따라서 글로벌 변수로 유연하게 타임아웃을 정의하여 사용할 수 있다.<br>그러나 실제로 작업해보면 지정한 timeout 까지만 대기하는 것이라 이런 키워드를 사용하였다고 하더라도 Element가 완전히 로드되었을 때 해당 스크립트가 수행될 것이라고 확신할 수 없다.</p><h4 id="Failure-Handling"><a href="#Failure-Handling" class="headerlink" title="Failure Handling"></a><a href="https://docs.katalon.com/katalon-studio/docs/failure-handling.html#default-failure-handlingbehavior" rel="external nofollow noopener noreferrer" target="_blank">Failure Handling</a></h4><p>실행 중에 오류가 발생하는 경우 스크립트를 <code>Failed</code> 로 기록하고 계속 실행할 지 중지할 지 <code>Warnning</code> 으로 기록하고 계속 실행할 지 설정할 수 있다. </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FailureHandling.CONTINUE_ON_FAILURE</span><br><span class="line">FailureHandling.STOP_ON_FAILURE</span><br><span class="line">FailureHandling.OPTIONAL</span><br></pre></td></tr></table></figure><h4 id="운영"><a href="#운영" class="headerlink" title="운영"></a>운영</h4><p>지속적으로 Katalon을 통한 테스트를 진행할 것이라면 애플리케이션이 업데이트 되었을 때 CI 툴에서 테스트 자동화 과정을 거치도록 필수적으로 갖추어 두는게 좋을 것 같다.<br>Wait-time issue 등을 고려했을 때에도 Katalon을 통한 테스트 진행 시 최대한 동일한 조건(별도 테스트서버)에서 특정 기준을 가지고 테스트가 진행될 수 있어야 할 것 같다.<br>따라서, Free License 만으로 사용하는 것은 지속적인 운영을 고려했을 때 테스트 실행 시 어디에서나 유사한 결과를 가져올 수 있도록 가능한 범위로 제한하여 테스트에 활용해야 할 것 같다.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2021/02/17/20210217-test-katalon/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Google Cloud 시작하기</title>
      <link>https://borakim-b.github.io/2021/02/05/20210205-gcp-start/</link>
      <guid>https://borakim-b.github.io/2021/02/05/20210205-gcp-start/</guid>
      <pubDate>Fri, 05 Feb 2021 13:46:14 GMT</pubDate>
      <description>
      
        &lt;p&gt;GCP 프리티어 사용 방법과, Google Cloud SDK 설치 과정&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>GCP 프리티어 사용 방법과, Google Cloud SDK 설치 과정<br><a id="more"></a></p><h2 id="Free-Tier-가입"><a href="#Free-Tier-가입" class="headerlink" title="Free Tier 가입"></a>Free Tier 가입</h2><p>구글 클라우드를 무료로 실행해보기 위한 <a href="https://cloud.google.com/free?hl=ko" rel="external nofollow noopener noreferrer" target="_blank">안내</a>가 되어있다.</p><blockquote><p>Compute Engine 및 Cloud Storage를 포함한 인기 제품을 <a href="https://cloud.google.com/free/docs/gcp-free-tier?hl=ko" rel="external nofollow noopener noreferrer" target="_blank">월별 한도까지</a> 무료로 실습해 보세요. 이러한 무료 서비스에는 유효기간이 없습니다.</p><p>…</p></blockquote><p>신규 Google Cloud 사용자는 <strong>90일 동안 $300 상당의 무료 크레딧</strong>을 사용하여 Google Cloud 제품과 서비스를 체험할 수 있다.</p><p><strong>가입 후에는 예상하지 못한 금액이 청구되는 것을 방지</strong>하기 위해서 <a href="https://cloud.google.com/billing/docs/how-to/budgets?hl=ko" rel="external nofollow noopener noreferrer" target="_blank">알림설정</a>을 해두자.</p><p><a href="https://cloud.google.com/free/docs/gcp-free-tier?_ga=2.240391233.-353323300.1607473622&amp;_gac=1.118604539.1607991509.CjwKCAiAt9z-BRBCEiwA_bWv-DtISqnrZT4HuGpa25Usu0p6chgX3v1GtJH-tCamNEpkkfmukRC2tRoCABAQAvD_BwE#free-tier-usage-limits" rel="external nofollow noopener noreferrer" target="_blank">리소스별 무료 등급 사용량 한도</a>를 참고하자.</p><h2 id="준비"><a href="#준비" class="headerlink" title="준비"></a>준비</h2><h3 id="GCP-프로젝트-생성"><a href="#GCP-프로젝트-생성" class="headerlink" title="GCP 프로젝트 생성"></a>GCP 프로젝트 생성</h3><p>구글 클라우드 가입 후에 <a href="https://console.cloud.google.com/?hl=ko&amp;pli=1" rel="external nofollow noopener noreferrer" target="_blank">콘솔</a>에서 프로젝트를 생성한다.</p><h4 id="CREDENTIAL-설정"><a href="#CREDENTIAL-설정" class="headerlink" title="CREDENTIAL 설정"></a>CREDENTIAL 설정</h4><p>GCP에서 프로젝트 생성이 되면 프로젝트 내에 <strong>서비스계정(소유자권한)을 생성</strong>한다.<br>서비스 계정 생성 후 키생성 및 비공개키 다운로드(xx.json)<br><code>~/.zshrc</code> 수정<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOGLE_APPLICATION_CREDENTIALS=<span class="string">"~/dev/gcloud-key/teavana-297565179a81.json"</span></span><br></pre></td></tr></table></figure></p><p>SDK 설치 진행 후  <code>login</code> 할 때 사용된다.</p><h2 id="클라우드-SDK-gcloud-설치"><a href="#클라우드-SDK-gcloud-설치" class="headerlink" title="클라우드 SDK(gcloud) 설치"></a>클라우드 SDK(gcloud) 설치</h2><p><a href="https://cloud.google.com/sdk/install/?hl=ko" rel="external nofollow noopener noreferrer" target="_blank">클라우드 SDK 설치</a>해서 <a href="https://cloud.google.com/sdk/gcloud/reference?hl=ko" rel="external nofollow noopener noreferrer" target="_blank">gcloud CLI</a>와 클라우드 클라이언트 라이브러리 및 Google API 클라이언트 라이브러리를 사용할 수 있다.</p><blockquote><p>gcloud CLI는 인증, 로컬 구성, 개발자 워크플로, Google Cloud API와의 상호작용을 관리합니다. gcloud 명령줄 도구를 사용하면 Compute Engine VM 인스턴스 생성, Google Kubernetes Engine 클러스터 관리, 명령줄에서 또는 스크립트 및 기타 자동화에서 App Engine 애플리케이션 배포와 같은 일반적인 클라우드 작업을 쉽게 수행할 수 있습니다.</p><p>..<a href="https://cloud.google.com/sdk?hl=ko" rel="external nofollow noopener noreferrer" target="_blank">주요특징</a></p></blockquote><p><strong>파이썬 설치 확인</strong><br>Cloud SDK에는 Python이 필요하다. (지원되는 버전은 3.5~3.7 및 2.7.9 이상)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ python -V</span><br></pre></td></tr></table></figure><h3 id="클라우드-SDK-gcloud-설치-Ubuntu"><a href="#클라우드-SDK-gcloud-설치-Ubuntu" class="headerlink" title="클라우드 SDK(gcloud) 설치 - Ubuntu"></a>클라우드 SDK(gcloud) 설치 - Ubuntu</h3><h5 id="패키지-소스로-Cloud-SDK-배포-URI-추가"><a href="#패키지-소스로-Cloud-SDK-배포-URI-추가" class="headerlink" title="패키지 소스로 Cloud SDK 배포 URI 추가"></a>패키지 소스로 Cloud SDK 배포 URI 추가</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ sudo apt-get install apt-transport-https ca-certificates gnupg</span><br></pre></td></tr></table></figure><p>에러!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Err:1 http://security.ubuntu.com/ubuntu focal-updates/universe amd64 apt-transport-https all 2.0.2ubuntu0.1</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>설치가 잘 안될 경우 업데이트 후에 실행해보자</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ sudo apt-get update</span><br><span class="line">❯ sudo apt-get upgrade</span><br><span class="line">❯ sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure><h5 id="Google-Cloud-공개-키를-가져옵니다"><a href="#Google-Cloud-공개-키를-가져옵니다" class="headerlink" title="Google Cloud 공개 키를 가져옵니다"></a>Google Cloud 공개 키를 가져옵니다</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -</span><br></pre></td></tr></table></figure><h5 id="Cloud-SDK-설치"><a href="#Cloud-SDK-설치" class="headerlink" title="Cloud SDK 설치"></a>Cloud SDK 설치</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ sudo apt-get install google-cloud-sdk</span><br></pre></td></tr></table></figure><h5 id="확인"><a href="#확인" class="headerlink" title="확인"></a>확인</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">❯ gcloud --version</span><br><span class="line">Google Cloud SDK 320.0.0</span><br><span class="line">alpha 2020.12.04</span><br><span class="line">beta 2020.12.04</span><br><span class="line">bq 2.0.64</span><br><span class="line">core 2020.12.04</span><br><span class="line">gsutil 4.55</span><br><span class="line">kubectl 1.17.14</span><br></pre></td></tr></table></figure><h5 id="구글계정-연결을-위한-초기화"><a href="#구글계정-연결을-위한-초기화" class="headerlink" title="구글계정 연결을 위한 초기화"></a>구글계정 연결을 위한 초기화</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ gcloud init</span><br></pre></td></tr></table></figure><h3 id="클라우드-SDK-gcloud-설치-macOS"><a href="#클라우드-SDK-gcloud-설치-macOS" class="headerlink" title="클라우드 SDK(gcloud) 설치 - macOS"></a>클라우드 SDK(gcloud) 설치 - macOS</h3><p><a href="https://cloud.google.com/sdk/docs/quickstart-macos?hl=ko#before-you-begin" rel="external nofollow noopener noreferrer" target="_blank">macOS 설치 가이드문서</a> 에서 64비트 패키지를 다운로드한다.</p><ol><li><p><code>xx.tar.gz</code> 파일 압축해제</p></li><li><p>설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ ./google-cloud-sd/install.sh</span><br></pre></td></tr></table></figure></li><li><p>터미널 재시작</p></li><li><p>버전확인</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ gcloud --version</span><br><span class="line">Google Cloud SDK 308.0.0</span><br><span class="line">bq 2.0.60</span><br><span class="line">core 2020.08.28</span><br><span class="line">gsutil 4.53</span><br></pre></td></tr></table></figure></li><li><p>SDK 초기화 및 사용자인증</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ gcloud init</span><br></pre></td></tr></table></figure></li></ol><h2 id="gcloud-명령어-사용"><a href="#gcloud-명령어-사용" class="headerlink" title="gcloud 명령어 사용"></a>gcloud 명령어 사용</h2><h5 id="로그인"><a href="#로그인" class="headerlink" title="로그인"></a>로그인</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ gcloud auth login</span><br></pre></td></tr></table></figure><h5 id="GCP-프로젝트-조회-및-설정"><a href="#GCP-프로젝트-조회-및-설정" class="headerlink" title="GCP 프로젝트 조회 및 설정"></a>GCP 프로젝트 조회 및 설정</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ gcloud projects list</span><br><span class="line">PROJECT_ID  NAME     PROJECT_NUMBER</span><br><span class="line">teavana     teavana  416882724345</span><br><span class="line">❯ gcloud config set project teavana</span><br></pre></td></tr></table></figure><h5 id="접근성-기능-사용-설정"><a href="#접근성-기능-사용-설정" class="headerlink" title="접근성 기능 사용 설정"></a>접근성 기능 사용 <a href="https://cloud.google.com/sdk/docs/enabling-accessibility-features?hl=ko" rel="external nofollow noopener noreferrer" target="_blank">설정</a></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ gcloud config set accessibility/screen_reader true</span><br></pre></td></tr></table></figure><h5 id="추가-컴포넌트-설치"><a href="#추가-컴포넌트-설치" class="headerlink" title="추가 컴포넌트 설치"></a>추가 컴포넌트 <a href="https://cloud.google.com/sdk/gcloud/reference/components/install" rel="external nofollow noopener noreferrer" target="_blank">설치</a></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">❯ gcloud components list</span><br><span class="line">Status: Not Installed</span><br><span class="line">Name: kubectl</span><br><span class="line">ID: kubectl</span><br><span class="line">Size: &lt; 1 MiB</span><br><span class="line"></span><br><span class="line">Status: Installed</span><br><span class="line">Name: BigQuery Command Line Tool</span><br><span class="line">ID: bq</span><br><span class="line">Size: &lt; 1 MiB</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">❯ gcloud components update</span><br><span class="line">❯ gcloud components install app-engine-python app-engine-python-extras</span><br><span class="line">...</span><br><span class="line">❯ gcloud --version</span><br><span class="line">Google Cloud SDK 321.0.0</span><br><span class="line">app-engine-python 1.9.91</span><br><span class="line">app-engine-python-extras 1.9.90</span><br><span class="line">bq 2.0.64</span><br><span class="line">cloud-datastore-emulator 2.1.0</span><br><span class="line">core 2020.12.11</span><br><span class="line">gsutil 4.57</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2021/02/05/20210205-gcp-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WSL2 (Windows Subsystem for Linux)</title>
      <link>https://borakim-b.github.io/2020/12/10/20201210-windows-wsl/</link>
      <guid>https://borakim-b.github.io/2020/12/10/20201210-windows-wsl/</guid>
      <pubDate>Thu, 10 Dec 2020 03:51:36 GMT</pubDate>
      <description>
      
        &lt;p&gt;Windows에서 WSL 설정으로 별도의 듀얼 부팅 설정 없이 Linux 에서 개발하는 것과 같은 경험을 만들어보자.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Windows에서 WSL 설정으로 별도의 듀얼 부팅 설정 없이 Linux 에서 개발하는 것과 같은 경험을 만들어보자.<br><a id="more"></a></p><h2 id="WSL-이란"><a href="#WSL-이란" class="headerlink" title="WSL 이란?"></a><a href="https://ko.wikipedia.org/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9A%A9_%EC%9C%88%EB%8F%84%EC%9A%B0_%ED%95%98%EC%9C%84_%EC%8B%9C%EC%8A%A4%ED%85%9C" rel="external nofollow noopener noreferrer" target="_blank">WSL</a> 이란?</h2><blockquote><p><strong>리눅스용 윈도우 하위 시스템</strong>(Windows Subsystem for Linux, WSL)은 <a href="https://ko.wikipedia.org/wiki/윈도우_10" rel="external nofollow noopener noreferrer" target="_blank">윈도우 10</a>에서 네이티브로 <a href="https://ko.wikipedia.org/wiki/리눅스" rel="external nofollow noopener noreferrer" target="_blank">리눅스</a> <a href="https://ko.wikipedia.org/wiki/실행_파일" rel="external nofollow noopener noreferrer" target="_blank">실행 파일</a>(<a href="https://ko.wikipedia.org/wiki/ELF_파일_형식" rel="external nofollow noopener noreferrer" target="_blank">ELF</a>)을 실행하기 위한 <a href="https://ko.wikipedia.org/wiki/호환성_계층" rel="external nofollow noopener noreferrer" target="_blank">호환성 계층</a>이다. WSL은 <a href="https://ko.wikipedia.org/wiki/리눅스_커널" rel="external nofollow noopener noreferrer" target="_blank">리눅스 커널</a> 코드가 포함되지 않은, 마이크로소프트가 개발한 <a href="https://ko.wikipedia.org/wiki/리눅스" rel="external nofollow noopener noreferrer" target="_blank">리눅스</a> 호환 커널 인터페이스를 제공하며, 그 위에 리눅스 <a href="https://ko.wikipedia.org/wiki/사용자_공간" rel="external nofollow noopener noreferrer" target="_blank">유저랜드</a>를 실행시킬 수 있는데, 이를테면 <a href="https://ko.wikipedia.org/wiki/우분투_(운영_체제" rel="external nofollow noopener noreferrer" target="_blank">우분투</a>),<a href="https://ko.wikipedia.org/wiki/리눅스용_윈도우_하위_시스템#cite_note-2" rel="external nofollow noopener noreferrer" target="_blank">[2]</a><a href="https://ko.wikipedia.org/wiki/리눅스용_윈도우_하위_시스템#cite_note-3" rel="external nofollow noopener noreferrer" target="_blank">[3]</a><a href="https://ko.wikipedia.org/wiki/리눅스용_윈도우_하위_시스템#cite_note-4" rel="external nofollow noopener noreferrer" target="_blank">[4]</a><a href="https://ko.wikipedia.org/wiki/리눅스용_윈도우_하위_시스템#cite_note-5" rel="external nofollow noopener noreferrer" target="_blank">[5]</a> <a href="https://ko.wikipedia.org/wiki/SUSE" rel="external nofollow noopener noreferrer" target="_blank">SUSE</a>, <a href="https://ko.wikipedia.org/wiki/페도라_(운영_체제" rel="external nofollow noopener noreferrer" target="_blank">페도라</a>)를 들 수 있다.<a href="https://ko.wikipedia.org/wiki/리눅스용_윈도우_하위_시스템#cite_note-6" rel="external nofollow noopener noreferrer" target="_blank">[6]</a><a href="https://ko.wikipedia.org/wiki/리눅스용_윈도우_하위_시스템#cite_note-fall-7" rel="external nofollow noopener noreferrer" target="_blank">[7]</a> 이러한 유저랜드는 <a href="https://ko.wikipedia.org/wiki/배시_(유닉스_셸" rel="external nofollow noopener noreferrer" target="_blank">배시</a>) 셸과 명령 언어를 포함할 수 있으며, 네이티브 리눅스 명령 줄 도구(sed, awk 등)들과 프로그래밍 언어 인터프리터(루비, 파이썬 등)가 내장된다.<a href="https://ko.wikipedia.org/wiki/리눅스용_윈도우_하위_시스템#cite_note-ms-faq-8" rel="external nofollow noopener noreferrer" target="_blank">[8]</a><br>..<br>이 하위 시스템은 미구현된 리눅스 커널 서비스가 필요한 프로그램을 실행할 수 없는 등 모든 리눅스 소프트웨어를 실행할 수 있지는 않다.<a href="https://ko.wikipedia.org/wiki/리눅스용_윈도우_하위_시스템#cite_note-Ars-March-9" rel="external nofollow noopener noreferrer" target="_blank">[9]</a><br>..<br><strong>리눅스용 윈도우 하위 시스템은 오직 <a href="https://ko.wikipedia.org/wiki/64비트" rel="external nofollow noopener noreferrer" target="_blank">64비트</a> 에디션의 윈도우 10에서만 사용할 수 있으며<a href="https://ko.wikipedia.org/wiki/리눅스용_윈도우_하위_시스템#cite_note-ms-faq-8" rel="external nofollow noopener noreferrer" target="_blank">[8]</a> 윈도우 10 애니버서리 업데이트 이후에서 활성화할 수 있다</strong><br>…<br>마이크로소프트는 WSL을 “특히 웹 개발자와 오픈 소스 프로젝트로 일하는 사람들처럼 개발자들을 위한 주요 도구”로 바라보고 있다.<a href="https://ko.wikipedia.org/wiki/리눅스용_윈도우_하위_시스템#cite_note-ms-faq-8" rel="external nofollow noopener noreferrer" target="_blank">[8]</a> WSL은 완전히 가상화된 머신 보다 더 적은 자원을 사용하며 윈도우 환경에서 리눅스 소프트웨어를 실행시키는 가장 직접적인 방법이면서 그와 동시에 사용자들이 동일한 파일 집합 위에서 윈도우 앱과 리눅스 도구를 사용할 수 있게 한다.<a href="https://ko.wikipedia.org/wiki/리눅스용_윈도우_하위_시스템#cite_note-ms-faq-8" rel="external nofollow noopener noreferrer" target="_blank">[8]</a></p></blockquote><h2 id="준비"><a href="#준비" class="headerlink" title="준비"></a>준비</h2><h3 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a><a href="https://docs.microsoft.com/ko-kr/windows/terminal/" rel="external nofollow noopener noreferrer" target="_blank">Windows Terminal</a></h3><blockquote><p>Windows 터미널은 명령 프롬프트, PowerShell 및 WSL(Linux용 Windows 하위 시스템)과 같은 명령줄 도구 및 셸 사용자를 위한 최신 터미널 애플리케이션입니다. 주요 기능에는 여러 탭, 창, 유니코드 및 UTF-8 문자 지원, GPU 가속 텍스트 렌더링 엔진, 사용자 고유의 테마를 만들고 텍스트, 색, 배경 및 바로 가기를 사용자 지정하는 기능이 있습니다.</p></blockquote><p>Microsoft Store 에서 Windows Terminal 을 검색하여 설치한다.</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><h3 id="Linux용-Windows-하위-시스템-사용-설정"><a href="#Linux용-Windows-하위-시스템-사용-설정" class="headerlink" title="Linux용 Windows 하위 시스템 사용 설정"></a>Linux용 Windows 하위 시스템 사용 설정</h3><p>Windows에서 Linux 배포를 설치하려면 먼저 <code>Linux용 Windows 하위 시스템 옵션</code> 기능을 사용하도록 설정이 필요하다.</p><ol><li><p>Windows Terminal을 관리자 권한으로 실행 </p></li><li><p>WSL2 활성화를 위한 DISM 명령어 실행</p></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line">&gt; dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><ol start="3"><li>결과</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt; dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line"></span><br><span class="line">배포 이미지 서비스 및 관리 도구</span><br><span class="line">버전: 10.0.19041.572</span><br><span class="line"></span><br><span class="line">이미지 버전: 10.0.19041.630</span><br><span class="line"></span><br><span class="line">기능을 사용하도록 설정하는 중</span><br><span class="line">[==========================100.0%==========================]</span><br><span class="line">작업을 완료했습니다.</span><br><span class="line">&gt; dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br><span class="line"></span><br><span class="line">배포 이미지 서비스 및 관리 도구</span><br><span class="line">버전: 10.0.19041.572</span><br><span class="line"></span><br><span class="line">이미지 버전: 10.0.19041.630</span><br><span class="line"></span><br><span class="line">기능을 사용하도록 설정하는 중</span><br><span class="line">[==========================100.0%==========================]</span><br><span class="line">작업을 완료했습니다.</span><br></pre></td></tr></table></figure><ol start="4"><li>설정이 끝난 후 컴퓨터 재부팅</li></ol><h3 id="WSL에서-사용할-수-있는-리눅스-배포판-설치"><a href="#WSL에서-사용할-수-있는-리눅스-배포판-설치" class="headerlink" title="WSL에서 사용할 수 있는 리눅스 배포판 설치"></a>WSL에서 사용할 수 있는 리눅스 배포판 설치</h3><ol><li><p>Microsoft Store에서 Ubuntu 설치</p></li><li><p>설치가 완료되면 우분투 터미널 실행 후 username/password 설정</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Installing, this may take a few minutes...</span><br><span class="line">Please create a default UNIX user account. The username does not need to match your Windows username.</span><br><span class="line">For more information visit: https://aka.ms/wslusers</span><br><span class="line">Enter new UNIX username: brkim</span><br><span class="line">New password:</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: password updated successfully</span><br></pre></td></tr></table></figure></li><li><p>Windows Terminal 실행 후 리눅스 배포판 설치 확인</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> wsl -l</span></span><br><span class="line">Linux용 Windows 하위 시스템 배포:</span><br><span class="line">Ubuntu(기본값)</span><br></pre></td></tr></table></figure></li></ol><h3 id="WSL-2로-업데이트"><a href="#WSL-2로-업데이트" class="headerlink" title="WSL 2로 업데이트"></a>WSL 2로 업데이트</h3><ol><li><p><a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package" rel="external nofollow noopener noreferrer" target="_blank">WSL 설치 가이드</a> 에서 최신 WSL2 Linux 커널 업데이트 패키지 설치</p></li><li><p>설치완료 후 WSL 버전을 변경해 준다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; wsl -l -v</span><br><span class="line">  NAME      STATE           VERSION</span><br><span class="line">* Ubuntu    Running         <span class="number">1</span></span><br><span class="line">&gt; wsl --set-version Ubuntu <span class="number">2</span></span><br><span class="line">변환이 진행 중입니다. 몇 분 정도 걸릴 수 있습니다...</span><br><span class="line">WSL <span class="number">2</span>와의 주요 차이점에 대한 자세한 내용은 https://aka.ms/wsl2를 참조하세요</span><br><span class="line">변환이 완료되었습니다.</span><br><span class="line">&gt; wsl -l -v</span><br><span class="line">  NAME      STATE           VERSION</span><br><span class="line">* Ubuntu    Stopped         <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>Window Terminal 다시 실행 후 새 탭에서 <code>V</code> 아이콘 선택 후 Ubuntu 선택</p></li></ol><p><img src="/images/windows-wsl.png" alt="windows-wsl"></p><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p><code>apt-get</code> 패키지 관리자를 통해 다운로드 및 설치가 가능하다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brkim@kimbora:/mnt/c/Users/bora.kim$ sudo apt update</span><br></pre></td></tr></table></figure><h3 id="Git-설치"><a href="#Git-설치" class="headerlink" title="Git 설치"></a><a href="https://docs.microsoft.com/ko-kr/windows/wsl/tutorials/wsl-git" rel="external nofollow noopener noreferrer" target="_blank">Git</a> 설치</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install git</span></span><br></pre></td></tr></table></figure><h3 id="zsh-설치"><a href="#zsh-설치" class="headerlink" title="zsh 설치"></a>zsh 설치</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install git zsh -y</span></span><br><span class="line">..</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chsh -s $(<span class="built_in">which</span> zsh)</span></span><br><span class="line">..</span><br><span class="line"><span class="meta">$</span><span class="bash"> sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span></span></span><br><span class="line">..</span><br><span class="line">Time to change your default shell to zsh:</span><br><span class="line">Do you want to change your default shell to zsh? [Y/n] Y</span><br><span class="line">..</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.zshrc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_DISABLE_COMPFIX=<span class="literal">true</span> 추가.</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes" rel="external nofollow noopener noreferrer" target="_blank">zsh 테마</a></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="https://docs.microsoft.com/ko-kr/windows/wsl/about" rel="external nofollow noopener noreferrer" target="_blank">https://docs.microsoft.com/ko-kr/windows/wsl/about</a><br><a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10" rel="external nofollow noopener noreferrer" target="_blank">https://docs.microsoft.com/ko-kr/windows/wsl/install-win10</a><br><a href="https://devblogs.microsoft.com/commandline/do-not-change-linux-files-using-windows-apps-and-tools/" rel="external nofollow noopener noreferrer" target="_blank">https://devblogs.microsoft.com/commandline/do-not-change-linux-files-using-windows-apps-and-tools/</a><br>윈도우즈 응용 프로그램, 도구, 스크립트, 콘솔등을 사용하여 Linux 파일을 작성 및 수정하면 안됨.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2020/12/10/20201210-windows-wsl/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Vue 개발하는 시간</title>
      <link>https://borakim-b.github.io/2020/06/01/vuejs/</link>
      <guid>https://borakim-b.github.io/2020/06/01/vuejs/</guid>
      <pubDate>Mon, 01 Jun 2020 14:18:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;Vue (2.x)를 이용해 빠르게 애플리케이션을 개발하는데  필요한 최소한의 것을 정리해 본다.&lt;br&gt;Vue 로 개발할 때 빠르게 숙지하면 좋을만한 것들, 실제로 작업하면서 찾아보았던 것들 위주로 정리했다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Vue (2.x)를 이용해 빠르게 애플리케이션을 개발하는데  필요한 최소한의 것을 정리해 본다.<br>Vue 로 개발할 때 빠르게 숙지하면 좋을만한 것들, 실제로 작업하면서 찾아보았던 것들 위주로 정리했다.<br><a id="more"></a></p><p>Vue 공식 가이드 문서에는 아래와 같은 문장이 있다.</p><blockquote><p>Vue를 시작하기 위해 일반적으로 개발자가 일상적인 애플리케이션을 빌드하는데 필요한 충분한 지식을 얻기 위해 <a href="https://kr.vuejs.org/v2/guide/" rel="external nofollow noopener noreferrer" target="_blank">가이드</a>를 읽는데 하루가 걸리지 않습니다.</p></blockquote><p>가이드를 참고하여 알아두면 좋을 만한 부분만 일부 발췌하여 작성했다.</p><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js ?"></a>Vue.js ?</h2><p>Vue는 고전적인 웹기술을 받아들여서 그 기반위에 만들어 졌다.<br>HTML 기반 템플릿을 이용하면 기존의 어플리케이션을 Vue로 점진적으로 이전하기가 훨씬 쉽다.<br>(React에서는 모든 것이 JavaScript이다. JSX를 통해서 HTML 구조가 들어와있고, CSS관리도 JavaScript에서 하는 추세)<br>일부 Vue의 문법은 Angular와 매우 유사하다. (예: v-if / ng-if) </p><p>Vue는 Angular에 비해서 유연하고, 러닝커브가 적다. HTML 및 기존 JavaScript(ES5)에 익숙해진 것 만으로 개발을 시작할 수 있다.  (<a href="https://github.com/vuejs/vue/tree/dev/types" rel="external nofollow noopener noreferrer" target="_blank">공식 Typings</a> 및 <a href="https://github.com/vuejs/vue-class-component" rel="external nofollow noopener noreferrer" target="_blank">공식 decorator</a>를 통해 TypeScript와 함께 사용할 수도 있다.)</p><p>Angular는 TypeScript가 필수다.</p><p>개인적인 생각으로는 React의 경우 프론트엔드 조직이 갖추어진 회사이고, 해당 어플리케이션이 메인 서비스인 경우 (고객이 있는) 주로 사용하거나 사용할 수 있는 것 같고 상대적으로.. Angular, Vue의 경우 서비스 운영자를 위한 백오피스 개발에 적합한 것 같다.</p><p>Vue의 경우에  SI 프로젝트에서 상대적으로 많이 채택하는 것 같은 이유가 있다면 러닝커브가 적고 유연하기 때문일 것 같다. 다만 강제성이 적고 유연하다는 이유로 jquery와 믹스해서 사용한다던지(기존 프로젝트를 점진적으로 전환하기 위한 목적도 있겠지만..) 등의 다양한 형태를 볼 수 있다…</p><p><a href="https://kr.vuejs.org/v2/guide/comparison.html" rel="external nofollow noopener noreferrer" target="_blank">다른 프레임워크와의 비교</a></p><h2 id="알아두기"><a href="#알아두기" class="headerlink" title="알아두기"></a>알아두기</h2><h3 id="Vue-인스턴스"><a href="#Vue-인스턴스" class="headerlink" title="Vue 인스턴스"></a>Vue 인스턴스</h3><ul><li><p>각 Vue 인스턴스의 data가 변경되면 화면은 다시 렌더링 된다.</p></li><li><p>Vue 인스턴스는 데이터 속성 이외에도 유용한 인스턴스 속성 및 메소드를 제공한다. 다른 사용자 정의 속성과 구분하기 위해 <code>$</code> 접두어를 붙인다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: data,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// `this` 는 vm 인스턴스를 가리킵니다. "a is: 1"</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a is: '</span> + <span class="keyword">this</span>.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.$data === data <span class="comment">// =&gt; true</span></span><br><span class="line">vm.$el === <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="https://kr.vuejs.org/v2/api/#search-form" rel="external nofollow noopener noreferrer" target="_blank">API reference 참고</a></p><ul><li>인스턴스가 마운트 된 이후, 그 엘리먼트는 <code>vm.$el</code> 로 엑세스 할 수 있다.</li><li>인스턴스가 생성된 이후 원래 데이터 객체는 <code>vm.$data</code>로 접근할 수 있다. Vue 인스턴스는 데이터 객체에 있는 모든 속성을 프록시 한다. <code>vm.a</code>는 <code>vm.$data.a</code>와 동일하다.</li></ul></li><li><p>모든 라이프 사이클 훅은 <code>this</code> 컨텍스트가 호출하는 Vue 인스턴스를 가리키며 호출 된다.</p></li></ul><h3 id="라이프-사이클-다이어그램"><a href="#라이프-사이클-다이어그램" class="headerlink" title="라이프 사이클 다이어그램"></a>라이프 사이클 다이어그램</h3><p>각 Vue 인스턴스는 생성될 때 일련의 초기화 단계를 거친다.<br>그 과정에서 사용자 정의 로직을 실행할 수 있는 <a href="https://kr.vuejs.org/v2/guide/instance.html#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%ED%9B%85" rel="external nofollow noopener noreferrer" target="_blank">라이프사이클 훅</a> 도 호출된다.</p><p><img src="/images/vue-lifecycle.png" alt="https://kr.vuejs.org/images/lifecycle.png"></p><h4 id="Creation-Initialization"><a href="#Creation-Initialization" class="headerlink" title="Creation (Initialization)"></a>Creation (Initialization)</h4><ul><li>라이프 사이클 중에 가장 처음 실행 된다.</li><li><u>컴포넌트가 DOM에 추가되기 전 필요한 작업</u></li><li>이 단계에서 제공되는 Hook은 <code>beforeCreate</code>, <code>Created</code></li><li>서버 측 렌더링 중에도 실행</li></ul><h5 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h5><ul><li>모든 Hook 중에 가장 먼저 실행 된다.</li><li>아직 data와 events(vm.$on, vm.$once, vm.$off, vm.$emit) 가 세팅되지 않은 시점.</li></ul><h5 id="created"><a href="#created" class="headerlink" title="created"></a>created</h5><ul><li><u>컴포넌트 초기에 세팅되어야할 데이터를 패치한다.</u></li><li>data와 events가 활성화되어 접근할 수 있는 상태.</li><li>부모의 created Hook이  자식의 created Hook 보다 먼저 실행된다.</li><li>템플릿과 가상돔(virtual DOM)은 마운트 및 렌더링 되지 않은 상태.<ul><li>$el 을 사용하여 엘리먼트에 접근할 수 없다.</li></ul></li></ul><h4 id="Mounting-DOM-Insertion"><a href="#Mounting-DOM-Insertion" class="headerlink" title="Mounting (DOM Insertion)"></a>Mounting (DOM Insertion)</h4><ul><li>초기 렌더링 직전과 직후에 컴포넌트에 직접 접근할 수 있다.</li></ul><h5 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h5><ul><li>초기 렌더링이 발생하기 직전과 템플릿 또는 렌더링 함수가 컴파일 된 후에 실행 된다.</li><li>대부분의 경우 사용하지 않는 것이 좋다.</li><li>서버 사이드 렌더링 중에는 실행되지 않는다.</li></ul><h5 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h5><ul><li><u>컴포넌트, 템플릿, 렌더링된 돔에 접근할 수 있다. ($el 사용 가능)</u></li><li>단, 모든 하위 컴포넌트가 마운트된 상태를 보장하지는 않는다.</li><li>단, 부모와 자식 관계의 컴포넌트에서 우리가 생각한 순서로 mounted가 발생하지 않는다.<ul><li>부모의 mounted Hook이  자식의 mounted Hook 보다 먼저 실행되지 않는다.</li><li>부모의 mounted Hook을 실행하기 전에 자식의 mounted Hook이 끝나기를 기다린다. </li></ul></li></ul><h4 id="Updating-Diff-amp-Re-render"><a href="#Updating-Diff-amp-Re-render" class="headerlink" title="Updating (Diff &amp; Re-render)"></a>Updating (Diff &amp; Re-render)</h4><ul><li>컴포넌트에서 사용되는 반응형 속성들이 변경되거나 다른 이유로 재 렌더링 될 때마다 실행된다.</li><li><u>디버깅이나 프로파일링 등을 위해 컴포넌트 재 랜더링 시점을 알고 싶을 때 사용하면 된다.</u></li></ul><h5 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h5><ul><li>DOM이 재 렌더링 되고, 패치되기 직전에 실행된다.</li><li>실제 렌더링 되기 전에 컴포넌트에 있는 데이터의 새로운 상태를 알 수 있다.</li></ul><h5 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h5><ul><li>DOM이 업데이트 완료된 상태<ul><li>컴포넌트의 데이터가 변해서 재 렌더링이 일어난 후에 실행</li></ul></li><li>DOM 업데이트 후 엑세스 해야할 경우 사용</li></ul><h4 id="Destruction-Teardown"><a href="#Destruction-Teardown" class="headerlink" title="Destruction (Teardown)"></a>Destruction (Teardown)</h4><h5 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h5><ul><li>해체 (뷰 인스턴스 제거) 되기 직전에 호출된다.</li><li>컴포넌트는 원래 모습과 모든 기능을 그대로 가지고 있다.</li><li><u>이벤트 리스너를 제거하거나 reactive subscription을 제거할 때 유용.</u></li></ul><h5 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h5><ul><li>컴포넌트가 DOM에서 제거 될 때 발생한다.</li></ul><h4 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h4><ul><li><a href="https://alligator.io/vuejs/component-lifecycle/" rel="external nofollow noopener noreferrer" target="_blank">https://alligator.io/vuejs/component-lifecycle/</a></li></ul><h3 id="템플릿-문법"><a href="#템플릿-문법" class="headerlink" title="템플릿 문법"></a>템플릿 문법</h3><h4 id="디렉티브"><a href="#디렉티브" class="headerlink" title="디렉티브"></a>디렉티브</h4><ul><li><code>v-</code> 접두사가 있는 특수 속성</li><li><code>v-bind</code>, <code>v-if</code>, <code>v-on</code>, <code>v-model</code>, ..<ul><li>v-bind : 단반향 바인딩</li><li>v-model : 양방향 바인딩</li></ul></li></ul><h5 id="약어"><a href="#약어" class="headerlink" title="약어"></a>약어</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 전체 문법 --&gt;</span><br><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt; ... &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 약어 --&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt; ... &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 전체 문법 --&gt;</span><br><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 약어 --&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure><h5 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h5><p>Vue에서 개별 DOM 노드들을 추적하고 기존 엘리먼트를 재사용, 재정렬하기 위해서 <code>v-for</code>의 각 항목들에 고유한 key 속성이 필요하다.<br><code>key</code>에 대한 이상적인 값은 각 항목을 식별할 수 있는 고유한 ID로 문자열이나 숫자를 사용해야 한다.<br><code>v-bind</code>를 사용하여 동적 값에 바인딩 해야한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;item in items&quot; v-bind:key=&quot;item.id&quot;&gt;</span><br><span class="line">  &lt;!-- content --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>왜냐하면..</p><blockquote><p>Vue가 <code>v-for</code>에서 렌더링된 엘리먼트 목록을 갱신할 때 기본적으로 “in-place patch” 전략을 사용합니다. 데이터 항목의 순서가 변경된 경우 항목의 순서와 일치하도록 DOM 요소를 이동하는 대신 Vue는 각 요소를 적절한 위치에 패치하고 해당 인덱스에서 렌더링할 내용을 반영하는지 확인합니다. </p></blockquote><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;뒤집힌 메시지: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">// 컴포넌트 내부</span><br><span class="line">methods: &#123;</span><br><span class="line">  reversedMessage: function () &#123;</span><br><span class="line">    return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>computed 속성은 종속 대상을 따라 저장(캐싱)된다.</p><p>computed 속성은 해당 속성이 종속된 대상이 변경될 때만 함수를 실행한다. 즉 <code>message</code>가 변경되지 않는 한, computed 속성인 <code>reversedMessage</code>를 여러 번 요청해도 계산을 다시 하지 않고 계산되어 있던 결과를 즉시 반환한다.</p><p>또한 <code>Date.now()</code>처럼 아무 곳에도 의존하지 않는 computed 속성의 경우 절대로 업데이트 되지 않는다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  now: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Date</span>.now()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이에 비해 메소드를 호출하면 렌더링을 다시 할 때마다 <strong>항상</strong> 함수를 실행한다.</p><h3 id="필터"><a href="#필터" class="headerlink" title="필터"></a>필터</h3><p>Vue는 텍스트 형식화를 적용할 수 있는 필터를 지원한다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 중괄호 보간법 --&gt;</span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-bind 표현 --&gt;</span><br><span class="line">&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="로컬필터-정의"><a href="#로컬필터-정의" class="headerlink" title="로컬필터 정의"></a>로컬필터 정의</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">  capitalize: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    value = value.toString()</span><br><span class="line">    <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="전역필터-정의"><a href="#전역필터-정의" class="headerlink" title="전역필터 정의"></a>전역필터 정의</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'capitalize'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">  value = value.toString()</span><br><span class="line">  <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Vue 인스턴스 생성하기 전에 전역필터 정의</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="그밖에"><a href="#그밖에" class="headerlink" title="그밖에"></a>그밖에</h4><ul><li>필터는 체이닝이 가능하다. </li><li>필터는 두개 이상의 인수를 받을 수 있다. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br><span class="line">&#123;&#123; message | filterA(&apos;arg1&apos;, arg2) &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="컴포넌트"><a href="#컴포넌트" class="headerlink" title="컴포넌트"></a>컴포넌트</h3><p><a href="https://kr.vuejs.org/v2/guide/components.html#v-on%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A7%80%EC%A0%95-%EC%9D%B4%EB%B2%A4%ED%8A%B8" rel="external nofollow noopener noreferrer" target="_blank">v-on 을 이용한 사용자 지정 이벤트</a></p><h4 id="자식-컴포넌트가-로드되었을-때-마운트가-완료된-이후에-부모컴포넌트에서-처리해야-하는-작업이-있다면"><a href="#자식-컴포넌트가-로드되었을-때-마운트가-완료된-이후에-부모컴포넌트에서-처리해야-하는-작업이-있다면" class="headerlink" title="자식 컴포넌트가 로드되었을 때 (마운트가 완료된 이후에) 부모컴포넌트에서 처리해야 하는 작업이 있다면?"></a>자식 컴포넌트가 로드되었을 때 (마운트가 완료된 이후에) 부모컴포넌트에서 처리해야 하는 작업이 있다면?</h4><p>자식 컴포넌트<code>ChildComponent.vue</code>의 라이프사이클 <code>mounted</code>훅에 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$emit(&apos;init&apos;);</span><br></pre></td></tr></table></figure><p>그리고 부모 컴포넌트에서 자식 컴포넌트를 사용할 때 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;child-component @init=&quot;initChildComponent&quot; ..</span><br></pre></td></tr></table></figure><p>와 같이 자식 컴포넌트가 로드된 이후에 실행할 <code>method</code>를 정의해서 사용하면 된다.</p><h4 id="sync-수식어"><a href="#sync-수식어" class="headerlink" title=".sync 수식어"></a>.sync 수식어</h4><p>부모 컴포넌트와 자식 컴포넌트가 양방향으로 데이터 바인딩이 필요할 때 사용.<br>부모컴포넌트에서 자식 컴포넌트를 사용할 떄</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;more :flag.sync=&quot;flag&quot;&gt;&lt;/more&gt;</span><br><span class="line"></span><br><span class="line">// flag 는 false</span><br></pre></td></tr></table></figure><p>하위 컴포넌트에서 flag 를 갱신하려면 명시적으로 이벤트를 보내면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.$emit(&apos;update:flag&apos;, true)</span><br><span class="line"></span><br><span class="line">// this.$emit(&apos;update:prop이름&apos;, 값);</span><br></pre></td></tr></table></figure><p>이렇게 하면 부모와 자식 컴포넌트 모두 값이 변경된다.</p><h5 id="예를들어"><a href="#예를들어" class="headerlink" title="예를들어"></a>예를들어</h5><p>버튼이 있는 공통 컴포넌트인데 해당 버튼이 클릭되었을 때 상위 컴포넌트의 특정영역을 노출 또는 비노출 되도록 구현하는 경우 사용할 수 있다.<br>또는 상위컴포넌트에 2개의 A, B 하위컴포넌트가 있고, 하위컴포넌트에서 모두 영향을 미치는 공통의 값이 필요한 경우 사용할 수 있다.<br>(부모 컴포넌트와 다수의 자식 컴포넌트간의 양방향 데이터 바인딩이 가능하다.)</p><h3 id="반응형에-대해서-깊이-알아보기"><a href="#반응형에-대해서-깊이-알아보기" class="headerlink" title="반응형에 대해서 깊이 알아보기"></a>반응형에 대해서 깊이 알아보기</h3><p><a href="https://kr.vuejs.org/v2/guide/reactivity.html" rel="external nofollow noopener noreferrer" target="_blank">https://kr.vuejs.org/v2/guide/reactivity.html</a></p><h4 id="비동기-갱신-큐"><a href="#비동기-갱신-큐" class="headerlink" title="비동기 갱신 큐"></a>비동기 갱신 큐</h4><p><a href="https://kr.vuejs.org/v2/guide/reactivity.html#비동기-갱신-큐" rel="external nofollow noopener noreferrer" target="_blank">https://kr.vuejs.org/v2/guide/reactivity.html#%EB%B9%84%EB%8F%99%EA%B8%B0-%EA%B0%B1%EC%8B%A0-%ED%81%90</a></p><p>Vue는 DOM 업데이트를 <strong>비동기로 한다.</strong><br>데이터 변경이 발견될 때마다 큐를 열고, 같은 <code>이벤트 루프</code>에서 발생하는 모든 데이터 변경을 버퍼에 담는다.<br>단, 같은 Watcher가 여러 번 발생하면 대기열에서 한번만 푸시된다.<br><code>이벤트 루프</code> <strong>tick</strong>에서 Vue는 대기열을 비우고(Flush) 작업을 수행한다.<br>내부적으로 Vue는 비동기 큐를 위해 네이티브 Promise.then와 MessageChannel를 시도하고, setTimeout(fn, 0) 으로 돌아간다.</p><blockquote><p>예를 들어,<code>vm.someData = &#39;new value&#39;</code>를 설정하면, 컴포넌트는 즉시 재 렌더링되지 않습니다. 큐가 플러시 될 때 다음 “tick” 에서 업데이트됩니다</p></blockquote><p>업데이트 후의 DOM 상태에 의존하는 작업을 수행하려는 경우<br>데이터 변경 후 DOM 업데이트를 마친 후에 작업이 필요한 경우 <code>Vue.nextTick (콜백 function)</code>을 사용할 수 있다.<br>콜백은 DOM이 업데이트된 후에 호출된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'example'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'갱신 안됨'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    updateMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'갱신됨'</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.textContent) <span class="comment">// =&gt; '갱신 안됨'</span></span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.textContent) <span class="comment">// =&gt; '갱신됨'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="슬롯-Slots"><a href="#슬롯-Slots" class="headerlink" title="슬롯 (Slots)"></a>슬롯 (Slots)</h3><p>컴포넌트를 만들 때 슬롯을 사용해서 만들어 두면 좀 더 유연하게 컴포넌트를 사용할 수 있다.<br>컴포넌트를 렌더링할 때 <code>&lt;slot&gt;&lt;/slot&gt;</code>영역에 전달된 내용으로 교체되어 렌더링 된다.</p><h4 id="슬롯-사용해보기"><a href="#슬롯-사용해보기" class="headerlink" title="슬롯 사용해보기"></a>슬롯 사용해보기</h4><p><code>&lt;base-layout&gt;</code> 컴포넌트</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;slot&gt;TEST&lt;/slot&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><code>name</code>이 지정되지 않은 <code>&lt;slot&gt;</code>에는 암묵적으로 “default” 값이 사용됩니다.</li><li>슬롯에 아무것도 전달되지 않을 때 <code>&lt;slot&gt;</code> 태그 사이에 기본 값을 지정해 둘 수 있다.</li></ul><h4 id="슬롯에-내용-전달해보기"><a href="#슬롯에-내용-전달해보기" class="headerlink" title="슬롯에 내용 전달해보기"></a>슬롯에 내용 전달해보기</h4><p><code>&lt;base-layout&gt;</code> 컴포넌트 사용 시 슬롯에 내용 전달해 보기</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;base-layout&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    &lt;h1&gt;Here might be a page title&lt;/h1&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template v-slot:default&gt;</span><br><span class="line">    &lt;p&gt;A paragraph for the main content.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;And another one.&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template v-slot:footer&gt;</span><br><span class="line">    &lt;p&gt;Here&apos;s some contact info&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure><ul><li>이름이 있는 슬롯에 내용을 전달하려면 <code>&lt;template&gt;</code>에 <code>v-slot</code> 디렉티브를 쓰고 그 속성에 앞에서 지정한 ‘name’을 넣으면 된다.</li><li><p>단축</p><p><code>&lt;template v-slot:header&gt;</code> 를 <code>&lt;template #header&gt;</code>로 표현할 수 있다.</p></li></ul><h5 id="slot-인수를-일반-요소-element-에-바로사용하는-것은-삭제될-문법이다"><a href="#slot-인수를-일반-요소-element-에-바로사용하는-것은-삭제될-문법이다" class="headerlink" title="slot 인수를 일반 요소(element)에 바로사용하는 것은 삭제될 문법이다."></a><code>slot</code> 인수를 일반 요소(element)에 바로사용하는 것은 삭제될 문법이다.</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;base-layout&gt;</span><br><span class="line">  &lt;h1 slot=&quot;header&quot;&gt;Here might be a page title&lt;/h1&gt;</span><br><span class="line">&lt;/base-layout&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>v-slot</code> 디렉티브는 <code>slot</code>과 <code>slot-scope</code> 인수들을 대체하는, 더 발전된 API로 Vue 2.6.0에 도입되었습니다. 새 문법이 도입된 이유는 이 <a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md" rel="external nofollow noopener noreferrer" target="_blank">RFC</a>에서 찾아볼 수 있습니다. <code>slot</code>과 <code>slot-scope</code> 인수는 앞으로도 2.x 버전에서는 계속 지원될 것입니다. 하지만 Vue 3에서는 공식적으로 삭제될 예정입니다.</p><p><a href="https://kr.vuejs.org/v2/guide/components-slots.html#%EC%82%AD%EC%A0%9C%EB%90%A0-%EB%AC%B8%EB%B2%95" rel="external nofollow noopener noreferrer" target="_blank">삭제될 문법</a></p></blockquote><h3 id="믹스인"><a href="#믹스인" class="headerlink" title="믹스인"></a>믹스인</h3><p>컴포넌트 구현 시 공통으로 사용할 옵션(함수, 데이터, 공통컴포넌트로드 등)을 구현할 수 있다.<br>믹스인은 다중 상속이 가능하다.</p><p>mixin 객체는 모든 구성 요소 옵션을 포함할 수 있다.</p><p>믹스인을 이용해서 공통된 기능을 분리 시키고,  컴포넌트에서 특정 믹스인 객체를 사용하여 확장구현할 수 있다. 이때 해당 믹스인 객체에 오버라이딩이 필요한 함수등을 만들어 컴포넌트에서 특정 함수를 구현하도록 가이드 할 수도 있다.</p><h4 id="옵션병합-전략"><a href="#옵션병합-전략" class="headerlink" title="옵션병합 전략"></a>옵션병합 전략</h4><h5 id="data-오브젝트의-내용이-상충하는-경우-컴포넌트에-선언된-data-오브젝트를-우선-한다"><a href="#data-오브젝트의-내용이-상충하는-경우-컴포넌트에-선언된-data-오브젝트를-우선-한다" class="headerlink" title="data 오브젝트의 내용이 상충하는 경우, 컴포넌트에 선언된 data 오브젝트를 우선 한다."></a>data 오브젝트의 내용이 상충하는 경우, 컴포넌트에 선언된 data 오브젝트를 우선 한다.</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'hello'</span>,</span><br><span class="line">      foo: <span class="string">'abc'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  mixins: [mixin],</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'goodbye'</span>,</span><br><span class="line">      bar: <span class="string">'def'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data)</span><br><span class="line">    <span class="comment">// =&gt; &#123; message: "goodbye", foo: "abc", bar: "def" &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="mixin-훅은-컴포넌트-자체의-훅-이전에-호출된다"><a href="#mixin-훅은-컴포넌트-자체의-훅-이전에-호출된다" class="headerlink" title="mixin 훅은 컴포넌트 자체의 훅 이전에 호출된다."></a>mixin 훅은 컴포넌트 자체의 훅 <strong>이전에</strong> 호출된다.</h5><h5 id="methods-components-directives와-같은-객체-값을-요구하는-옵션은-같은-객체에-병합된다"><a href="#methods-components-directives와-같은-객체-값을-요구하는-옵션은-같은-객체에-병합된다" class="headerlink" title="methods,components,directives와 같은 객체 값을 요구하는 옵션은 같은 객체에 병합된다."></a><code>methods</code>,<code>components</code>,<code>directives</code>와 같은 객체 값을 요구하는 옵션은 같은 객체에 병합된다.</h5><p>(충돌하는 키가 있을 경우 컴포넌트의 옵션을 우선순위를 갖음.)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'foo'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    conflicting: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'from mixin'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  mixins: [mixin],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'bar'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    conflicting: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'from self'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.foo() <span class="comment">// =&gt; "foo"</span></span><br><span class="line">vm.bar() <span class="comment">// =&gt; "bar"</span></span><br><span class="line">vm.conflicting() <span class="comment">// =&gt; "from self"</span></span><br></pre></td></tr></table></figure><p>같은 병합 전략이 <code>Vue.extend()</code>에서 사용된다.</p><h3 id="HTML-주입"><a href="#HTML-주입" class="headerlink" title="HTML 주입"></a>HTML 주입</h3><p> Vue는 자동으로 HTML 컨텐츠를 이스케이프 해서 스크립트 삽입을 방지한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; userProvidedString &#125;&#125;&lt;/h1&gt;</span><br><span class="line">...</span><br><span class="line">&lt;!-- userProvidedString 가 다음 값을 가지고 있다면 --&gt;</span><br><span class="line">&apos;&lt;script&gt;alert(&quot;hi&quot;)&lt;/script&gt;&apos;</span><br><span class="line">...</span><br><span class="line">&lt;!-- 다음 HTML로 이스케이프 된다. --&gt;</span><br><span class="line">&amp;lt;script&amp;gt;alert(&amp;quot;hi&amp;quot;)&amp;lt;/script&amp;gt;</span><br></pre></td></tr></table></figure><h4 id="HTML을-명시적으로-렌더링-할-수있다"><a href="#HTML을-명시적으로-렌더링-할-수있다" class="headerlink" title="HTML을 명시적으로 렌더링 할 수있다."></a>HTML을 명시적으로 렌더링 할 수있다.</h4><ul><li>템플릿을 사용하는 경우</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-html=&quot;userProvidedHtml&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>렌더 함수를 사용하는 경우</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h(<span class="string">'div'</span>, &#123;</span><br><span class="line">  domProps: &#123;</span><br><span class="line">    innerHTML: <span class="keyword">this</span>.userProvidedHtml</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>웹사이트에서 임의의 HTML을 동적으로 렌더링하려면 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" rel="external nofollow noopener noreferrer" target="_blank">XSS 취약점</a>으로 쉽게 이어질 수 있으므로 매우 위험할 가능성이 있습니다. 신뢰할 수 있는 콘텐츠에서만 HTML 보간을 사용하고 사용자가 제공한 콘텐츠에서는 <strong>절대</strong> 사용하면 안됩니다.</p></blockquote><h3 id="라우팅"><a href="#라우팅" class="headerlink" title="라우팅"></a>라우팅</h3><h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a><a href="https://github.com/vuejs/vue-router" rel="external nofollow noopener noreferrer" target="_blank">vue-router</a></h4><h3 id="여러-Vue-인스턴스에서-공유해야하는-상태가-있다면"><a href="#여러-Vue-인스턴스에서-공유해야하는-상태가-있다면" class="headerlink" title="여러 Vue 인스턴스에서 공유해야하는 상태가 있다면"></a>여러 Vue 인스턴스에서 공유해야하는 상태가 있다면</h3><p><a href="https://kr.vuejs.org/v2/guide/state-management.html" rel="external nofollow noopener noreferrer" target="_blank">https://kr.vuejs.org/v2/guide/state-management.html</a></p><h4 id="veux"><a href="#veux" class="headerlink" title="veux"></a><a href="https://github.com/vuejs/vuex" rel="external nofollow noopener noreferrer" target="_blank">veux</a></h4><p>컴포넌트가 store에 속한 상태를 직접 변경하지 않고, store에 이벤트를 보내는 방식으로 동작한다.</p><p><img src="/images/vue-vuex.png" alt="vuex"></p><h4 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h4><p>모든 페이지에서 API 호출 전/후로 응답대기 상태를 알려주는 이미지를 노출하고자 할때 를 가정한다.</p><p>공통으로 구현해서 사용할 수 있는 방법을 생각해보면 로딩 컴포넌트를 공통으로 만들고, 로딩 이미지 노출을 제어하는 값은 공통으로 사용되면 좋겠다.</p><p>레이아웃 컴포넌트 내에 작성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;loading v-show=&quot;this.$store.state.loading&quot;&gt;&lt;/loading&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>store.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        loading: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        updateLoading(state, loadingState) &#123;</span><br><span class="line">            state.loading = loadingState;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>api.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">'@/shared/store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> API = axios.create(&#123;</span><br><span class="line">    baseURL: process.env.VUE_APP_BASE_URL || <span class="string">'http://localhost:8080'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">API.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (config.method == <span class="string">"post"</span>) &#123;</span><br><span class="line">        store.commit(<span class="string">'updateLoading'</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    store.commit(<span class="string">'updateLoading'</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">API.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (response.config.method == <span class="string">"post"</span>) &#123;</span><br><span class="line">        store.commit(<span class="string">'updateLoading'</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    store.commit(<span class="string">'updateLoading'</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h2><p>Vue 를 이용해 빠르게 어플리케이션을 개발할 때 검토했던 것들과 필요한 것들을 정리해둔다.</p><h3 id="검토"><a href="#검토" class="headerlink" title="검토"></a>검토</h3><p><a href="https://bootstrap-vue.js.org/docs/#using-module-bundlers" rel="external nofollow noopener noreferrer" target="_blank">bootstrap-vue.js</a><br><a href="https://coreui.io/vue/" rel="external nofollow noopener noreferrer" target="_blank">coreui</a><br><a href="https://vuematerial.io/" rel="external nofollow noopener noreferrer" target="_blank">vuemeterial</a><br><a href="https://element.eleme.io/?ref=madewithvuejs.com#/en-US" rel="external nofollow noopener noreferrer" target="_blank">element-ui</a></p><h5 id="비교-및-추천"><a href="#비교-및-추천" class="headerlink" title="비교 및 추천"></a>비교 및 추천</h5><p><a href="https://levelup.gitconnected.com/18-useful-vuejs-ui-libraries-in-2019-1c622c6a4184" rel="external nofollow noopener noreferrer" target="_blank">https://levelup.gitconnected.com/18-useful-vuejs-ui-libraries-in-2019-1c622c6a4184</a> </p><h3 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h3><p>Vue.js는 단일 페이지 애플리케이션를 빠르게 구축할 수 있는 공식CLI (<a href="https://cli.vuejs.org/" rel="external nofollow noopener noreferrer" target="_blank">Vue CLI</a> / <a href="https://github.com/vuejs/vue-cli" rel="external nofollow noopener noreferrer" target="_blank">github</a>)를 제공한다. 사전구성된 빌드 설정을 제공한다.</p><h3 id="개발도구"><a href="#개발도구" class="headerlink" title="개발도구"></a>개발도구</h3><h5 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h5><h6 id="EXTENSIONS"><a href="#EXTENSIONS" class="headerlink" title="EXTENSIONS"></a>EXTENSIONS</h6><p><a href="https://vuejs.github.io/vetur/" rel="external nofollow noopener noreferrer" target="_blank">Vetur</a></p><ul><li>Syntax-highlighting</li><li>Snippet</li><li>Emmet</li><li>Linting / Error Checking</li><li>Formatting</li><li>Auto Completion</li><li><p>Debugging</p><p>…</p></li></ul><h5 id="크롬-확장프로그램"><a href="#크롬-확장프로그램" class="headerlink" title="크롬 확장프로그램"></a>크롬 확장프로그램</h5><p><a href="https://github.com/vuejs/vue-devtools#vue-devtools" rel="external nofollow noopener noreferrer" target="_blank">vue-devtools</a> </p><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><h5 id="nodeJS-설치"><a href="#nodeJS-설치" class="headerlink" title="nodeJS 설치"></a><a href="https://nodejs.org/en/" rel="external nofollow noopener noreferrer" target="_blank">nodeJS 설치</a></h5><h5 id="Vue-CLI-설치"><a href="#Vue-CLI-설치" class="headerlink" title="Vue CLI 설치"></a>Vue CLI 설치</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h5 id="Vue-프로젝트-생성"><a href="#Vue-프로젝트-생성" class="headerlink" title="Vue 프로젝트 생성"></a>Vue 프로젝트 생성</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; vue create portal</span><br></pre></td></tr></table></figure><h5 id="Vue-실행"><a href="#Vue-실행" class="headerlink" title="Vue 실행"></a>Vue 실행</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm run serve</span><br></pre></td></tr></table></figure><h5 id="Vue-CLI-UI-실행"><a href="#Vue-CLI-UI-실행" class="headerlink" title="Vue CLI UI 실행"></a>Vue CLI UI 실행</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; vue ui</span><br></pre></td></tr></table></figure><h5 id="Vue-개발에-필요한-라이브러리-설치"><a href="#Vue-개발에-필요한-라이브러리-설치" class="headerlink" title="Vue 개발에 필요한 라이브러리 설치"></a>Vue 개발에 필요한 라이브러리 설치</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install vue-router</span><br><span class="line">&gt; npm install axios</span><br><span class="line">&gt; npm install bootstrap-vue bootstrap</span><br></pre></td></tr></table></figure><h3 id="배포"><a href="#배포" class="headerlink" title="배포"></a>배포</h3><p><a href="https://cli.vuejs.org/guide/deployment.html#docker-nginx" rel="external nofollow noopener noreferrer" target="_blank">nginx - docker</a></p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2020/06/01/vuejs/#disqus_thread</comments>
    </item>
    
    <item>
      <title>쿠버네티스 인증(authentication)</title>
      <link>https://borakim-b.github.io/2020/03/01/20200301-kubernetes-rbac/</link>
      <guid>https://borakim-b.github.io/2020/03/01/20200301-kubernetes-rbac/</guid>
      <pubDate>Sun, 01 Mar 2020 01:27:08 GMT</pubDate>
      <description>
      
        &lt;p&gt;쿠버네티스 인증방식에 대해서 알아보고, 쿠버네티스 클라이언트 라이브러리는 어떤방식으로 인증처리와 API 호출이 이루어지는지 확인해보자.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>쿠버네티스 인증방식에 대해서 알아보고, 쿠버네티스 클라이언트 라이브러리는 어떤방식으로 인증처리와 API 호출이 이루어지는지 확인해보자.</p><a id="more"></a><p>쿠버네티스 API server에 request 를 보내기 위해서는 인증 과정이 필요하다.<br>인증과정은 인증(authentication), 접근제어/인가(access control/authorization), 승인제어(admission control) 단계로 이루어진다.</p><p>쿠버네티스 사용자가 맞는지, 사용자가 이 작업을 수행해도 되는지, 이 요청이 적절한지를 확인하는 과정이다.<br>쿠버네티스 <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#authentication-strategies" rel="external nofollow noopener noreferrer" target="_blank">Authentication Strategies</a> 은 클러스터 외부의 사용자에게 적용되는 인증방식과 파드 내부에서 실행되는 프로세스가 API에 접근할 때 사용하는 서비스 어카운트(ServiceAccount) 토큰을 이용한 인증으로 구분 해볼 수 있다.</p><p>서비스 어카운트(ServiceAccount) 토큰을 이용한 인증을 사용하기 위해서 확인한 내용을 정리했다.</p><h2 id="쿠버네티스는-user-account-와-service-account를-구분한다"><a href="#쿠버네티스는-user-account-와-service-account를-구분한다" class="headerlink" title="쿠버네티스는 user account 와 service account를 구분한다."></a>쿠버네티스는 user account 와 service account를 구분한다.</h2><blockquote><p>Kubernetes distinguishes between the concept of a user account and a service account for a number of reasons:</p><ul><li>User accounts are for humans. Service accounts are for processes, which run in pods.</li><li>User accounts are intended to be global. Names must be unique across all namespaces of a cluster, future user resource will not be namespaced. Service accounts are namespaced.</li><li>Typically, a cluster’s User accounts might be synced from a corporate database, where new user account creation requires special privileges and is tied to complex business processes. Service account creation is intended to be more lightweight, allowing cluster users to create service accounts for specific tasks (i.e. principle of least privilege).</li><li>Auditing considerations for humans and service accounts may differ.</li><li>A config bundle for a complex system may include definition of various service accounts for components of that system. Because service accounts can be created ad-hoc and have namespaced names, such config is portable.</li></ul><p><a href="https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/#user-accounts-versus-service-accounts" rel="external nofollow noopener noreferrer" target="_blank">https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/#user-accounts-versus-service-accounts</a></p></blockquote><p>쿠버네티스는 사용자를 API로 직접 관리하지 않는다. 일반적으로 외부 사용자 ID관리 시스템으로 정의하고, 기존 시스템(AD, LDAP, …)을 활용할 수 있는 연결성만 제공한다.</p><h2 id="인가모드-authorization-mode"><a href="#인가모드-authorization-mode" class="headerlink" title="인가모드 (authorization-mode)"></a>인가모드 (authorization-mode)</h2><p><a href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/#authorization-modules" rel="external nofollow noopener noreferrer" target="_blank">쿠버네티스가 지원하는 인가모드</a>는 AlwaysAllow, AlwaysDeny, ABAC, RBAC, Webhook, Node가 있다.</p><blockquote><ul><li><code>--authorization-mode=ABAC</code> Attribute-Based Access Control (ABAC) mode allows you to configure policies using local files.</li><li><code>--authorization-mode=RBAC</code> Role-based access control (RBAC) mode allows you to create and store policies using the Kubernetes API.</li><li><code>--authorization-mode=Webhook</code> WebHook is an HTTP callback mode that allows you to manage authorization using a remote REST endpoint.</li><li><code>--authorization-mode=Node</code> Node authorization is a special-purpose authorization mode that specifically authorizes API requests made by kubelets.</li><li><code>--authorization-mode=AlwaysDeny</code> This flag blocks all requests. Use this flag only for testing.</li><li><code>--authorization-mode=AlwaysAllow</code> This flag allows all requests. Use this flag only if you do not require authorization for your API requests</li></ul></blockquote><p>AlwaysDeny는 테스트 환경에만 적합하다. AlwaysAllow 모드는 API 요청에 대한 인증이 필요하지 않은 경우에만 사용한다.<br>쿠버네티스에서 가장 효과적인 모듈은 <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/" rel="external nofollow noopener noreferrer" target="_blank">RBAC(Role Base Access Control)</a> 이라고 한다.</p><p>kube-apiserver manifest 를 보면 <code>authorization-mode</code>를 확인할 수 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> cat /etc/kubernetes/manifests/kube-apiserver.yaml</span></span><br><span class="line">...</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  ...</span><br><span class="line">    - --authorization-mode=Node,RBAC</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><h2 id="일반적으로-사용하는-API-클라이언트-kubectl-의-API서버-요청-방식을-확인해보자"><a href="#일반적으로-사용하는-API-클라이언트-kubectl-의-API서버-요청-방식을-확인해보자" class="headerlink" title="일반적으로 사용하는 API 클라이언트 kubectl 의 API서버 요청 방식을 확인해보자."></a>일반적으로 사용하는 API 클라이언트 kubectl 의 API서버 요청 방식을 확인해보자.</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl -v=7 get po pod-1</span><br><span class="line">.. 31065 loader.go:359] Config loaded from file:  /root/.kube/config</span><br><span class="line">.. 31065 round_trippers.go:416] GET https://172.16.10.20:6443/api/v1/namespaces/default/pods/pod-1</span><br><span class="line">.. 31065 round_trippers.go:423] Request Headers:</span><br><span class="line">.. 31065 round_trippers.go:426]     Accept: application/json;as=Table;v=v1beta1;g=meta.k8s.io, application/json</span><br><span class="line">.. 31065 round_trippers.go:426]     User-Agent: kubectl/v1.15.5 (linux/amd64) kubernetes/20c265f</span><br><span class="line">.. 31065 round_trippers.go:441] Response Status: 200 OK in 8 milliseconds</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol><li><p>쿠버네티스 컨피그 파일 로드</p><p><code>Config loaded from file:  /root/.kube/config</code> </p><p>클러스터에 엑세스 하려면 클러스터의 위치정보를 알아야 하고, 클러스터에 접속하기 위한 인증정보를 가져야 한다. </p><p>참고 <a href="https://kubernetes.io/ko/docs/tasks/access-application-cluster/access-cluster/" rel="external nofollow noopener noreferrer" target="_blank">https://kubernetes.io/ko/docs/tasks/access-application-cluster/access-cluster/</a></p><p><code>❯ kubectl config view</code></p></li></ol><ol start="2"><li><p>쿠버네티스 API 호출</p><p><code>https://172.16.10.20:6443/api/v1/namespaces/default/pods/pod-1</code></p></li></ol><p><br></p><h2 id="ServiceAccount-토큰을-이용한-인증"><a href="#ServiceAccount-토큰을-이용한-인증" class="headerlink" title="ServiceAccount 토큰을 이용한 인증"></a>ServiceAccount 토큰을 이용한 인증</h2><p>일반적으로 ServiceAccount는 User가 아닌 파드(어플리케이션)가 API를 호출하기 위한 권한을 부여하기 위해서 사용한다.<br>ServiceAccounts는 모든 파드 리소스에 대한 네임스페이스 사용자 계정으로 생각할 수 있다.</p><h3 id="파드-어플리케이션-가-API를-호출하기-위한-구조-설계해보기"><a href="#파드-어플리케이션-가-API를-호출하기-위한-구조-설계해보기" class="headerlink" title="파드(어플리케이션)가 API를 호출하기 위한 구조 설계해보기"></a>파드(어플리케이션)가 API를 호출하기 위한 구조 설계해보기</h3><p><img src="/images/serviceaccount-role-binding.png" alt="serviceaccount-role-binding"></p><p><br></p><ul><li><p>Pod 의 경우 클러스터 전체에 대한 권한관리가 필요하기 때문에 <code>ClusterRole</code>을 생성해서 권한에 대한 정의를 하고, <code>ServiceAccount</code>와 함께 <code>ClusterRoleBinding</code>을 생성해서 바인딩 해주었다.</p><ul><li>Role은 네임스페이스 단위, ClusterRole은 클러스터 전체에 대한 권한을 관리한다.</li></ul></li><li><p><code>ServiceAccount</code>를 정의하고, <code>Pod</code> 생성 시 spec에 지정 했다 </p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">서비스어카운트명</span></span><br></pre></td></tr></table></figure><ul><li><p>지정한 서비스어카운트의 인증정보(토큰)가 파드 생성 시 위치하게 된다.</p><blockquote><p>kube-system에 의해 파드는 서비스 어카운트와 연계되며 해당 서비스 어카운트의 인증정보(토큰)은 파드 내 각 컨테이너의 파일시스템 트리의 <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code>에 위치한다.</p><p><a href="https://kubernetes.io/ko/docs/tasks/access-application-cluster/access-cluster/#%ED%8C%8C%EB%93%9C%EC%97%90%EC%84%9C-api-%EC%95%A1%EC%84%B8%EC%8A%A4" rel="external nofollow noopener noreferrer" target="_blank">파드에서 API 액세스</a></p></blockquote></li></ul><ul><li><p>Pod에 ServiceAccount가 정의되어 있지 않으면 <a href="https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/#service-account-admission-controller" rel="external nofollow noopener noreferrer" target="_blank">Service Account Admission Controller</a>에 의해 <code>default</code> ServiceAccount가 기본으로 설정된다.</p><ul><li><p>Pod의 상세정보를 확인 해보면..</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ kubectl describe pod/pod-1 -n default</span><br><span class="line">Name:         pod-1</span><br><span class="line">Namespace:    default</span><br><span class="line">...</span><br><span class="line">    Mounts:</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from default-token-sln9r (ro)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><ul><li><p>Namespace마다 default ServiceAccount가 생성된다. </p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ kubectl get serviceaccounts -A</span><br><span class="line">NAMESPACE         NAME                                 SECRETS   AGE</span><br><span class="line">default           default                              1         4d</span><br></pre></td></tr></table></figure></li><li><p>서비스 어카운트 개수 만큼 <code>&lt;ServiceAccount명&gt;-token-xxxxx</code> 으로 자동 생성된다.</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ kubectl get secrets -A</span><br><span class="line">NAMESPACE         NAME</span><br><span class="line">default           default-token-sln9r</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>보안관점에서는 쿠버네티스 API 접근을 파드에 제공하는 것에 대한 부적절한 시나리오가 많이 있다.</p></blockquote><h2 id="Kubernetes-Client-라이브러리를-사용했을-때-인증-방식"><a href="#Kubernetes-Client-라이브러리를-사용했을-때-인증-방식" class="headerlink" title="Kubernetes Client 라이브러리를 사용했을 때 인증 방식"></a>Kubernetes Client 라이브러리를 사용했을 때 인증 방식</h2><p>쿠버네티스에서 지원하는 Python 기반의 라이브러리를 사용했을 때 어떤 방식으로 인증이 되고, API 서버에 호출까지 이루어지는지 확인해 보자.</p><p>관련 포스팅 : <a href="/2020/02/10/20200210-d-k-client/">Docker Client와 Kubernetes Client 역할을 하는 API 서버를 구축할 수 있을까?</a></p><h3 id="load-incluster-config"><a href="#load-incluster-config" class="headerlink" title="load_incluster_config"></a>load_incluster_config</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">configuration = config.load_incluster_config()</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_incluster_config</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Use the service account kubernetes gives to pods to connect to kubernetes</span></span><br><span class="line"><span class="string">    cluster. It's intended for clients that expect to be running inside a pod</span></span><br><span class="line"><span class="string">    running on kubernetes. It will raise an exception if called from a process</span></span><br><span class="line"><span class="string">    not running in a kubernetes environment."""</span></span><br><span class="line">    InClusterConfigLoader(token_filename=SERVICE_TOKEN_FILENAME,</span><br><span class="line">                          cert_filename=SERVICE_CERT_FILENAME).load_and_set()</span><br><span class="line">...</span><br><span class="line">SERVICE_TOKEN_FILENAME = <span class="string">"/var/run/secrets/kubernetes.io/serviceaccount/token"</span></span><br><span class="line">SERVICE_CERT_FILENAME = <span class="string">"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"</span></span><br></pre></td></tr></table></figure><p>파드 내 각 컨테이너의 파일시스템 트리의 <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code>에 위치한 토큰을 이용하여 인증한다. </p><h3 id="load-kube-config"><a href="#load-kube-config" class="headerlink" title="load_kube_config"></a>load_kube_config</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">config.load_kube_config()</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_kube_config</span><span class="params">(config_file=None, context=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                     client_configuration=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                     persist_config=True)</span>:</span></span><br><span class="line">    <span class="string">"""Loads authentication and cluster information from kube-config file</span></span><br><span class="line"><span class="string">    and stores them in kubernetes.client.configuration.</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> config_file <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        config_file = KUBE_CONFIG_DEFAULT_LOCATION</span><br><span class="line"></span><br><span class="line">    loader = _get_kube_config_loader_for_yaml_file(</span><br><span class="line">        config_file, active_context=context,</span><br><span class="line">        persist_config=persist_config)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">...</span><br><span class="line">KUBE_CONFIG_DEFAULT_LOCATION = os.environ.get(<span class="string">'KUBECONFIG'</span>, <span class="string">'~/.kube/config'</span>)</span><br></pre></td></tr></table></figure><p>kube-config 파일에서 인증 및 클러스터 정보를 로드해서 사용하는 방식</p><h2 id="끝"><a href="#끝" class="headerlink" title="끝"></a>끝</h2><p><a href="http://www.yes24.com/Product/Goods/73416815?scode=032&amp;OzSrank=7" rel="external nofollow noopener noreferrer" target="_blank">매니징 쿠버네티스</a>, <a href="http://www.yes24.com/Product/Goods/83556239?scode=032&amp;OzSrank=5" rel="external nofollow noopener noreferrer" target="_blank">쿠버네티스를 활용한 클라우드 네이티브 데브옵스</a>, <a href="https://kubernetes.io/ko/docs/concepts/overview/what-is-kubernetes/" rel="external nofollow noopener noreferrer" target="_blank">쿠버네티스 공식 문서</a> 를 보면서 참고하고 있다.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2020/03/01/20200301-kubernetes-rbac/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows PowerShell 에서 kubectl 명령어에 대한 별칭(alias)을 등록해서 사용해 보자</title>
      <link>https://borakim-b.github.io/2020/02/15/20200215-kubectl-alias/</link>
      <guid>https://borakim-b.github.io/2020/02/15/20200215-kubectl-alias/</guid>
      <pubDate>Sat, 15 Feb 2020 05:13:57 GMT</pubDate>
      <description>
      
        &lt;p&gt;kubectl 명령어 사용 시 shell alias 등록을 통해 생산성을 향상시키는 방법을 알아보자.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>kubectl 명령어 사용 시 shell alias 등록을 통해 생산성을 향상시키는 방법을 알아보자.</p><a id="more"></a><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>윈도우 환경에서 사용하고 있다면.. PowerShell에서 별칭을 등록해서 사용할 수 있다.<br><code>kubectl-aliases</code> 프로젝트 Fork해서 작성된 <a href="https://github.com/shanoor/kubectl-aliases-powershell" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/shanoor/kubectl-aliases-powershell</a> 을 이용해서 쉽게 설정할 수 있다.</p><h3 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h3><ol><li><a href="https://github.com/shanoor/kubectl-aliases-powershell/blob/master/kubectl_aliases.ps1" rel="external nofollow noopener noreferrer" target="_blank">kubectl_aliases.ps1</a> 파일을 <code>$Home\Documents\WindowsPowerShell\</code> 경로에 다운로드</li><li><p>Command 실행</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; &apos;. $Home\Documents\WindowsPowerShell\kubectl_aliases.ps1&apos; | Out-File $PROFILE.CurrentUserAllHosts -Encoding ascii -Append</span><br></pre></td></tr></table></figure></li><li><p>PowerShell 재실행</p></li><li><p>확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; kubectl get namespaces</span><br></pre></td></tr></table></figure><p>alias 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; kgns                                                               </span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   21d</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><code>.bash_profile</code>에 별칭을 추가해서 관리하면 된다.</p><h3 id="예시-1"><a href="#예시-1" class="headerlink" title="예시"></a>예시</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alias k='kubectl'</span><br><span class="line">alias kg='kubectl get'</span><br><span class="line">alias kgpo='kubectl get pod'</span><br><span class="line">..</span><br></pre></td></tr></table></figure><h3 id="자세한-설정방법은-아래-링크-참고한다"><a href="#자세한-설정방법은-아래-링크-참고한다" class="headerlink" title="자세한 설정방법은 아래 링크 참고한다"></a>자세한 설정방법은 아래 링크 참고한다</h3><p><a href="https://github.com/ahmetb/kubectl-aliases" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ahmetb/kubectl-aliases</a><br>800 여개의 별칭이 정의되어서 자동으로 등록할 수 있는 스크립트를 제공한다.</p><h2 id="비교"><a href="#비교" class="headerlink" title="비교"></a>비교</h2><ul><li><p>기본</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; kubectl get services</span><br></pre></td></tr></table></figure></li><li><p>단축형 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; kubectl get svc</span><br></pre></td></tr></table></figure></li><li><p>alias 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; kgsvc</span><br></pre></td></tr></table></figure></li><li><p>alias + 단축형</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; kg svc</span><br></pre></td></tr></table></figure></li></ul><h2 id="끝"><a href="#끝" class="headerlink" title="끝."></a>끝.</h2><p>OS 종류에 맞게 자주사용하는 alias를 등록해서 사용할 수 있다.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2020/02/15/20200215-kubectl-alias/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker Client와 Kubernetes Client 역할을 하는 API 서버를 구축할 수 있을까?</title>
      <link>https://borakim-b.github.io/2020/02/10/20200210-d-k-client/</link>
      <guid>https://borakim-b.github.io/2020/02/10/20200210-d-k-client/</guid>
      <pubDate>Mon, 10 Feb 2020 09:29:03 GMT</pubDate>
      <description>
      
        &lt;p&gt;docker client 와 kubernetes client에 대해서 알아보고, Python 기반의 공식 라이브러리를 사용하여 테스트해보자.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>docker client 와 kubernetes client에 대해서 알아보고, Python 기반의 공식 라이브러리를 사용하여 테스트해보자.<br><a id="more"></a></p><h2 id="Docker-Client"><a href="#Docker-Client" class="headerlink" title="Docker Client"></a>Docker Client</h2><p>도커 클라이언트는 도커 데몬과 UNIX Socket 또는 REST API를 사용하여 통신한다.<br>도커 데몬과 통신하는 방법은 Docker CLI, SDK (Go, Python) 사용하여 자체적으로 구축, Docker Engine API를 직접 호출 하는 방법이 존재한다. </p><p><a href="https://docs.docker.com/develop/sdk/" rel="external nofollow noopener noreferrer" target="_blank">공식적으로 지원되는 라이브러리</a> 의 경우 Go, Python, HTTP 가 있다.<br>커뮤니티에 의해 관리되는 Unofficial libraries 중에 Java 등이 존재 한다.</p><h3 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h3><p>Python 기반의 공식 라이브러리(<a href="https://docker-py.readthedocs.io/en/stable/index.html" rel="external nofollow noopener noreferrer" target="_blank">Python Docker Engine SDK</a>)를 사용했다.</p><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pip install docker</span><br></pre></td></tr></table></figure><h4 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h4><p>도커 이미지 목록을 조회하는 예시</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> docker</span><br><span class="line"></span><br><span class="line">client = docker.from_env()</span><br><span class="line">containers = client.containers.list()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> containers:</span><br><span class="line">    print(c.image)</span><br></pre></td></tr></table></figure><h4 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Image: &apos;test-app:0.1&apos;&gt;</span><br><span class="line">&lt;Image: &apos;eureka-server:0.1&apos;&gt;</span><br></pre></td></tr></table></figure><h4 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h4><p>비공식 라이브러리 중에 자바기반의 <a href="https://github.com/spotify/docker-client" rel="external nofollow noopener noreferrer" target="_blank">docker-client</a> 에 대해서 우선 테스트를 해보았다.<br>기존 스프링 부트 프로젝트 라이브러리의 버전과 docker-client에서 사용되는 라이브러리들 간의 Conflict가 발생했다. (<a href="https://github.com/spotify/docker-client/issues/1030" rel="external nofollow noopener noreferrer" target="_blank">예</a>)</p><h2 id="Kubernetes-Client"><a href="#Kubernetes-Client" class="headerlink" title="Kubernetes Client"></a>Kubernetes Client</h2><p>쿠버네티스 API를 사용하기 위해서 공식적으로 지원되는 <a href="https://kubernetes.io/ko/docs/reference/using-api/client-libraries/" rel="external nofollow noopener noreferrer" target="_blank">쿠버네티스 클라이언트 라이브러리</a>를 사용한다.</p><blockquote><p><a href="https://kubernetes.io/ko/docs/reference/using-api/api-overview/" rel="external nofollow noopener noreferrer" target="_blank">쿠버네티스 REST API</a>를 사용해 애플리케이션을 작성하기 위해 API 호출 또는 요청/응답 타입을 직접 구현할 필요는 없다. 사용하고 있는 프로그래밍 언어를 위한 클라이언트 라이브러리를 사용하면 된다.</p><p>…</p></blockquote><p>쿠버네티스 클라이언트 라이브러리는 Go, Python, Java 등이 공식적으로 관리되고 있다.<br><a href="https://github.com/kubernetes-client/python/" rel="external nofollow noopener noreferrer" target="_blank">Python 라이브러리</a> 를 이용해서 테스트해보자.</p><h3 id="개발환경"><a href="#개발환경" class="headerlink" title="개발환경"></a>개발환경</h3><p>Python 2.7 and 3.4 + </p><h3 id="설치-1"><a href="#설치-1" class="headerlink" title="설치"></a>설치</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; pip install kubernetes</span><br><span class="line">...</span><br><span class="line">Installing collected packages: pyyaml, oauthlib, requests-oauthlib, pyasn1, rsa, cachetools, pyasn1-modules, google-auth, python-dateutil, kubernetes</span><br><span class="line">Successfully installed cachetools-<span class="number">4.0</span>.<span class="number">0</span> google-auth-<span class="number">1.11</span>.<span class="number">0</span> kubernetes-<span class="number">10.0</span>.<span class="number">1</span> oauthlib-<span class="number">3.1</span>.<span class="number">0</span> pyasn1-<span class="number">0.4</span>.<span class="number">8</span> pyasn1-modules-<span class="number">0.2</span>.<span class="number">8</span> python-dateutil-<span class="number">2.8</span>.<span class="number">1</span> pyyaml-<span class="number">5.3</span> requests-oauthlib-<span class="number">1.3</span>.<span class="number">0</span> rsa-<span class="number">4.0</span></span><br></pre></td></tr></table></figure><h3 id="예제-1"><a href="#예제-1" class="headerlink" title="예제"></a>예제</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kubernetes <span class="keyword">import</span> client, config</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configs can be set in Configuration class directly or using helper utility</span></span><br><span class="line">config.load_kube_config()</span><br><span class="line"></span><br><span class="line">v1 = client.CoreV1Api()</span><br><span class="line">print(<span class="string">"Listing pods with their IPs:"</span>)</span><br><span class="line">ret = v1.list_pod_for_all_namespaces(watch=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ret.items:</span><br><span class="line">    print(<span class="string">"%s\t%s\t%s"</span> % (i.status.pod_ip, i.metadata.namespace, i.metadata.name))</span><br></pre></td></tr></table></figure><p>라이브러리에 구현되어있는 함수를 통해서 쿠버네티스 API <code>/api/v1/pods</code> 를 호출하게 된다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">return</span> self.api_client.call_api(<span class="string">'/api/v1/pods'</span>, <span class="string">'GET'</span>,</span><br><span class="line">                                        path_params,</span><br><span class="line">                                        query_params,</span><br><span class="line">                                        header_params,</span><br><span class="line">                                        body=body_params,</span><br><span class="line">                                        post_params=form_params,</span><br><span class="line">                                        files=local_var_files,</span><br><span class="line">                                        response_type=<span class="string">'V1PodList'</span>,</span><br><span class="line">                                        auth_settings=auth_settings,</span><br><span class="line">                                        async_req=params.get(<span class="string">'async_req'</span>),</span><br><span class="line">                                        _return_http_data_only=params.get(<span class="string">'_return_http_data_only'</span>),</span><br><span class="line">                                        _preload_content=params.get(<span class="string">'_preload_content'</span>, <span class="keyword">True</span>),</span><br><span class="line">                                        _request_timeout=params.get(<span class="string">'_request_timeout'</span>),</span><br><span class="line">                                        collection_formats=collection_formats)</span><br></pre></td></tr></table></figure><p>샘플 코드의 경우 아래와 같은 결과 데이터를 출력하게 된다.<br>(단일 노드의 kubernetes cluster 구성을 지원해주는 Docker Desktop을 사용해서 테스트 함.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">10.1.0.36kube-systemcoredns-5c98db65d4-5kvwh</span><br><span class="line">10.1.0.37kube-systemcoredns-5c98db65d4-6vfrz</span><br><span class="line">192.168.65.3kube-systemetcd-docker-desktop</span><br><span class="line">192.168.65.3kube-systemkube-apiserver-docker-desktop</span><br><span class="line">192.168.65.3kube-systemkube-controller-manager-docker-desktop</span><br><span class="line">192.168.65.3kube-systemkube-proxy-9l6jq</span><br><span class="line">192.168.65.3kube-systemkube-scheduler-docker-desktop</span><br></pre></td></tr></table></figure><h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><p><a href="https://github.com/kubernetes-client/python/blob/master/kubernetes/README.md#documentation-for-api-endpoints" rel="external nofollow noopener noreferrer" target="_blank">documentation-for-api-endpoints</a></p><p>쿠버네티스 API에 대한 문서는</p><blockquote><p>전체 API 관례는 <a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md" rel="external nofollow noopener noreferrer" target="_blank">API conventions doc</a>에 기술되어 있다.</p><p>API 엔드포인트, 리소스 타입과 샘플은 <a href="https://kubernetes.io/docs/reference" rel="external nofollow noopener noreferrer" target="_blank">API Reference</a>에 기술되어 있다.</p><p>API에 원격 접속하는 방법은 <a href="https://kubernetes.io/docs/reference/access-authn-authz/controlling-access/" rel="external nofollow noopener noreferrer" target="_blank">Controlling API Access doc</a>에서 논의되었다</p></blockquote><h2 id="끝"><a href="#끝" class="headerlink" title="끝"></a>끝</h2><p>공식적으로 지원되는 <a href="https://docker-py.readthedocs.io/en/stable/index.html" rel="external nofollow noopener noreferrer" target="_blank">Python Docker Engine SDK</a>,  <a href="https://kubernetes.io/ko/docs/reference/using-api/client-libraries/" rel="external nofollow noopener noreferrer" target="_blank">쿠버네티스 클라이언트 라이브러리</a> 사용하여 컨테이너 관리에 필요한 기능을 구현한 API 서버를 구축해 볼 수 있다.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2020/02/10/20200210-d-k-client/#disqus_thread</comments>
    </item>
    
    <item>
      <title>유레카 서버와 유레카 클라이언트 어떻게 동작할까?</title>
      <link>https://borakim-b.github.io/2019/12/08/20191208-eureka-log/</link>
      <guid>https://borakim-b.github.io/2019/12/08/20191208-eureka-log/</guid>
      <pubDate>Sun, 08 Dec 2019 14:37:02 GMT</pubDate>
      <description>
      
        &lt;p&gt;Eureka Server 내장한 어플리케이션의 로그와 Eureka Client가 구현되어있는 어플리케이션 로그를 보면서 유레카의 동작방식을 이해해 보자.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Eureka Server 내장한 어플리케이션의 로그와 Eureka Client가 구현되어있는 어플리케이션 로그를 보면서 유레카의 동작방식을 이해해 보자.<br><a id="more"></a></p><h2 id="어플리케이션-로그"><a href="#어플리케이션-로그" class="headerlink" title="어플리케이션 로그"></a>어플리케이션 로그</h2><h3 id="Eureka-서버"><a href="#Eureka-서버" class="headerlink" title="Eureka 서버"></a>Eureka 서버</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">11</span>:<span class="number">20.165</span>  INFO <span class="number">1</span> --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : <span class="function">Tomcat initialized with <span class="title">port</span><span class="params">(s)</span>: 8761 <span class="params">(http)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:20.325  INFO 1 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span></span><br><span class="line"><span class="function">2019-11-29 13:11:20.326  INFO 1 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.22]</span></span><br><span class="line"><span class="function">2019-11-29 13:11:20.651  INFO 1 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span></span><br><span class="line"><span class="function">2019-11-29 13:11:20.652  INFO 1 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 6067 ms</span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function">2019-11-29 13:11:29.470  INFO 1 --- [main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 20 <span class="title">endpoint</span><span class="params">(s)</span> beneath base path '/actuator'</span></span><br><span class="line"><span class="function">2019-11-29 13:11:29.974  INFO 1 --- [main] o.s.c.n.eureka.InstanceInfoFactory       : Setting initial instance status as: STARTING</span></span><br><span class="line"><span class="function">2019-11-29 13:11:30.113  INFO 1 --- [main] com.netflix.discovery.DiscoveryClient    : Initializing Eureka in region us-east-1</span></span><br><span class="line"><span class="function">2019-11-29 13:11:30.124  INFO 1 --- [main] com.netflix.discovery.DiscoveryClient    : Client configured to neither register nor query <span class="keyword">for</span> data.</span></span><br><span class="line"><span class="function">2019-11-29 13:11:30.158  INFO 1 --- [main] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp 1575000690156 with initial instances count: 0</span></span><br><span class="line"><span class="function">2019-11-29 13:11:30.330  INFO 1 --- [main] c.n.eureka.DefaultEurekaServerContext    : Initializing ...</span></span><br><span class="line"><span class="function">2019-11-29 13:11:30.337  INFO 1 --- [main] c.n.eureka.cluster.PeerEurekaNodes       : Adding new peer nodes [http:<span class="comment">//registry:8761/eureka/]</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.081  INFO 1 --- [main] c.n.d.provider.DiscoveryJerseyProvider   : Using JSON encoding codec LegacyJacksonJson</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.083  INFO 1 --- [main] c.n.d.provider.DiscoveryJerseyProvider   : Using JSON decoding codec LegacyJacksonJson</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.084  INFO 1 --- [main] c.n.d.provider.DiscoveryJerseyProvider   : Using XML encoding codec XStreamXml</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.089  INFO 1 --- [main] c.n.d.provider.DiscoveryJerseyProvider   : Using XML decoding codec XStreamXml</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.570  INFO 1 --- [main] c.n.eureka.cluster.PeerEurekaNodes       : Replica node URL:  http:<span class="comment">//registry:8761/eureka/</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.613  INFO 1 --- [main] c.n.e.registry.AbstractInstanceRegistry  : Finished initializing remote region registries. All known remote regions: []</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.614  INFO 1 --- [main] c.n.eureka.DefaultEurekaServerContext    : Initialized</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.902  INFO 1 --- [main] o.s.c.n.e.s.EurekaServiceRegistry        : Registering application REGISTRY with eureka with status UP</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.980  INFO 1 --- [Thread-11] o.s.c.n.e.server.EurekaServerBootstrap   : Setting the eureka configuration..</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.981  INFO 1 --- [Thread-11] o.s.c.n.e.server.EurekaServerBootstrap   : Eureka data center value eureka.datacenter is not set, defaulting to <span class="keyword">default</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.981  INFO 1 --- [Thread-11] o.s.c.n.e.server.EurekaServerBootstrap   : Eureka environment value eureka.environment is not set, defaulting to test</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.092  INFO 1 --- [Thread-11] o.s.c.n.e.server.EurekaServerBootstrap   : isAws returned <span class="keyword">false</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.099  INFO 1 --- [Thread-11] o.s.c.n.e.server.EurekaServerBootstrap   : Initialized server context</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.100  INFO 1 --- [Thread-11] c.n.e.r.PeerAwareInstanceRegistryImpl    : Got 1 instances from neighboring DS node</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.100  INFO 1 --- [Thread-11] c.n.e.r.PeerAwareInstanceRegistryImpl    : Renew threshold is: 1</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.100  INFO 1 --- [Thread-11] c.n.e.r.PeerAwareInstanceRegistryImpl    : Changing status to UP</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.163  INFO 1 --- [Thread-11] e.s.EurekaServerInitializerConfiguration : Started Eureka Server</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.289  INFO 1 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 8761 <span class="params">(http)</span> with context path ''</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.310  INFO 1 --- [main] .s.c.n.e.s.EurekaAutoServiceRegistration : Updating port to 8761</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.312  INFO 1 --- [main] k.c.s.e.e.EurekaServerApplication        : Started EurekaServerApplication in 20.454 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">21.053</span>)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:33.010  INFO 1 --- [nio-8761-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'</span></span><br><span class="line"><span class="function">2019-11-29 13:11:33.010  INFO 1 --- [nio-8761-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'</span></span><br><span class="line"><span class="function">2019-11-29 13:11:33.019  INFO 1 --- [nio-8761-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms</span></span><br><span class="line"><span class="function">2019-11-29 13:11:34.244  INFO 1 --- [nio-8761-exec-2] c.n.e.registry.AbstractInstanceRegistry  : Registered instance TEST-SERVICE/53614fa559ab:test-service:9300 with status <span class="title">UP</span> <span class="params">(replication=<span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:36.253  INFO 1 --- [nio-8761-exec-4] c.n.e.registry.AbstractInstanceRegistry  : Registered instance ZUUL-GATEWAY/7cf3a25fe7e2:zuul-gateway:8080 with status <span class="title">UP</span> <span class="params">(replication=<span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:47.191  INFO 1 --- [nio-8761-exec-3] c.n.e.registry.AbstractInstanceRegistry  : Registered instance TEST-SERVICE/382f8bf1dfec:test-service:20180 with status <span class="title">UP</span> <span class="params">(replication=<span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:12:32.157  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br><span class="line"><span class="function">2019-11-29 13:13:32.157  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br><span class="line"><span class="function">2019-11-29 13:14:32.156  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br><span class="line"><span class="function">2019-11-29 13:15:32.156  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br><span class="line"><span class="function">2019-11-29 13:16:32.156  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br></pre></td></tr></table></figure><h4 id="Eureka의-인스턴스-상태"><a href="#Eureka의-인스턴스-상태" class="headerlink" title="Eureka의 인스턴스 상태"></a>Eureka의 인스턴스 상태</h4><h5 id="관련-로그"><a href="#관련-로그" class="headerlink" title="관련 로그"></a>관련 로그</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">11</span>:<span class="number">29.974</span>  INFO <span class="number">1</span> --- [main] o.s.c.n.eureka.InstanceInfoFactory       : Setting initial instance status as: STARTING</span><br><span class="line">...</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">11</span>:<span class="number">34.244</span>  INFO <span class="number">1</span> --- [nio-<span class="number">8761</span>-exec-<span class="number">2</span>] c.n.e.registry.AbstractInstanceRegistry  : Registered instance TEST-SERVICE/<span class="number">53614f</span>a559ab:test-service:<span class="number">9300</span> <span class="function">with status <span class="title">UP</span> <span class="params">(replication=<span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function">2019-11-29 13:12:32.157  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br><span class="line"><span class="function">2019-11-29 13:13:32.157  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br></pre></td></tr></table></figure><p>서비스 레지스트리의 initial instance status는 STARTING 으로 설정 함.<br>TEST-SERVICE/53614fa559ab:test-service:9300 (appID/instanceId)<br>appID는 Application Name 이고, instanceId는 <code>${spring.cloud.hostname}:${spring.application.name}:${server.port}</code> 의 조합이다.</p><h5 id="일반적인-서비스-레지스트리의-Instance-Lifecycle"><a href="#일반적인-서비스-레지스트리의-Instance-Lifecycle" class="headerlink" title="일반적인 서비스 레지스트리의 Instance Lifecycle"></a>일반적인 서비스 레지스트리의 Instance Lifecycle</h5><p>Netflix Eureka와 같은 대부분의 서비스 레지스트리는 인스턴스를 조회하고, 등록하는 인터페이스를 제공한다. (REST API) 그리고 인스턴스 생명주기는 3가지 단계로 표현된다.</p><ol><li><p>Register</p><p>서비스 레지스트리에 microservice instance를 등록 함.</p></li><li><p>Heartbeat</p><p>등록된 instance는 사전 정의된 interval에 따라 레지스트리에 heartbeat을 보낸다.</p><p>레지스트리가 특정시간동안 heartbeat을 받지 못하면 인스턴스는 down 상태로 판단하고, 레지스트리에서 삭제한다.</p></li><li><p>Deregister/Down</p><p>instance가 삭제되었을 경우에 서비스 레지스트리에 등록해제(deregister) 해주는 과정이 필요하다.</p><p>deregister 요청을 받으면 instance는 down 상태가 되고, 레지스트리에서 삭제된다.</p></li></ol><h5 id="Eureka의-Instance-Lifecycle-및-Instance의-상태"><a href="#Eureka의-Instance-Lifecycle-및-Instance의-상태" class="headerlink" title="Eureka의 Instance Lifecycle 및 Instance의 상태"></a>Eureka의 Instance Lifecycle 및 Instance의 상태</h5><p>Instance의 Lifecycle 단계 별로 유레카 Instance Status 값의 변화를 알아보자.</p><ol><li><p>STARTING</p><p>유레카 서버에 서비스가 등록되면서 <code>STARTING</code> 상태가 됨.</p></li><li><p>UP</p><p>서비스 어플리케이션이 요청을 받을 수 있는 상태가 되면 <code>STARTING</code> 에서 <code>UP</code> 상태로 변경 됨.</p></li><li><p>HEARTBEAT</p><p>사전에 정의된 interval(<code>eureka.instance.lease-renewal-interval-in-seconds</code> default:30)에 따라 유레카 서버에 heartbeat을 보내고, 특정시간(<code>eureka.instance.lease-expiration-duration-in-seconds</code> default: 90)동안 유레카 서버가 heartbeat를 받지 못하면 레지스트리에서 해당 인스턴스를 제거한다.</p></li><li><p>DOWN</p><p>인스턴스가 종료되면 <code>DOWN</code> 상태로 변경 한다.</p></li></ol><h5 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h5><blockquote><p><a href="https://github.com/Netflix/eureka/wiki/Eureka-REST-operations" rel="external nofollow noopener noreferrer" target="_blank">Eureka-REST-operations</a></p><p><a href="https://dzone.com/articles/service-registration-with-go-lang-and-eureka" rel="external nofollow noopener noreferrer" target="_blank">https://dzone.com/articles/service-registration-with-go-lang-and-eureka</a> </p></blockquote><h4 id="Eureka-Server-Peer-Node-구성"><a href="#Eureka-Server-Peer-Node-구성" class="headerlink" title="Eureka Server Peer Node 구성"></a>Eureka Server Peer Node 구성</h4><h5 id="관련로그"><a href="#관련로그" class="headerlink" title="관련로그"></a>관련로그</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">11</span>:<span class="number">30.337</span>  INFO <span class="number">1</span> --- [main] c.n.eureka.cluster.PeerEurekaNodes       : Adding <span class="keyword">new</span> peer nodes [http:<span class="comment">//registry:8761/eureka/]</span></span><br></pre></td></tr></table></figure><h5 id="참고-1"><a href="#참고-1" class="headerlink" title="참고"></a>참고</h5><blockquote><p><a href="https://github.com/Netflix/eureka/wiki/Understanding-Eureka-Peer-to-Peer-Communication" rel="external nofollow noopener noreferrer" target="_blank">Understanding Eureka Peer to Peer Communication</a></p></blockquote><h3 id="Eureka-Client-서비스"><a href="#Eureka-Client-서비스" class="headerlink" title="Eureka Client - 서비스"></a>Eureka Client - 서비스</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">com.netflix.discovery.DiscoveryClient    : Disable delta property : <span class="keyword">true</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.296</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Single vip registry refresh property : <span class="keyword">null</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.296</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Force full registry fetch : <span class="keyword">false</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.296</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Application is <span class="keyword">null</span> : <span class="keyword">false</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.297</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Registered Applications size is zero : <span class="keyword">true</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.297</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Application version is -<span class="number">1</span>: <span class="keyword">true</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.297</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Getting all instance registry info from the eureka server</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.524</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : The response status is <span class="number">200</span></span><br><span class="line">...</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.546</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp <span class="number">1575002541545</span> with initial instances count: <span class="number">2</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.548</span>  INFO <span class="number">1</span> --- [           main] o.s.c.n.e.s.EurekaServiceRegistry        : Registering application TEST-SERVICE with eureka with status UP</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.549</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=<span class="number">1575002541549</span>, current=UP, previous=STARTING]</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.554</span>  INFO <span class="number">1</span> --- [nfoReplicator-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_TEST-SERVICE/<span class="number">364</span>b4deadbc7:test-service:<span class="number">20233</span>: registering service...</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.632</span>  INFO <span class="number">1</span> --- [nfoReplicator-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_TEST-SERVICE/<span class="number">364</span>b4deadbc7:test-service:<span class="number">20233</span> - registration status: <span class="number">204</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.640</span>  INFO <span class="number">1</span> --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : <span class="function">Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 20233 <span class="params">(http)</span> with context path ''</span></span><br><span class="line"><span class="function">2019-11-29 13:42:21.645  INFO 1 --- [           main] .s.c.n.e.s.EurekaAutoServiceRegistration : Updating port to 20233</span></span><br><span class="line"><span class="function">2019-11-29 13:42:21.648  INFO 1 --- [           main] k.c.s.e.e.TestServiceApplication         : Started TestServiceApplication in 6.367 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">7.332</span>)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.538  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Disable delta property : <span class="keyword">true</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.539  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Single vip registry refresh property : <span class="keyword">null</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.540  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Force full registry fetch : <span class="keyword">false</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.540  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Application is <span class="keyword">null</span> : <span class="keyword">false</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.540  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Registered Applications size is zero : <span class="keyword">false</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.540  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Application version is -1: <span class="keyword">false</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.540  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Getting all instance registry info from the eureka server</span></span><br></pre></td></tr></table></figure><h4 id="유레카-클라이언트는-유레카-서버로-부터-registry를-fetch해서-캐싱한다"><a href="#유레카-클라이언트는-유레카-서버로-부터-registry를-fetch해서-캐싱한다" class="headerlink" title="유레카 클라이언트는 유레카 서버로 부터 registry를 fetch해서 캐싱한다."></a>유레카 클라이언트는 유레카 서버로 부터 registry를 fetch해서 캐싱한다.</h4><p>서비스 목록을 3초마다 캐싱하도록 설정된 경우의 로그다.</p><p><code>2019-11-29 13:42:21.297 Getting all instance registry info from the eureka server</code> 로그가 출력된 이후 3초가 지난 <code>2019-11-29 13:42:24.540</code> 에 또 fetch해 오는 것을 확인 할 수 있다.</p><h5 id="관련-설정"><a href="#관련-설정" class="headerlink" title="관련 설정"></a>관련 설정</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    registry-fetch-interval-seconds:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">    disable-delta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>registry-fetch-interval-seconds</code> 서버로부터 레지스트리 정보를 읽어와 로컬에 캐시하게 되는데 이때 레지스트리 fetch 간격 (초) </p><p><code>disable-delta</code> 레지스트리 정보의 변경된 부분만 fetch 함.</p><blockquote><p>  Indicates whether the eureka client should disable fetching of delta and should rather resort to getting the full registry information. Note that the delta fetches can reduce the traffic tremendously, because the rate of change with the eureka server is normally much lower than the rate of fetches. The changes are effective at runtime at the next registry fetch cycle as specified by registryFetchIntervalSeconds </p></blockquote><h5 id="참고-2"><a href="#참고-2" class="headerlink" title="참고"></a>참고</h5><blockquote><p><a href="https://www.docs4dev.com/docs/en/spring-cloud/Finchley.SR2/reference/multi__appendix_compendium_of_configuration_properties.html" rel="external nofollow noopener noreferrer" target="_blank">Eureka configuration_properties</a></p></blockquote><h3 id="Instance-Scale-Out-상황에서의-로그-확인"><a href="#Instance-Scale-Out-상황에서의-로그-확인" class="headerlink" title="Instance Scale Out 상황에서의 로그 확인"></a>Instance Scale Out 상황에서의 로그 확인</h3><p>TEST-SERVICE가 레지스트리에 등록되어 있는 상황에서 TEST-SEVICE 의 Instance가 1개 더 생성되었을 때의 로그를 확인해보자.</p><h4 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.627</span>  INFO <span class="number">1</span> --- [nio-<span class="number">8761</span>-exec-<span class="number">3</span>] c.n.e.registry.AbstractInstanceRegistry  : Registered instance TEST-SERVICE/<span class="number">364</span>b4deadbc7:test-service:<span class="number">20233</span> <span class="function">with status <span class="title">UP</span> <span class="params">(replication=<span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:32.160  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br><span class="line"><span class="function">...</span></span><br></pre></td></tr></table></figure><h4 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.546</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp <span class="number">1575002541545</span> with initial instances count: <span class="number">2</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.548</span>  INFO <span class="number">1</span> --- [           main] o.s.c.n.e.s.EurekaServiceRegistry        : Registering application TEST-SERVICE with eureka with status UP</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.549</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=<span class="number">1575002541549</span>, current=UP, previous=STARTING]</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.554</span>  INFO <span class="number">1</span> --- [nfoReplicator-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_TEST-SERVICE/<span class="number">364</span>b4deadbc7:test-service:<span class="number">20233</span>: registering service...</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.632</span>  INFO <span class="number">1</span> --- [nfoReplicator-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_TEST-SERVICE/<span class="number">364</span>b4deadbc7:test-service:<span class="number">20233</span> - registration status: <span class="number">204</span></span><br></pre></td></tr></table></figure><h5 id="서버로그와-클라이언트-로그를-대조해-보면"><a href="#서버로그와-클라이언트-로그를-대조해-보면" class="headerlink" title="서버로그와 클라이언트 로그를 대조해 보면.."></a>서버로그와 클라이언트 로그를 대조해 보면..</h5><p><code>클라이언트</code> - <code>2019-11-29 13:42:21.554 registering service ...</code></p><p><code>서버</code> - <code>2019-11-29 13:42:21.627 Registered instance ...</code></p><p><code>클라이언트</code> - <code>2019-11-29 13:42:21.632 registration status: 204</code></p><table><thead><tr><th><strong>Operation</strong></th><th><strong>HTTP action</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>Register new application instance</td><td>POST /eureka/v2/apps/<strong>appID</strong></td><td>Input: JSON/XML payload HTTP Code: 204 on success</td></tr></tbody></table><ol><li>서비스 등록요청</li><li>유레카 레지스트리 인스턴스 등록</li><li>등록완료</li></ol><h3 id="Instance-Scale-In-상황에서의-로그-확인"><a href="#Instance-Scale-In-상황에서의-로그-확인" class="headerlink" title="Instance Scale In 상황에서의 로그 확인"></a>Instance Scale In 상황에서의 로그 확인</h3><h4 id="Eureka-Server-1"><a href="#Eureka-Server-1" class="headerlink" title="Eureka Server"></a>Eureka Server</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">07</span> <span class="number">11</span>:<span class="number">18</span>:<span class="number">25.478</span>  INFO <span class="number">1</span> --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime <span class="number">0</span>ms</span><br><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">07</span> <span class="number">11</span>:<span class="number">18</span>:<span class="number">28.611</span>  INFO <span class="number">1</span> --- [nio-<span class="number">8761</span>-exec-<span class="number">5</span>] c.n.e.registry.AbstractInstanceRegistry  : Cancelled instance TEST-SERVICE/<span class="number">291358</span>de0d8d:test-service:<span class="number">9300</span> (replication=<span class="keyword">false</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>Operation</strong></th><th><strong>HTTP action</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>De-register application instance</td><td>DELETE /eureka/v2/apps/<strong>appID</strong>/<strong>instanceID</strong></td><td>HTTP Code: 200 on success</td></tr></tbody></table><h2 id="끝"><a href="#끝" class="headerlink" title="끝"></a>끝</h2><p><img src="/images/eureka-server-client.jpg" alt="eureka-server-client"></p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/12/08/20191208-eureka-log/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Flask 기반의 API 서버 만들기</title>
      <link>https://borakim-b.github.io/2019/12/01/20191201-flask-restplus/</link>
      <guid>https://borakim-b.github.io/2019/12/01/20191201-flask-restplus/</guid>
      <pubDate>Sun, 01 Dec 2019 12:40:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;Python 웹 어플리케이션 프레임워크인 Flask를 이용해 빠르게 REST-ful API 서버를 만들어 보고 Swagger UI documentation을 제공하는 방법을 알아보자. &lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Python 웹 어플리케이션 프레임워크인 Flask를 이용해 빠르게 REST-ful API 서버를 만들어 보고 Swagger UI documentation을 제공하는 방법을 알아보자. </p><a id="more"></a><h2 id="Flask란"><a href="#Flask란" class="headerlink" title="Flask란?"></a><a href="https://palletsprojects.com/p/flask/" rel="external nofollow noopener noreferrer" target="_blank">Flask란</a>?</h2><blockquote><p>Flask is a lightweight <a href="https://wsgi.readthedocs.io/" rel="external nofollow noopener noreferrer" target="_blank">WSGI</a> web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. It began as a simple wrapper around <a href="https://palletsprojects.com/p/werkzeug" rel="external nofollow noopener noreferrer" target="_blank">Werkzeug</a> and <a href="https://palletsprojects.com/p/jinja" rel="external nofollow noopener noreferrer" target="_blank">Jinja</a> and has become one of the most popular Python web application frameworks.<br>…</p></blockquote><h2 id="개발"><a href="#개발" class="headerlink" title="개발"></a>개발</h2><h3 id="환경-및-주요-패키지"><a href="#환경-및-주요-패키지" class="headerlink" title="환경 및 주요 패키지"></a>환경 및 주요 패키지</h3><h4 id="Python-3-x"><a href="#Python-3-x" class="headerlink" title="Python 3.x"></a><a href="https://www.python.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">Python 3.x</a></h4><p>virtualenv, virtualenvwrapper</p><h4 id="Flask-RESTPlus"><a href="#Flask-RESTPlus" class="headerlink" title="Flask-RESTPlus"></a><a href="https://flask-restplus.readthedocs.io/en/stable/" rel="external nofollow noopener noreferrer" target="_blank">Flask-RESTPlus</a></h4><blockquote><p>Flask-RESTPlus is an extension for Flask that adds support for quickly building REST APIs</p></blockquote><p>Flask-RESTPlus 와 유사한 <a href="https://flask-restful.readthedocs.io/en/latest/" rel="external nofollow noopener noreferrer" target="_blank">Flask-Restful</a> 이 있는데 Flask-RESTPlus 는 Flask-Restful 을 fork 하여 시작된 프로젝트라고 한다.</p><p>Flask-RESTPlus 는 기본적으로 Swagger UI documentation을 제공한다.</p><p><strong>설치</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-restplus</span><br></pre></td></tr></table></figure></p><h4 id="Gunicorn"><a href="#Gunicorn" class="headerlink" title="Gunicorn"></a>Gunicorn</h4><blockquote><p>Gunicorn ‘Green Unicorn’ is a Python WSGI HTTP Server for UNIX</p></blockquote><p>Flask 에는 Gunicorn을 별도로 설치하지 않아도 built-in 서버가 존재한다. 로컬에서 개발할 때에는 해당 서버를 이용해도 됨.</p><h3 id="잠깐-알고가기"><a href="#잠깐-알고가기" class="headerlink" title="잠깐 알고가기"></a>잠깐 알고가기</h3><p>패키지 리스트 저장</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>패키지 설치</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="프로젝트-구조-설계"><a href="#프로젝트-구조-설계" class="headerlink" title="프로젝트 구조 설계"></a>프로젝트 구조 설계</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">projectname</span><br><span class="line">  -- api</span><br><span class="line">  -- environment</span><br><span class="line">  -- server</span><br><span class="line">  -- services</span><br><span class="line">run.py</span><br><span class="line">Dockerfile</span><br><span class="line">requirements.txt</span><br></pre></td></tr></table></figure><ul><li><code>run.py</code> API Entry Point 에 대한 정의</li><li><p><code>environment</code> profile 에 따른 환경변수에 대한 설정 정의</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">env = os.environ.get(<span class="string">"PROFILES_ACTIVE"</span>, <span class="string">"local"</span>)</span><br><span class="line">port = os.environ.get(<span class="string">"PORT"</span>, <span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">profiles = &#123;</span><br><span class="line">    <span class="string">"local"</span>: &#123;<span class="string">"port"</span>: <span class="number">8080</span>, <span class="string">"debug"</span>: <span class="keyword">True</span>, <span class="string">"swagger-url"</span>: <span class="string">"/api/swagger"</span>&#125;,</span><br><span class="line">    <span class="string">"dev"</span>: &#123;<span class="string">"port"</span>: port, <span class="string">"debug"</span>: <span class="keyword">False</span>, <span class="string">"swagger-url"</span>: <span class="string">"/api/swagger"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">environment_config = profiles[env]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>server</code> flask와 flask-restplus의 서버 인스턴스에 대한 정의 및 설정 (app, api)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api, Resource, fields</span><br><span class="line"><span class="keyword">from</span> environment.instance <span class="keyword">import</span> environment_config</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strftime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.app = Flask(__name__)</span><br><span class="line">        self.api = Api(self.app,</span><br><span class="line">                       version=<span class="string">'1.0'</span>,</span><br><span class="line">                       title=<span class="string">'Flask API'</span>,</span><br><span class="line">                       description=<span class="string">'Flask API'</span>,</span><br><span class="line">                       doc=environment_config[<span class="string">"swagger-url"</span>],</span><br><span class="line">                       prefix=<span class="string">'/api'</span></span><br><span class="line">                       )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.app.run(</span><br><span class="line">            debug=environment_config[<span class="string">"debug"</span>],</span><br><span class="line">            port=environment_config[<span class="string">"port"</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server = Server()</span><br></pre></td></tr></table></figure><p><code>environment_config[&quot;swagger-url&quot;]</code> Swagger UI 의 URL path를 정의한다. </p></li><li><p><code>api</code> API Endpoint 에 매핑되는 Class 정의.</p><p><strong>URI : prefix + namespace + endpoint</strong></p></li></ul><p>  <strong>GET /api/test/list </strong>  </p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test_api = api.namespace(<span class="string">'test'</span>, description=<span class="string">'Test API'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">@test_api.route('/list')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestListAll</span><span class="params">(Resource)</span>:</span></span><br><span class="line"><span class="meta">    @test_api.doc('test_list_all')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        테스트 목록 조회</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        test_list = test_service.get_list(is_all=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> test_list</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>  <strong>POST /api/test/create</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@test_api.route('/create')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCreate</span><span class="params">(Resource)</span>:</span></span><br><span class="line"><span class="meta">    @test_api.expect(test, validate=True)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>  <strong>Parameter 사용  /api/test/{test_id}/update</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@test_api.route('/&lt;string:test_id&gt;/update')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestUpdate</span><span class="params">(Resource)</span>:</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><code>services</code> service 정의.</li></ul><h3 id="Docker를-이용하여-컨테이너화-해보기"><a href="#Docker를-이용하여-컨테이너화-해보기" class="headerlink" title="Docker를 이용하여 컨테이너화 해보기"></a>Docker를 이용하여 컨테이너화 해보기</h3><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="bash">RUN apt-get install -y gunicorn</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY . /app</span></span><br><span class="line"><span class="bash">WORKDIR /app</span></span><br><span class="line"><span class="bash">RUN pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"gunicorn"</span>, <span class="string">"-b"</span>, <span class="string">"0.0.0.0:8080"</span>, <span class="string">"--access-logfile"</span>, <span class="string">"access.log"</span>, <span class="string">"--error-logfile"</span>, <span class="string">"error.log"</span>, <span class="string">"run:app"</span>]</span></span><br></pre></td></tr></table></figure><h4 id="이미지-빌드"><a href="#이미지-빌드" class="headerlink" title="이미지 빌드"></a>이미지 빌드</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t flask-test-app:latest .</span><br></pre></td></tr></table></figure><h4 id="컨테이너-생성"><a href="#컨테이너-생성" class="headerlink" title="컨테이너 생성"></a>컨테이너 생성</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -d -p 8080:8080 --name flask-test-app flask-test-app:latest</span><br></pre></td></tr></table></figure><h3 id="끝"><a href="#끝" class="headerlink" title="끝"></a>끝</h3><p>간단하게 API 서버를 구성해볼 수 있고, 관련 API 문서(Swagger UI documentation)도 만들 수 있다.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/12/01/20191201-flask-restplus/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring Cloud Netflix를 이용해 API Gateway 서버 만들기</title>
      <link>https://borakim-b.github.io/2019/09/28/20190928-zuul-gateway/</link>
      <guid>https://borakim-b.github.io/2019/09/28/20190928-zuul-gateway/</guid>
      <pubDate>Sat, 28 Sep 2019 11:02:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;API 게이트웨이에 대해서 알아보고 Zuul API Gateway, Eureka Server, MicroService(EurekaClient) 구성 후 Docker를 이용해 컨테이너화 해보자.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>API 게이트웨이에 대해서 알아보고 Zuul API Gateway, Eureka Server, MicroService(EurekaClient) 구성 후 Docker를 이용해 컨테이너화 해보자.<br><a id="more"></a></p><h2 id="API-Gateway-란"><a href="#API-Gateway-란" class="headerlink" title="API Gateway 란?"></a>API Gateway 란?</h2><p>API Gateway 패턴은 마이크로서비스 아키텍처를 적용하여 개발할 때 고려된다.<br>클라이언트와 마이크로서비스 사이에 위치해서 클라이언트가 서비스에 요청을 보낼 때 사용되는데<br>API Gateway가 Single entry point를 제공하고, 클라이언트의 요청에 대해서 내부 마이크로 서비스의 엔드포인트로 라우팅하는 프록시 서버와 같은 역할을 한다.</p><p>API Gateway를 사용하게되면 클라이언트 앱에 대해서 단일 엔드포인트(URL)을 제공할 수 있고, 마이크로 서비스와 클라이언트 앱을 분리할 수 있다.<br>마이크로 서비스에서 공통적으로 필요한 인증 및 권한 부여, 응답에 대한 캐싱, 부하분산, 속도제한 등의 구현을 게이트웨이에서 처리할 수 있고, 따라서 각 마이크로 서비스의 구현을 간소화 할 수 있다.<br>반면에 단일 실패 지점이 만들어질 수 있고 추가 네트워크 호출로 응답시간이 증가 할 수 있는 등의 단점이 있을 수 있다.</p><p><a href="https://docs.microsoft.com/ko-kr/dotnet/architecture/microservices/architect-microservice-container-applications/direct-client-to-microservice-communication-versus-the-api-gateway-pattern" rel="external nofollow noopener noreferrer" target="_blank">참고1</a> <a href="https://microservices.io/patterns/apigateway.html" rel="external nofollow noopener noreferrer" target="_blank">참고2</a> </p><h2 id="Spring-Cloud-Netflix-란"><a href="#Spring-Cloud-Netflix-란" class="headerlink" title="Spring Cloud Netflix 란?"></a>Spring Cloud Netflix 란?</h2><p>Spring Cloud Netflix를 이용해서 빠르게 API Gateway 서버를 구성해보자.<br>게이트웨이로 Zuul을 사용하고, 라우팅 및 부하분산을 위해서 Eureka, Ribbon을 사용한다.</p><p><u><a href="https://spring.io/projects/spring-cloud-netflix#overview" rel="external nofollow noopener noreferrer" target="_blank">Spring Cloud Netflix</a>는 Spring Boot 어플리케이션을 위한 Netflix OSS 통합을 제공한다.</u></p><h3 id="Spring-Cloud-Netflix"><a href="#Spring-Cloud-Netflix" class="headerlink" title="Spring Cloud Netflix"></a>Spring Cloud Netflix</h3><blockquote><p>This project provides Netflix OSS integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with battle-tested Netflix components. The patterns provided include Service Discovery (Eureka), Circuit Breaker (Hystrix), Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon).</p></blockquote><p><a href="https://cloud.spring.io/spring-cloud-netflix/reference/html/" rel="external nofollow noopener noreferrer" target="_blank">reference</a></p><h3 id="Netflix-OSS-Open-Soure-Software"><a href="#Netflix-OSS-Open-Soure-Software" class="headerlink" title="Netflix OSS(Open Soure Software)"></a>Netflix OSS(Open Soure Software)</h3><h4 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a><a href="https://github.com/Netflix/zuul" rel="external nofollow noopener noreferrer" target="_blank">Zuul</a></h4><blockquote><p>Zuul is the front door for all requests from devices and web sites to the backend of the Netflix streaming application</p><p>As an edge service application,</p><p>Zuul is built to enable dynamic routing, monitoring, resiliency and security</p><p>..</p></blockquote><h4 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a><a href="https://github.com/Netflix/eureka" rel="external nofollow noopener noreferrer" target="_blank">Eureka</a></h4><p>관련 포스팅 : <a href="/2019/12/08/20191208-eureka-log/">유레카 서버와 유레카 클라이언트 어떻게 동작할까?</a></p><blockquote><p>purpose of load balancing and failover of middle-tier servers</p><p>Eureka Server, Eureka Client</p><p>…</p></blockquote><p><img src="/images/eureka-goodnote.jpg" alt="eureka-goodnote"></p><p>Eureka 에 대해서 이해할 때 <a href="https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/" rel="external nofollow noopener noreferrer" target="_blank">Service Discovery</a> 에 대해 알고가자.</p><p>클라우드에서 인스턴스는 동적으로 할당된다. IP주소 및 포트 정보도 변경된다.</p><ul><li>EurekaServer (Service Registry Server) 에 등록된 서비스들은 Eureka Client가 Eureka Server로 부터 레지스트리 정보를 가져와서 로컬에 캐시하고, 캐시된 레지스트리 정보를 이용해서 다른 서비스들을 찾을 수 있다.</li></ul><h4 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a><a href="https://github.com/Netflix/ribbon" rel="external nofollow noopener noreferrer" target="_blank">Ribbon</a></h4><p>Client Side Load Balancing Library</p><p>Ribbon Client는 Eureka Client가 알려주는 사용가능한 서비스들을 대상으로 LoadBalancing (기본 Round Robin 방식) 할 수 있다. </p><h2 id="API-Gateway-서버-구성"><a href="#API-Gateway-서버-구성" class="headerlink" title="API Gateway 서버 구성"></a>API Gateway 서버 구성</h2><p>Gradle Project, Spring Boot 2.1, Java 8</p><p><a href="https://start.spring.io" rel="external nofollow noopener noreferrer" target="_blank">Spring Initializr</a> 를 통해서 프로젝트를 생성 했다. (EurekaServer, ZuulAPIGateway, TestService)</p><p>각 프로젝트의 주요 dependency 설정과 어플리케이션 설정 내용에 대해서만 작성 함.</p><h3 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h3><h4 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h4><p>Spring Boot Actuator, Spring Security, Eureka Server</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-security'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.security:spring-security-test'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="설정-bootstrap-yml"><a href="#설정-bootstrap-yml" class="headerlink" title="설정 (bootstrap.yml)"></a>설정 (bootstrap.yml)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">$&#123;EUREKA_SERVER_NAME:eureka-server&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="string">$&#123;PORT:8081&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">$&#123;EUREKA_SERVER_NAME:eureka-server&#125;</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    lease-expiration-duration-in-seconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    lease-renewal-interval-in-seconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">            defaultZone:</span> <span class="attr">http://$&#123;EUREKA_SERVER_NAME:eureka-server&#125;:$&#123;PORT:8081&#125;/eureka/</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    max-threads-for-peer-replication:</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    shutdown:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">ALWAYS</span></span><br></pre></td></tr></table></figure><h3 id="ZuulAPIGateway"><a href="#ZuulAPIGateway" class="headerlink" title="ZuulAPIGateway"></a>ZuulAPIGateway</h3><h4 id="Dependencies-1"><a href="#Dependencies-1" class="headerlink" title="Dependencies"></a>Dependencies</h4><p>Spring Boot Actuator, Spring Security, Eureka Discovery Client, Zuul, Ribbon</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-security'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-netflix-zuul'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.security:spring-security-test'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="설정-bootstrap-yml-1"><a href="#설정-bootstrap-yml-1" class="headerlink" title="설정 (bootstrap.yml)"></a>설정 (bootstrap.yml)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">zuul-api-gateway</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="string">$&#123;PORT:8080&#125;</span></span><br><span class="line">     </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">zuul-api-gateway</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">            defaultZone:</span> <span class="attr">http://$&#123;EUREKA_SERVER_NAME:eureka-server&#125;:$&#123;EUREKA_SERVER_PORT:8081&#125;/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  ignored-services:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/api</span></span><br><span class="line"><span class="attr">  ribbonIsolationStrategy:</span> <span class="string">THREAD</span></span><br><span class="line"><span class="attr">  threadPool:</span></span><br><span class="line"><span class="attr">    useSeparateThreadPools:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    test-service:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/test-service/**</span></span><br><span class="line"><span class="attr">      sensitive-headers:</span></span><br><span class="line"><span class="attr">      service-id:</span> <span class="string">test-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span> </span><br><span class="line"><span class="attr">  eureka:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span>      </span><br><span class="line"><span class="attr">  okhttp:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    shutdown:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">ALWAYS</span></span><br></pre></td></tr></table></figure><h3 id="TestService"><a href="#TestService" class="headerlink" title="TestService"></a>TestService</h3><h4 id="Dependencies-2"><a href="#Dependencies-2" class="headerlink" title="Dependencies"></a>Dependencies</h4><p>Spring Boot Actuator, Spring Security, SpringWeb, Eureka Discovery Client</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-security'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.security:spring-security-test'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="설정-bootstrap-yml-2"><a href="#설정-bootstrap-yml-2" class="headerlink" title="설정 (bootstrap.yml)"></a>설정 (bootstrap.yml)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">test-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="string">$&#123;PORT:8090&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">test-service</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">            defaultZone:</span> <span class="attr">http://$&#123;EUREKA_SERVER_NAME:eureka-server&#125;:$&#123;EUREKA_SERVER_PORT:8081&#125;/eureka/</span></span><br><span class="line"><span class="attr">            enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    shutdown:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">ALWAYS</span></span><br></pre></td></tr></table></figure><h4 id="로드밸런싱이-잘되는지-확인-용-API"><a href="#로드밸런싱이-잘되는지-확인-용-API" class="headerlink" title="로드밸런싱이 잘되는지 확인 용 API"></a>로드밸런싱이 잘되는지 확인 용 API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">  ResponseEntity&lt;Map&lt;String, String&gt;&gt; sample() &#123;    </span><br><span class="line">    Map&lt;String, String&gt; result = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    result.put(<span class="string">"msg"</span>, String.format(<span class="string">"eureka client! PORT: %s"</span>, port));</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Docker를-이용한-컨테이너화"><a href="#Docker를-이용한-컨테이너화" class="headerlink" title="Docker를 이용한 컨테이너화"></a>Docker를 이용한 컨테이너화</h3><p>Docker Compose를 이용해 컨테이너 생성 후 테스트.</p><p>docker-comopse.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  eureka-server:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'eureka-server:0.1'</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8081:8081'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8081</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">  test-service1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'test-service:0.1'</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8090:8090'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_PORT=8081</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8090</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka-server</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">  test-service2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'test-service:0.1'</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8091:8091'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_PORT=8081</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8091</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka-server</span> </span><br><span class="line">      </span><br><span class="line"><span class="attr">  zuul-api-gateway:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'zuul-api-gateway:0.1'</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8080:8080'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_PORT=8081</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8080</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test-service1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test-service2</span></span><br></pre></td></tr></table></figure><p>동일 host 상에 배포된 container 사이는 Private IP 를 이용해 통신이 가능 하지만 IP 기반의 설정은 권고되지 않는다<br>그래서 컨테이너 간의 통신을 위해서 link 방식을 사용 했다.<br>link 방식을 사용했을 경우에 동적 IP 이슈를 피할 수 있지만 동일 docker host에 존재할 경우만 가능하고, 타 host에 존재할 경우에는 통신이 불가하다.</p><p><strong>추가. link 방식을 사용하지 않고, 네트워크 설정을 통한 컨테이너간의 통신방식</strong><br>동일한 네트워크에 컨테이너가 생성될 경우 컨테이너 간의 통신이 가능하다.<br><code>test</code>네트워크를 만들고 컨테이너를 생성할 때 네트워크를 지정(<code>test</code>)하도록 함</p><p>docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  eureka-server:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'eureka-server:0.1'</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8081:8081'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8081</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">  test-service1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'test-service:0.1'</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8090:8090'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_PORT=8081</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8090</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka-server</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">  test-service2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'test-service:0.1'</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8091:8091'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_PORT=8081</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8091</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka-server</span> </span><br><span class="line">      </span><br><span class="line"><span class="attr">  zuul-api-gateway:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'zuul-api-gateway:0.1'</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8080:8080'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_PORT=8081</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8080</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test-service1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test-service2</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  test:</span></span><br></pre></td></tr></table></figure><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><p><strong>Eureka Server Dashboard</strong></p><p><code>http://localhost:8081/</code></p><p><img src="/images/eureka-server-dashboard.png" alt="eureka-server-dashboard"></p><p>GATEWAY 1개, SERVICE 2개가 Eureka registry에 등록된 것을 확인할 수 있다.</p><p><strong>Gateway API URL</strong></p><p><code>http://localhost:8080/&lt;API Prefix&gt;/&lt;Endpoint Service ID&gt;/&lt;Service API&gt;</code></p><p><code>http://localhost:8080/api/test-service/hello</code></p><p><strong>로드밸런싱 확인</strong></p><p>test-service1(8090), test-service2(8091) 로 로드밸런싱이 잘되는지 확인.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;msg&quot;:&quot;eureka client! PORT: 8090&quot;&#125;</span><br><span class="line">&#123;&quot;msg&quot;:&quot;eureka client! PORT: 8091&quot;&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/09/28/20190928-zuul-gateway/#disqus_thread</comments>
    </item>
    
    <item>
      <title>엣지컴퓨팅(Edge computing) 이란?</title>
      <link>https://borakim-b.github.io/2019/09/08/20190908-edge-computing/</link>
      <guid>https://borakim-b.github.io/2019/09/08/20190908-edge-computing/</guid>
      <pubDate>Sun, 08 Sep 2019 09:16:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;엣지 컴퓨팅에 대해서 알아보고 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C_%EC%BB%B4%ED%93%A8%ED%8C%85&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;클라우드 컴퓨팅&lt;/a&gt;과 비교해보자.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>엣지 컴퓨팅에 대해서 알아보고 <a href="https://ko.wikipedia.org/wiki/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C_%EC%BB%B4%ED%93%A8%ED%8C%85" rel="external nofollow noopener noreferrer" target="_blank">클라우드 컴퓨팅</a>과 비교해보자.<br><a id="more"></a></p><h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><blockquote><p>다양한 단말기기에서 발생하는 데이터를 클라우드와 같은 중앙 집중식 데이터센터로 보내지 않고, 데이터가 발생한 현장 혹은 근거리에서 실시간 처리하는 방식으로 데이터 흐름 가속화를 지원하는 컴퓨팅 방식.<br>..<br>기존의 클라우드 컴퓨팅(cloud computing)과는 다른 컴퓨팅 접근방법으로, 서로를 대체하는 것이 아닌 각각의 문제점을 보완하는 공생관계에 가깝다.</p><p>클라우드(중앙구름) 환경의 일부 작은 규모의 플랫폼으로 보아 클라우드렛(cloudlet, 작은구름) 용어로 쓰기도하고,<br>단말 기기 주변(Edge)에서 처리되는 것을 가리켜 포크 컴퓨팅(fog computing)이라고도 한다.</p><p>..</p><p><a href="https://terms.naver.com/entry.nhn?docId=5670035&amp;cid=42346&amp;categoryId=42346" rel="external nofollow noopener noreferrer" target="_blank">IT용어사전</a></p></blockquote><p><img src="/images/edge-computing.jpg" alt=""></p><p>중앙에서 모든 데이터의 처리를 해야하는 클라우드 컴퓨팅과 다르게 엣지컴퓨팅의 경우 엣지에서 처리한 데이터의 인사이트만 클라우드에 전송하므로 데이터 처리량이 늘어날수록 부하가 많아지는 클라우드 컴퓨팅의 단점을 극복할 수 있다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>관련있어 보이는 서비스들을 링크해보았다.</p><p><a href="https://aws.amazon.com/ko/lambda/edge/" rel="external nofollow noopener noreferrer" target="_blank">AWS Lambda@Edge</a></p><blockquote><p>Lambda@Edge는 <a href="https://aws.amazon.com/cloudfront/" rel="external nofollow noopener noreferrer" target="_blank">Amazon CloudFront</a>의 기능 중 하나로서 애플리케이션의 사용자에게 더 가까운 위치에서 코드를 실행하여 성능을 개선하고 지연 시간을 단축할 수 있게 해 줍니다</p></blockquote><p><a href="https://aws.amazon.com/ko/greengrass/" rel="external nofollow noopener noreferrer" target="_blank">AWS IoT Greengrass</a></p><blockquote><p>엣지 디바이스에 로컬 컴퓨팅, 메시징, 데이터 캐싱, 동기화 및 ML 추론 기능 제공<br>AWS IoT Greengrass에서는 인터넷에 연결되어 있지 않더라도 커넥티드 디바이스에서 <a href="https://aws.amazon.com/lambda/" rel="external nofollow noopener noreferrer" target="_blank">AWS Lambda</a> 함수를 실행하고, 기계 학습 모델을 기반으로 예측을 실행하고, 디바이스 데이터를 동기화 상태로 유지하고, 다른 디바이스와 안전하게 통신할 수 있습니다.</p></blockquote><p><a href="https://azure.microsoft.com/ko-kr/services/iot-edge/" rel="external nofollow noopener noreferrer" target="_blank">Azure IoT Edge</a></p><blockquote><p>특정 워크로드를 네트워크 에지로 이동하면 디바이스가 클라우드와 통신하는 데 걸리는 시간을 줄이고, 로컬 변경 사항에 더 빠르게 대응하며, 길어진 오프라인 기간에도 안정적으로 작동할 수 있습니다.</p></blockquote>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/09/08/20190908-edge-computing/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows docker build 배치파일 만들기.</title>
      <link>https://borakim-b.github.io/2019/09/08/20190908-windows-docker-batch/</link>
      <guid>https://borakim-b.github.io/2019/09/08/20190908-windows-docker-batch/</guid>
      <pubDate>Sun, 08 Sep 2019 09:15:45 GMT</pubDate>
      <description>
      
        &lt;p&gt;Windows 환경에서 Docker 이미지를 빌드하고, 삭제하는 배치파일(.bat)을 만들어보자.&lt;br&gt;다수의 프로젝트를 빌드하는데 Docker Compose 를 사용하지 않았을 경우 참고&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Windows 환경에서 Docker 이미지를 빌드하고, 삭제하는 배치파일(.bat)을 만들어보자.<br>다수의 프로젝트를 빌드하는데 Docker Compose 를 사용하지 않았을 경우 참고<br><a id="more"></a></p><h2 id="도커-이미지-생성"><a href="#도커-이미지-생성" class="headerlink" title="도커 이미지 생성"></a>도커 이미지 생성</h2><h3 id="Docker-command-line"><a href="#Docker-command-line" class="headerlink" title="Docker command line"></a>Docker command line</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t test-app1:0.1 .</span><br></pre></td></tr></table></figure><h3 id="docker-build-bat"><a href="#docker-build-bat" class="headerlink" title="docker-build.bat"></a>docker-build.bat</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo CREATE DOCKER IMAGES</span><br><span class="line">cd ./testApp1</span><br><span class="line">docker build -t test-app1:0.1 .</span><br><span class="line">cd ./testApp2</span><br><span class="line">docker build -t test-app2:0.1 .</span><br><span class="line">cd ./testApp3</span><br><span class="line">docker build -t test-app3:0.1 .</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="도커-컨테이너-중지-삭제-이미지-모두-삭제"><a href="#도커-컨테이너-중지-삭제-이미지-모두-삭제" class="headerlink" title="도커 컨테이너 중지, 삭제, 이미지 모두 삭제"></a>도커 컨테이너 중지, 삭제, 이미지 모두 삭제</h2><h3 id="Docker-command-line-1"><a href="#Docker-command-line-1" class="headerlink" title="Docker command line"></a>Docker command line</h3><p>모든 컨테이너 중지 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -q)</span><br></pre></td></tr></table></figure><p>모든 컨테이너 제거</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><p>이미지 전체 삭제</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="docker-remove-bat"><a href="#docker-remove-bat" class="headerlink" title="docker-remove.bat"></a>docker-remove.bat</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@echo DELETE DOCKER IMAGES</span><br><span class="line">IF &quot;%1&quot;==&quot;c&quot; (</span><br><span class="line">@echo Only remove containers !!!</span><br><span class="line">goto c</span><br><span class="line">) ELSE (</span><br><span class="line">goto all</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:c</span><br><span class="line">FOR /f &quot;tokens=*&quot; %%i IN (&apos;docker ps -aq&apos;) DO docker rm %%i</span><br><span class="line">GOTO:EOF</span><br><span class="line"></span><br><span class="line">:all</span><br><span class="line">FOR /f &quot;tokens=*&quot; %%i IN (&apos;docker ps -aq&apos;) DO docker stop %%i</span><br><span class="line">FOR /f &quot;tokens=*&quot; %%i IN (&apos;docker ps -aq&apos;) DO docker rm %%i</span><br><span class="line">FOR /f &quot;tokens=*&quot; %%i IN (&apos;docker images --format &quot;&#123;&#123;.ID&#125;&#125;&quot;&apos;) DO docker rmi %%i</span><br><span class="line">GOTO:EOF</span><br></pre></td></tr></table></figure><p>파라미터를 받는 케이스를 추가했다.</p><p> <code>c</code> 파라미터를 같이 넘길 경우 컨테이너만 삭제되도록 함. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./docker-remove.bat c</span><br></pre></td></tr></table></figure><h2 id="끝"><a href="#끝" class="headerlink" title="끝"></a>끝</h2><p>멀티 컨테이너 구성을 할 경우에는 <a href="https://docs.docker.com/compose/" rel="external nofollow noopener noreferrer" target="_blank">Docker Compose</a>  를 사용하는게 좋다.<br>다만 맥이나 리눅스 환경이 아니라 윈도우 환경에서 docker-compose 로 구성하기 전이라면 참고.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/09/08/20190908-windows-docker-batch/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS 컨테이너 관련 서비스</title>
      <link>https://borakim-b.github.io/2019/08/20/20190820-aws-container-service/</link>
      <guid>https://borakim-b.github.io/2019/08/20/20190820-aws-container-service/</guid>
      <pubDate>Mon, 19 Aug 2019 16:01:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;AWS 컨테이너 관련 서비스를 알아보기 위한 리서치 용도로 링크만 걸어두었다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>AWS 컨테이너 관련 서비스를 알아보기 위한 리서치 용도로 링크만 걸어두었다.<br><a id="more"></a></p><h2 id="Amazon-ECS-Elastic-Container-Service"><a href="#Amazon-ECS-Elastic-Container-Service" class="headerlink" title="Amazon ECS(Elastic Container Service)"></a><a href="https://aws.amazon.com/ko/ecs/" rel="external nofollow noopener noreferrer" target="_blank">Amazon ECS(Elastic Container Service)</a></h2><p><img src="/images/aws_ecs.png" alt=""></p><h2 id="AWS-Fargate"><a href="#AWS-Fargate" class="headerlink" title="AWS Fargate"></a><a href="https://aws.amazon.com/ko/fargate/" rel="external nofollow noopener noreferrer" target="_blank">AWS Fargate</a></h2><p><img src="/images/aws_farate.png" alt=""></p><h2 id="Amazon-EKS-Elastic-Kubernetes-Service"><a href="#Amazon-EKS-Elastic-Kubernetes-Service" class="headerlink" title="Amazon EKS(Elastic Kubernetes Service)"></a><a href="https://aws.amazon.com/ko/eks/" rel="external nofollow noopener noreferrer" target="_blank">Amazon EKS(Elastic Kubernetes Service)</a></h2><p><img src="/images/aws_eks.png" alt=""></p><h2 id="AWS-App-Mesh"><a href="#AWS-App-Mesh" class="headerlink" title="AWS App Mesh"></a><a href="https://aws.amazon.com/ko/app-mesh/" rel="external nofollow noopener noreferrer" target="_blank">AWS App Mesh</a></h2><ul><li><a href="https://aws.amazon.com/ko/app-mesh/getting-started/" rel="external nofollow noopener noreferrer" target="_blank">가이드</a></li></ul><p><img src="/images/aws_app_mesh.png" alt=""></p><h2 id="AWS-Cloud-Map"><a href="#AWS-Cloud-Map" class="headerlink" title="AWS Cloud Map"></a><a href="https://aws.amazon.com/ko/cloud-map/" rel="external nofollow noopener noreferrer" target="_blank">AWS Cloud Map</a></h2><h2 id="Firecracker"><a href="#Firecracker" class="headerlink" title="Firecracker"></a><a href="https://firecracker-microvm.github.io/" rel="external nofollow noopener noreferrer" target="_blank">Firecracker</a></h2><ul><li><a href="https://aws.amazon.com/ko/blogs/korea/firecracker-lightweight-virtualization-for-serverless-computing/" rel="external nofollow noopener noreferrer" target="_blank">AWS RE:Invent</a></li></ul>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/08/20/20190820-aws-container-service/#disqus_thread</comments>
    </item>
    
    <item>
      <title>동영상 스틸 컷 만들어보기</title>
      <link>https://borakim-b.github.io/2019/08/03/20190803-python-opencv-stillcut/</link>
      <guid>https://borakim-b.github.io/2019/08/03/20190803-python-opencv-stillcut/</guid>
      <pubDate>Sat, 03 Aug 2019 12:39:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;동영상 스틸컷 or 썸네일 or 스냅샷 추출 어떻게 할까?&lt;br&gt;opencv-python 라이브러리를 이용해서 관련 예제를 만들어 보자.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>동영상 스틸컷 or 썸네일 or 스냅샷 추출 어떻게 할까?<br>opencv-python 라이브러리를 이용해서 관련 예제를 만들어 보자.<br><a id="more"></a></p><h2 id="OpenCV-란"><a href="#OpenCV-란" class="headerlink" title="OpenCV 란?"></a><a href="https://opencv.org/" rel="external nofollow noopener noreferrer" target="_blank">OpenCV</a> 란?</h2><blockquote><p><strong>OpenCV</strong>(Open Source Computer Vision)은 실시간 <a href="https://ko.wikipedia.org/wiki/컴퓨터_비전" rel="external nofollow noopener noreferrer" target="_blank">컴퓨터 비전</a>을 목적으로 한 프로그래밍 <a href="https://ko.wikipedia.org/wiki/라이브러리" rel="external nofollow noopener noreferrer" target="_blank">라이브러리</a>이다. 원래는 <a href="https://ko.wikipedia.org/wiki/인텔" rel="external nofollow noopener noreferrer" target="_blank">인텔</a>이 개발하였다. <strong>실시간</strong> 이미지 프로세싱에 중점을 둔 라이브러리이다.<br><a href="https://ko.wikipedia.org/wiki/마이크로소프트_윈도" rel="external nofollow noopener noreferrer" target="_blank">윈도</a>, <a href="https://ko.wikipedia.org/wiki/리눅스" rel="external nofollow noopener noreferrer" target="_blank">리눅스</a> 등에서 사용 가능한 <a href="https://ko.wikipedia.org/wiki/크로스_플랫폼" rel="external nofollow noopener noreferrer" target="_blank">크로스 플랫폼</a>이며 <a href="https://ko.wikipedia.org/wiki/오픈소스" rel="external nofollow noopener noreferrer" target="_blank">오픈소스</a> <a href="https://ko.wikipedia.org/wiki/BSD_허가서" rel="external nofollow noopener noreferrer" target="_blank">BSD 허가서</a> 하에서 무료로 사용할 수 있다<br>OpenCV는 <a href="https://ko.wikipedia.org/wiki/C" rel="external nofollow noopener noreferrer" target="_blank">C</a>/<a href="https://ko.wikipedia.org/wiki/C%2B%2B" rel="external nofollow noopener noreferrer" target="_blank">C++</a> 프로그래밍 언어로 개발 되었으며 <a href="https://ko.wikipedia.org/wiki/파이썬" rel="external nofollow noopener noreferrer" target="_blank">파이썬</a> , <a href="https://ko.wikipedia.org/wiki/자바" rel="external nofollow noopener noreferrer" target="_blank">자바</a> 및 <a href="https://ko.wikipedia.org/wiki/매트랩" rel="external nofollow noopener noreferrer" target="_blank">매트랩</a> / <a href="https://ko.wikipedia.org/w/index.php?title=OCTAVE&amp;action=edit&amp;redlink=1" rel="external nofollow noopener noreferrer" target="_blank">OCTAVE</a>에 <a href="https://ko.wikipedia.org/wiki/바인딩" rel="external nofollow noopener noreferrer" target="_blank">바인딩</a> 되어 프로그래머에게 개발 환경을 지원합니다.<br> ..</p></blockquote><p><a href="https://ko.wikipedia.org/wiki/OpenCV" rel="external nofollow noopener noreferrer" target="_blank">위키백과</a></p><h2 id="opencv-python를-이용한-예제"><a href="#opencv-python를-이용한-예제" class="headerlink" title="opencv-python를 이용한 예제"></a><a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_gui/py_video_display/py_video_display.html" rel="external nofollow noopener noreferrer" target="_blank">opencv-python</a>를 이용한 예제</h2><p>python 라이브러리를 이용해 첫 번째 프레임 메인 스틸컷 이미지 한개를 생성 하거나<br>약 10초 단위로 프레임 이미지 N개를 생성하도록 작성했다. </p><h3 id="관련-용어"><a href="#관련-용어" class="headerlink" title="관련 용어"></a>관련 용어</h3><ul><li><a href="https://ko.wikipedia.org/wiki/%ED%94%84%EB%A0%88%EC%9E%84_%EB%A0%88%EC%9D%B4%ED%8A%B8" rel="external nofollow noopener noreferrer" target="_blank">프레임레이트</a><br>FPS(Frame Per Second): 프레임레이트 단위 . 초당 프레임 개수.<br>예) 영화 24fps : 1초에 24장의 그림을 보여 줌.</li></ul><h3 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h3><h4 id="라이브러리-설치"><a href="#라이브러리-설치" class="headerlink" title="라이브러리 설치"></a><a href="https://pypi.org/project/opencv-python/" rel="external nofollow noopener noreferrer" target="_blank">라이브러리 설치</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ pip install opencv-python</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Package       Version</span><br><span class="line">------------- --------</span><br><span class="line">numpy         1.16.4</span><br><span class="line">opencv-python 4.1.0.25</span><br></pre></td></tr></table></figure><p>opencv-python 라이브러리 설치 시 numpy 도 설치 됨.</p><h4 id="still-cut-py"><a href="#still-cut-py" class="headerlink" title="still-cut.py"></a>still-cut.py</h4><script src="https://gist.github.com/borakim-b/3905aa40c9be65e3a91f69357f821cc3.js"></script><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><p>29초 길이의 test.mp4 파일 프레임 이미지 추출</p><p><img src="/images/python-fun-opencv-stillcut.png" alt="python-fun-opencv-stillcut"></p><h3 id="끝"><a href="#끝" class="headerlink" title="끝."></a>끝.</h3><p>동영상을 업로드 후 자동으로 스틸컷 이미지를 만들 때.<br>특정 프레임 이미지가 있는 곳 부터 동영상을 재생하려고 할 때.<br>활용해볼 수 있을 것 같다.</p><h5 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h5><p><em>스틸컷 추출에 걸리는 시간 체크</em><br><em>별도의 워커에서 동작</em></p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/08/03/20190803-python-opencv-stillcut/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular 프로젝트 Travis 빌드 후 Amazon S3에 업로드 해보자</title>
      <link>https://borakim-b.github.io/2019/07/08/20190708-travis-angular-s3/</link>
      <guid>https://borakim-b.github.io/2019/07/08/20190708-travis-angular-s3/</guid>
      <pubDate>Sun, 07 Jul 2019 20:34:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;Angular 웹 프로젝트 배포는 어떻게 할까? &lt;code&gt;GitHub - Travis CI - S3&lt;/code&gt; - Ansible Deploy&lt;br&gt;&lt;a href=&quot;https://travis-ci.com/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Travis CI&lt;/a&gt; 에 대해서 알아보고 프로젝트 빌드 후 Amazon S3에 업로드 하는 예제를 만들어 본다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Angular 웹 프로젝트 배포는 어떻게 할까? <code>GitHub - Travis CI - S3</code> - Ansible Deploy<br><a href="https://travis-ci.com/" rel="external nofollow noopener noreferrer" target="_blank">Travis CI</a> 에 대해서 알아보고 프로젝트 빌드 후 Amazon S3에 업로드 하는 예제를 만들어 본다.<br><a id="more"></a></p><h2 id="Travis-CI-란"><a href="#Travis-CI-란" class="headerlink" title="Travis CI 란?"></a>Travis CI 란?</h2><h3 id="소개"><a href="#소개" class="headerlink" title="소개"></a><a href="https://docs.travis-ci.com/user/languages/" rel="external nofollow noopener noreferrer" target="_blank">소개</a></h3><blockquote><p>As a continuous integration platform, Travis CI supports your development process by automatically building and testing code changes, providing immediate feedback on the success of the change. Travis CI can also automate other parts of your development process by managing deployments and notifications.</p><p>…</p><p>When you run a build, Travis CI clones your GitHub repository into a brand new virtual environment, and carries out a series of tasks to build and test your code.</p></blockquote><h3 id="요금정책"><a href="#요금정책" class="headerlink" title="요금정책"></a><a href="https://travis-ci.com/plans" rel="external nofollow noopener noreferrer" target="_blank">요금정책</a></h3><p>Trial 사용가능.</p><blockquote><p>Set up your first project in just one minute.<br>Your first 100 builds are free!</p><p>…</p><p>Always free for open source projects</p></blockquote><h2 id="AWS"><a href="#AWS" class="headerlink" title="AWS"></a><u>AWS</u></h2><p>S3 접근 권한만 가진 사용자를 생성해서 사용한다.</p><h3 id="IAM-Identity-and-Access-Management-gt-사용자-추가"><a href="#IAM-Identity-and-Access-Management-gt-사용자-추가" class="headerlink" title="IAM(Identity and Access Management) &gt; 사용자 추가"></a>IAM(Identity and Access Management) &gt; 사용자 추가</h3><p>AWS 엑세스 유형 </p><ul><li>프로그래밍 방식 엑세스</li></ul><p>S3 &gt; 정책필터 </p><ul><li>AmazonS3FullAccess</li></ul><p>사용자 생성이 완료되면 <code>엑세스 키 ID</code> 와 <code>시크릿 엑세스 키</code> 를 확인할 수 있다. (보안자격증명 &gt; 엑세스키)<br><u>해당 키는 Travis CI 설정에서 사용함.</u></p><h3 id="S3-버킷-생성"><a href="#S3-버킷-생성" class="headerlink" title="S3 버킷 생성"></a>S3 버킷 생성</h3><p>버킷 생성 시 <code>권한 &gt; 모든 퍼블릭 엑세스 차단</code> 옵션으로 생성한다.</p><h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a><u>Travis CI</u></h2><p>github 계정 연결 후 로그인하면 Github 저장소를 선택할 수 있다.</p><h3 id="Integration-대상-프로젝트-선택"><a href="#Integration-대상-프로젝트-선택" class="headerlink" title="Integration 대상 프로젝트 선택"></a>Integration 대상 프로젝트 선택</h3><p>github &gt; Personal settings &gt; Applications &gt; Installed Github Apps<br>Travis CI &gt; Configure<br>Repository access 설정 &gt; CI 적용할 repository 선택 후 저장.</p><h3 id="APP-gt-Settings"><a href="#APP-gt-Settings" class="headerlink" title="APP &gt; Settings"></a>APP &gt; Settings</h3><h4 id="General"><a href="#General" class="headerlink" title="General"></a>General</h4><p>코드 push 되었을 때 빌드되도록 설정.</p><p><img src="/images/travis-setting-g.png" alt=""></p><h4 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h4><p>travis 빌드에 사용할 환경변수를 설정한다.</p><p><img src="/images/travis-setting-ev.png" alt=""></p><h3 id="Config-파일-설정-travis-yml"><a href="#Config-파일-설정-travis-yml" class="headerlink" title="Config 파일 설정 (.travis.yml)"></a>Config 파일 설정 (.travis.yml)</h3><p><a href="https://docs.travis-ci.com/user/deployment/s3" rel="external nofollow noopener noreferrer" target="_blank">S3 Deployment 참고</a></p><h4 id="travis-yml-파일-생성"><a href="#travis-yml-파일-생성" class="headerlink" title=".travis.yml 파일 생성"></a>.travis.yml 파일 생성</h4><script src="https://gist.github.com/borakim-b/0f830a63f39520dc6e0e129927dded44.js"></script><p>.travis.yml 파일을 master 브랜치에 push 하면 코드변경사항이 push될 때마다 빌드가 실행 된다.<br>angular cli 설치 후 빌드, 빌드결과를 zip 파일로 만들어 S3에 업로드한다.<br>배포과정은 Job log 에서 확인 할 수 있고, 결과는 메일로 발송된다. <a href="https://docs.travis-ci.com/user/notifications#configuring-slack-notifications" rel="external nofollow noopener noreferrer" target="_blank">Slack</a>같은 채널로 알림을 받을 수도 있다.</p><h4 id="Job-log"><a href="#Job-log" class="headerlink" title="Job log"></a>Job log</h4><p><img src="/images/travis-job-log.png" alt=""></p><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p><img src="/images/travis-history-r.png" alt=""></p><p><img src="/images/travis-s3-r.png" alt=""></p><h3 id="빌드가-실패했을-때"><a href="#빌드가-실패했을-때" class="headerlink" title="빌드가 실패했을 때"></a>빌드가 실패했을 때</h3><p>빌드 요청은 <code>More options &gt; Requests</code> 에서 확인할 수 있다.<br>단순 Syntax 오류 같은 경우 <code>Could not parse..</code> 라고 메시지가 노출 됨.<br>로컬에서 .travis.yml 기준으로 확인해볼 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ sudo gem install travis</span><br><span class="line">❯ travis lint</span><br><span class="line">Warnings for .travis.yml:</span><br><span class="line">[x] syntax error: (&lt;unknown&gt;): found character that cannot start any token while scanning for the next token at line 19 column 3</span><br></pre></td></tr></table></figure><h3 id="끝"><a href="#끝" class="headerlink" title="끝."></a>끝.</h3><p>이후에 과정은 S3에 업로드된 파일을 Instance에 배포 하면 된다.</p><p>.</p><p>.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/07/08/20190708-travis-angular-s3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS 인스턴스 생성하고 SSH 원격 접속 해보자</title>
      <link>https://borakim-b.github.io/2019/06/28/20190628-aws-instance-ssh/</link>
      <guid>https://borakim-b.github.io/2019/06/28/20190628-aws-instance-ssh/</guid>
      <pubDate>Fri, 28 Jun 2019 10:04:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;AWS 인스턴스 생성 시 보안그룹 설정 할 때 참고할 사항과 인스턴스 요금을 알아보고&lt;br&gt;인스턴스 생성 후 SSH Config 설정을 통해 원격접속 해본다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>AWS 인스턴스 생성 시 보안그룹 설정 할 때 참고할 사항과 인스턴스 요금을 알아보고<br>인스턴스 생성 후 SSH Config 설정을 통해 원격접속 해본다.<br><a id="more"></a></p><h2 id="AWS-인스턴스-생성"><a href="#AWS-인스턴스-생성" class="headerlink" title="AWS 인스턴스 생성"></a>AWS 인스턴스 생성</h2><p>EC2 대시보드 &gt; 인스턴스 생성 메뉴로 들어가서 인스턴스를 빠르게 생성해 볼 수 있다.<br><u>AMI 를 선택하고, 인스턴스 유형 선택, 인스턴스 구성, 스토리지 추가, 태그추가, 검토</u> 의 과정이 있음.<br>시작 시 기존 키페어 파일을 지정하거나 새로 생성할 수 있다.<br>키파일은 퍼블릭 키는 AWS에 저장되고 프라이빗 키파일은 다운로드 받게 된다.<br>이 프라이빗 키파일을 가지고 나중에 SSH로 접속 할 수 있게 된다.</p><h3 id="보안그룹-설정"><a href="#보안그룹-설정" class="headerlink" title="보안그룹 설정"></a>보안그룹 설정</h3><p>보안그룹 설정 시 일반적인 웹 서비스의 경우 HTTP, HTTPS, SSH 정도의 타입에 대해 설정 해주면 됨.<br>특정 IP 에 대해서만 허용하도록 할 경우 사용지지정 옵션 선택 후 <a href="http://checkip.amazonaws.com/" rel="external nofollow noopener noreferrer" target="_blank">사용자 IP</a> 를 등록 하면 됨.</p><h3 id="인스턴스-수명주기"><a href="#인스턴스-수명주기" class="headerlink" title="인스턴스 수명주기"></a><a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html" rel="external nofollow noopener noreferrer" target="_blank">인스턴스 수명주기</a></h3><p><img src="/images/instance_lifecycle.png" alt=""></p><p>인스턴스 수명주기를 알고있으면 인스턴스 상태 변경에 따라 데이터나 볼륨 등이 지워지거나<br>인스턴스 사용 요금에 대해서 주의하는데 도움이 된다.</p><p>확인할 만한 사항을 요약해 보면..  </p><ul><li><p>인스턴스 상태가 pending, stopped, shutting-down, terminated 상태면 인스턴스 사용 요금 <u>미청구</u></p></li><li><p>인스턴스가 <code>running</code> 상태로 전환되는 즉시 인스턴스 실행이 지속된 각 초(최소 1분)에 대해 비용 <u>청구</u></p></li><li><p>인스턴스 재부팅 시 퍼블릭 DNS 이름, 프라이빗 IP 주소 및 인스턴스 스토어 볼륨의 모든 데이터가 유지</p></li><li><p>인스턴스를 Terminate 시킬 경우 루트 디바이스 볼륨이 삭제 되고, 중지 시킬경우 그대로 유지 됨. (프리티어 사용 시 EBS 사용량에 주의해야 함.)</p></li></ul><h2 id="SSH-원격-접속"><a href="#SSH-원격-접속" class="headerlink" title="SSH 원격 접속"></a>SSH 원격 접속</h2><p>Amazon Linux 2 또는 Amazon Linux AMI의 경우 사용자 이름은 <u>ec2-user</u> 이다.<br><code>public-dns-hostname</code> 은 인스턴스의 퍼블릭 DNS 또는 IP를 입력한다.</p><h3 id="SSH-클라이언트-사용"><a href="#SSH-클라이언트-사용" class="headerlink" title="SSH 클라이언트 사용"></a>SSH 클라이언트 사용</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ ssh -i /path/my-key-pair.pem ec2-user@public-dns-hostname</span><br></pre></td></tr></table></figure><h3 id="SSH-Config-설정"><a href="#SSH-Config-설정" class="headerlink" title="SSH Config 설정"></a>SSH Config 설정</h3><p>~/.ssh/my-key-pair.pem 키페어 파일 다운로드.<br>~/.ssh/config 파일 생성.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host aws-test</span><br><span class="line">HostName public-dns-hostname</span><br><span class="line">User ec2-user</span><br><span class="line">IdentityFile ~/.ssh/my-key-pair.pem</span><br></pre></td></tr></table></figure><p>접속<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ ssh aws-test</span><br></pre></td></tr></table></figure></p><h3 id="끝"><a href="#끝" class="headerlink" title="끝."></a>끝.</h3><p><img src="/images/aws-ssh-done.png" alt=""></p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/06/28/20190628-aws-instance-ssh/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Custom HTTP 헤더 네이밍 컨벤션?</title>
      <link>https://borakim-b.github.io/2019/06/28/20190628-custom-header-x/</link>
      <guid>https://borakim-b.github.io/2019/06/28/20190628-custom-header-x/</guid>
      <pubDate>Fri, 28 Jun 2019 10:04:39 GMT</pubDate>
      <description>
      
        &lt;p&gt;개발을 하다보면 추가적인 정보를 헤더에 담아야 할 때가 있다.&lt;br&gt;이 때 헤더의 이름을 어떻게 지으면 좋을까?&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>개발을 하다보면 추가적인 정보를 헤더에 담아야 할 때가 있다.<br>이 때 헤더의 이름을 어떻게 지으면 좋을까?<br><a id="more"></a><br>헤더의 이름 앞에 prefix로 <code>X-</code> 를 사용하는 경우 Custom 헤더라고 볼 수 있는데<br>그런 식의 이름을 짓는 것을 권장하지 않는다고 한다.</p><blockquote><p>Deprecating the “X-“ Prefix and Similar Constructs in Application Protocols</p><p><a href="https://tools.ietf.org/html/rfc6648" rel="external nofollow noopener noreferrer" target="_blank">RFC6648</a></p></blockquote><p>그냥. 적절한 이름으로 지으면 된다.</p><p><strong>참고</strong><br><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers" rel="external nofollow noopener noreferrer" target="_blank">https://developer.mozilla.org/ko/docs/Web/HTTP/Headers</a></p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/06/28/20190628-custom-header-x/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular 빠르게 시작하기</title>
      <link>https://borakim-b.github.io/2019/06/24/20190624-angular-start/</link>
      <guid>https://borakim-b.github.io/2019/06/24/20190624-angular-start/</guid>
      <pubDate>Mon, 24 Jun 2019 09:14:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;Bootstrap, Material 테마 설치 후 Angular CLI 이용해 빠르게 개발을 시작해 본다.&lt;br&gt;별도의 API서버가 없는 상태에서 프로토타입을 개발하는 방법을 확인해 본다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Bootstrap, Material 테마 설치 후 Angular CLI 이용해 빠르게 개발을 시작해 본다.<br>별도의 API서버가 없는 상태에서 프로토타입을 개발하는 방법을 확인해 본다.</p><a id="more"></a><h2 id="Angular-8-Bootstrap-4-3-Material-8-0"><a href="#Angular-8-Bootstrap-4-3-Material-8-0" class="headerlink" title="Angular 8 + Bootstrap 4.3 + Material 8.0"></a>Angular 8 + Bootstrap 4.3 + Material 8.0</h2><h3 id="Angular-CLI-설치"><a href="#Angular-CLI-설치" class="headerlink" title="Angular CLI 설치"></a><a href="https://angular.io/guide/setup-local" rel="external nofollow noopener noreferrer" target="_blank">Angular CLI 설치</a></h3><h4 id="Angular-CLI-란"><a href="#Angular-CLI-란" class="headerlink" title="Angular CLI 란?"></a>Angular CLI 란?</h4><blockquote><p>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ npm install -g @angular/cli</span><br></pre></td></tr></table></figure><p>Angular CLI 설치가 정상적으로 안될 경우 Node.js 와 npm package manager가 설치되어 있는지 확인해야 함.</p><h3 id="자주쓰는-CLI-명령"><a href="#자주쓰는-CLI-명령" class="headerlink" title="자주쓰는 CLI 명령"></a>자주쓰는 CLI 명령</h3><p>WebStorm 과 같은 IDE를 사용하면 직접 커맨드 명령을 사용할 일이 드물지만 알고있으면 좋다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ ng help</span><br><span class="line">❯ ng g --help</span><br></pre></td></tr></table></figure><p>주로 클래스, 컴포넌트, 서비스, 모듈 등을 생성해주거나 빌드할 때 사용한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ ng g class &lt;클래스명&gt;</span><br><span class="line">❯ ng g component &lt;컴포넌트명&gt;</span><br><span class="line">❯ ng g service &lt;서비스명&gt;</span><br><span class="line">❯ ng g module &lt;모듈명&gt;</span><br><span class="line">...</span><br><span class="line">❯ ng build</span><br></pre></td></tr></table></figure><p><a href="https://angular.io/cli" rel="external nofollow noopener noreferrer" target="_blank">Angular CLI</a> 를 이용해서 generate된 경우 네이밍이나 디렉토리 구조 등 일관되게 가져갈 수 있기 때문에 사용하는 것이 좋다.</p><h3 id="프로젝트-생성"><a href="#프로젝트-생성" class="headerlink" title="프로젝트 생성"></a>프로젝트 생성</h3><p>angular-dash라는 프로젝트를 만들고 port 4300 으로 서버 실행</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ ng new angular-dash</span><br><span class="line">❯ ng serve --port 4300</span><br></pre></td></tr></table></figure><h3 id="Angular-Material-설치"><a href="#Angular-Material-설치" class="headerlink" title="Angular Material 설치"></a><a href="https://material.angular.io/" rel="external nofollow noopener noreferrer" target="_blank">Angular Material 설치</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ npm install --save @angular/material @angular/cdk @angular/animations</span><br><span class="line"></span><br><span class="line"># Some components (mat-slide-toggle, mat-slider, matTooltip) 를 위해 설치.</span><br><span class="line">❯ npm install --save hammerjs</span><br></pre></td></tr></table></figure><p>angular.json 파일에 사용하고자 하는 테마의 css 파일 경로 추가.<br>material-module.ts 파일을 생성 후 사용하고자하는 material 모듈을 import 시켜 두었다.<br>그리고 MaterialModule 을 app.module.ts 에 import 하는 과정이 있었음.</p><h3 id="Bootstrap-설치"><a href="#Bootstrap-설치" class="headerlink" title="Bootstrap 설치"></a><a href="https://getbootstrap.com/" rel="external nofollow noopener noreferrer" target="_blank">Bootstrap 설치</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ npm install bootstrap</span><br></pre></td></tr></table></figure><p>angular.json 파일에 bootstrap.min.css 파일 경로 추가.</p><h2 id="Mock-데이터-활용-템플릿에-랜더링-하기"><a href="#Mock-데이터-활용-템플릿에-랜더링-하기" class="headerlink" title="Mock 데이터 활용 템플릿에 랜더링 하기"></a>Mock 데이터 활용 템플릿에 랜더링 하기</h2><p>별도의 API서버가 없는 상태에서 프로토타입을 개발할 때 유용하다.</p><script src="https://gist.github.com/borakim-b/94ea88118409d41e6a78fea06a4a4764.js"></script><h3 id="끝"><a href="#끝" class="headerlink" title="끝."></a>끝.</h3><p><img src="/images/angular_start.png" alt=""></p><p><a href="https://github.com/borakim-b/angular-dash" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/borakim-b/angular-dash</a></p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/06/24/20190624-angular-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mysql 설치</title>
      <link>https://borakim-b.github.io/2019/06/15/20190615-docker-mysql/</link>
      <guid>https://borakim-b.github.io/2019/06/15/20190615-docker-mysql/</guid>
      <pubDate>Sat, 15 Jun 2019 08:45:57 GMT</pubDate>
      <description>
      
        &lt;p&gt;docker를 이용해서 빠르게 데이터베이스 개발환경을 만들어 본다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>docker를 이용해서 빠르게 데이터베이스 개발환경을 만들어 본다.<br><a id="more"></a></p><h3 id="도커-이미지-다운로드-후-실행"><a href="#도커-이미지-다운로드-후-실행" class="headerlink" title="도커 이미지 다운로드 후 실행"></a>도커 이미지 다운로드 후 실행</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ docker search mysql</span><br><span class="line">❯ docker pull mysql</span><br><span class="line">❯ docker images</span><br></pre></td></tr></table></figure><p>실행</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=1234 --name mysql mysql --default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure><p>접속정보</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host: 127.0.0.1</span><br><span class="line">Username: root</span><br><span class="line">Password: 1234</span><br></pre></td></tr></table></figure><p>컨테이너에 접속해서 확인해보려면</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ docker exec -i -t mysql bash</span><br><span class="line">root@a4ce950e20aa:/# mysql -u root -p</span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml-파일을-만들어-더-간단하게-해보면"><a href="#docker-compose-yml-파일을-만들어-더-간단하게-해보면" class="headerlink" title="docker-compose.yml 파일을 만들어 더 간단하게 해보면.."></a>docker-compose.yml 파일을 만들어 더 간단하게 해보면..</h3><script src="https://gist.github.com/borakim-b/e923539bdd54240c46930dd024b05991.js"></script><ul><li>working_dir 를 설정 후 호스트의 디렉토리와 마운트 되도록 한다.</li><li>version은 <a href="https://docs.docker.com/compose/compose-file/" rel="external nofollow noopener noreferrer" target="_blank">docker engine 버전</a> 을 고려하여 작성한다.</li><li>기본 Encoding 과 Collation 값을 설정한다.<br>charset 옵션 없이 실행할 경우 DB 기본 Encoding 과 Collation 값이 latin1 로 설정된다.</li></ul><p>실행<br><code>❯ docker-compose up</code></p><h3 id="끝"><a href="#끝" class="headerlink" title="끝."></a>끝.</h3><p>docker-compose.yml 로 작성해 두면 빠르게 개발환경을 구성해서 시작하기 좋다.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/06/15/20190615-docker-mysql/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PHP 개발환경 구성 (Docker, CodeIgniter, Nginx, mariadb ..)</title>
      <link>https://borakim-b.github.io/2019/06/09/20190609-php-env-docker/</link>
      <guid>https://borakim-b.github.io/2019/06/09/20190609-php-env-docker/</guid>
      <pubDate>Sun, 09 Jun 2019 09:41:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;PHP framework 중 CodeIgniter를 이용한 웹 서비스 개발 방법을 알아보고&lt;br&gt;Docker를 활용해 개발환경을 구성해본다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>PHP framework 중 CodeIgniter를 이용한 웹 서비스 개발 방법을 알아보고<br>Docker를 활용해 개발환경을 구성해본다.</p><a id="more"></a><h2 id="PHP-개발환경-구성"><a href="#PHP-개발환경-구성" class="headerlink" title="PHP 개발환경 구성"></a>PHP 개발환경 구성</h2><p>CI 프레임워크를 사용해서 서비스를 개발할 때 zip 파일을 내려받은 후 웹서버의 config에 root 경로를 설정하고.. 필요한 라이브러리 다운받고 환경설정하고 하는데….</p><h3 id="Docker-기반으로-PHP-웹-서비스-개발환경-구성해보기"><a href="#Docker-기반으로-PHP-웹-서비스-개발환경-구성해보기" class="headerlink" title="Docker 기반으로 PHP 웹 서비스 개발환경 구성해보기"></a>Docker 기반으로 PHP 웹 서비스 개발환경 구성해보기</h3><h5 id="PHPDocker-io-에서-도커-파일-생성"><a href="#PHPDocker-io-에서-도커-파일-생성" class="headerlink" title="PHPDocker.io 에서 도커 파일 생성"></a><a href="https://phpdocker.io/generator" rel="external nofollow noopener noreferrer" target="_blank">PHPDocker.io</a> 에서 도커 파일 생성</h5><blockquote><p>PHPDocker.io is a tool that will help you build a typical PHP development environment based on Docker with just a few clicks</p></blockquote><p><img src="/images/php_docker.png" alt=""></p><p>다운로드된 파일을 보면 phpdocker 폴더와 docker-compose.yml 파일이 있음.</p><script src="https://gist.github.com/borakim-b/f841edadb7b335a0572894a69e54b08d.js"></script><p>docker-compose.yml 파일에 보면 각 컨테이너 서비스 별로 정의되어 있는 것을 확인할 수 있음.<br>redis, mariadb, webserver, php-fpm</p><p>phpdocker 파일내의 nginx 설정파일과 php 실행환경 파일에 대해 컨테이너에서 사용할 경로가 지정되어 있음.</p><h5 id="php-ini-overrides-ini-파일-수정"><a href="#php-ini-overrides-ini-파일-수정" class="headerlink" title="php-ini-overrides.ini 파일 수정"></a>php-ini-overrides.ini 파일 수정</h5>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date.timezone = Asia/Seoul</span><br><span class="line">short_open_tag = On</span><br></pre></td></tr></table></figure><p>   short_open_tags는 <code>&lt;?php</code> 를 <code>&lt;?</code> 도 허용한다는..</p><h5 id="CI-3-x-의-경우-nginx-conf-파일-수정"><a href="#CI-3-x-의-경우-nginx-conf-파일-수정" class="headerlink" title="CI 3.x 의 경우 nginx.conf 파일 수정"></a>CI 3.x 의 경우 nginx.conf 파일 수정</h5><p>   CI 4.x 의 경우에는 수정하지 않아도 되는데..<br>   <code>root /application/public;</code> 에서 <code>root /application</code>로 변경 함.</p><h5 id="CodeIgniter-다운로드"><a href="#CodeIgniter-다운로드" class="headerlink" title="CodeIgniter 다운로드"></a><a href="https://www.codeigniter.com/user_guide/installation/downloads.html" rel="external nofollow noopener noreferrer" target="_blank">CodeIgniter</a> 다운로드</h5><p>   zip 파일 해제 후 1에서 받은 파일과 같은 디렉토리에 위치 시킴.</p><h5 id="docker-실행"><a href="#docker-실행" class="headerlink" title="docker 실행"></a>docker 실행</h5>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>   <img src="/images/php_docker_ps.png" alt=""></p><h5 id="확인"><a href="#확인" class="headerlink" title="확인"></a>확인</h5><p>   <a href="http://localhost:8000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8000/</a><br>   <img src="/images/php_docker_web.png" alt=""></p><h5 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h5><p><a href="https://github.com/borakim-b/php-starter-kit" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/borakim-b/php-starter-kit</a></p><hr><p>PHP5.4 부터는 내장 웹서버를 제공한다. 간단히 사용할 때만 쓰고.. 권장은 안하는 것 같다.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/06/09/20190609-php-env-docker/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
