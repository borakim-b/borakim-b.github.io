<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>시간이 지나면 또 봐야지</title>
    <link>https://borakim-b.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>개발 블로그</description>
    <pubDate>Sat, 15 Feb 2020 05:27:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Windows PowerShell 에서 kubectl 명령어에 대한 별칭(alias)을 등록해서 사용해 보자</title>
      <link>https://borakim-b.github.io/2020/02/15/20200215-kubectl-alias/</link>
      <guid>https://borakim-b.github.io/2020/02/15/20200215-kubectl-alias/</guid>
      <pubDate>Sat, 15 Feb 2020 05:13:57 GMT</pubDate>
      <description>
      
        &lt;p&gt;kubectl 명령어 사용 시 shell alias 등록을 통해 생산성을 향상시키는 방법을 알아보자.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>kubectl 명령어 사용 시 shell alias 등록을 통해 생산성을 향상시키는 방법을 알아보자.</p><a id="more"></a><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>윈도우 환경에서 사용하고 있다면.. PowerShell에서 별칭을 등록해서 사용할 수 있다.<br><code>kubectl-aliases</code> 프로젝트 Fork해서 작성된 <a href="https://github.com/shanoor/kubectl-aliases-powershell" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/shanoor/kubectl-aliases-powershell</a> 을 이용해서 쉽게 설정할 수 있다.</p><h3 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h3><ol><li><a href="https://github.com/shanoor/kubectl-aliases-powershell/blob/master/kubectl_aliases.ps1" rel="external nofollow noopener noreferrer" target="_blank">kubectl_aliases.ps1</a> 파일을 <code>$Home\Documents\WindowsPowerShell\</code> 경로에 다운로드</li><li><p>Command 실행</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; &apos;. $Home\Documents\WindowsPowerShell\kubectl_aliases.ps1&apos; | Out-File $PROFILE.CurrentUserAllHosts -Encoding ascii -Append</span><br></pre></td></tr></table></figure></li><li><p>PowerShell 재실행</p></li><li><p>확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; kubectl get namespaces</span><br></pre></td></tr></table></figure><p>alias 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; kgns                                                               </span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   21d</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><code>.bash_profile</code>에 별칭을 추가해서 관리하면 된다.</p><h3 id="예시-1"><a href="#예시-1" class="headerlink" title="예시"></a>예시</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alias k='kubectl'</span><br><span class="line">alias kg='kubectl get'</span><br><span class="line">alias kgpo='kubectl get pod'</span><br><span class="line">..</span><br></pre></td></tr></table></figure><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><p><a href="https://github.com/ahmetb/kubectl-aliases" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ahmetb/kubectl-aliases</a><br>800 여개의 별칭이 정의되어서 자동으로 등록할 수 있는 스크립트를 제공한다.</p><h2 id="비교"><a href="#비교" class="headerlink" title="비교"></a>비교</h2><ul><li><p>기본</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; kubectl get services</span><br></pre></td></tr></table></figure></li><li><p>단축형 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; kubectl get svc</span><br></pre></td></tr></table></figure></li><li><p>alias 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; kgsvc</span><br></pre></td></tr></table></figure></li><li><p>alias + 단축형</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; kg svc</span><br></pre></td></tr></table></figure></li></ul><h2 id="끝"><a href="#끝" class="headerlink" title="끝."></a>끝.</h2><p>OS환경에 따라 자주사용하는 alias를 등록해서 사용할 수 있다.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2020/02/15/20200215-kubectl-alias/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker Client와 Kubernetes Client 역할을 하는 API 서버를 구축할 수 있을까?</title>
      <link>https://borakim-b.github.io/2020/02/10/20200210-d-k-client/</link>
      <guid>https://borakim-b.github.io/2020/02/10/20200210-d-k-client/</guid>
      <pubDate>Mon, 10 Feb 2020 09:29:03 GMT</pubDate>
      <description>
      
        &lt;p&gt;docker client 와 kubernetes client에 대해서 알아보고, Python 기반의 공식 라이브러리를 사용하여 테스트해보자.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>docker client 와 kubernetes client에 대해서 알아보고, Python 기반의 공식 라이브러리를 사용하여 테스트해보자.<br><a id="more"></a></p><h2 id="Docker-Client"><a href="#Docker-Client" class="headerlink" title="Docker Client"></a>Docker Client</h2><p>도커 클라이언트는 도커 데몬과 UNIX Socket 또는 REST API를 사용하여 통신한다.<br>도커 데몬과 통신하는 방법은 Docker CLI, SDK (Go, Python) 사용하여 자체적으로 구축, Docker Engine API를 직접 호출 하는 방법이 존재한다. </p><p><a href="https://docs.docker.com/develop/sdk/" rel="external nofollow noopener noreferrer" target="_blank">공식적으로 지원되는 라이브러리</a> 의 경우 Go, Python, HTTP 가 있다.<br>커뮤니티에 의해 관리되는 Unofficial libraries 중에 Java 등이 존재 한다.</p><h3 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h3><p>Python 기반의 공식 라이브러리(<a href="https://docker-py.readthedocs.io/en/stable/index.html" rel="external nofollow noopener noreferrer" target="_blank">Python Docker Engine SDK</a>)를 사용했다.</p><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pip install docker</span><br></pre></td></tr></table></figure><h4 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h4><p>도커 이미지 목록을 조회하는 예시</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> docker</span><br><span class="line"></span><br><span class="line">client = docker.from_env()</span><br><span class="line">containers = client.containers.list()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> containers:</span><br><span class="line">    print(c.image)</span><br></pre></td></tr></table></figure><h4 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Image: &apos;test-app:0.1&apos;&gt;</span><br><span class="line">&lt;Image: &apos;eureka-server:0.1&apos;&gt;</span><br></pre></td></tr></table></figure><h4 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h4><p>비공식 라이브러리 중에 자바기반의 <a href="https://github.com/spotify/docker-client" rel="external nofollow noopener noreferrer" target="_blank">docker-client</a> 에 대해서 우선 테스트를 해보았다.<br>기존 스프링 부트 프로젝트 라이브러리의 버전과 docker-client에서 사용되는 라이브러리들 간의 Conflict가 발생했다. (<a href="https://github.com/spotify/docker-client/issues/1030" rel="external nofollow noopener noreferrer" target="_blank">예</a>)</p><h2 id="Kubernetes-Client"><a href="#Kubernetes-Client" class="headerlink" title="Kubernetes Client"></a>Kubernetes Client</h2><p>쿠버네티스 API를 사용하기 위해서 공식적으로 지원되는 <a href="https://kubernetes.io/ko/docs/reference/using-api/client-libraries/" rel="external nofollow noopener noreferrer" target="_blank">쿠버네티스 클라이언트 라이브러리</a>를 사용한다.</p><blockquote><p><a href="https://kubernetes.io/ko/docs/reference/using-api/api-overview/" rel="external nofollow noopener noreferrer" target="_blank">쿠버네티스 REST API</a>를 사용해 애플리케이션을 작성하기 위해 API 호출 또는 요청/응답 타입을 직접 구현할 필요는 없다. 사용하고 있는 프로그래밍 언어를 위한 클라이언트 라이브러리를 사용하면 된다.</p><p>…</p></blockquote><p>쿠버네티스 클라이언트 라이브러리는 Go, Python, Java 등이 공식적으로 관리되고 있다.<br><a href="https://github.com/kubernetes-client/python/" rel="external nofollow noopener noreferrer" target="_blank">Python 라이브러리</a> 를 이용해서 테스트해보자.</p><h3 id="개발환경"><a href="#개발환경" class="headerlink" title="개발환경"></a>개발환경</h3><p>Python 2.7 and 3.4 + </p><h3 id="설치-1"><a href="#설치-1" class="headerlink" title="설치"></a>설치</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; pip install kubernetes</span><br><span class="line">...</span><br><span class="line">Installing collected packages: pyyaml, oauthlib, requests-oauthlib, pyasn1, rsa, cachetools, pyasn1-modules, google-auth, python-dateutil, kubernetes</span><br><span class="line">Successfully installed cachetools-<span class="number">4.0</span>.<span class="number">0</span> google-auth-<span class="number">1.11</span>.<span class="number">0</span> kubernetes-<span class="number">10.0</span>.<span class="number">1</span> oauthlib-<span class="number">3.1</span>.<span class="number">0</span> pyasn1-<span class="number">0.4</span>.<span class="number">8</span> pyasn1-modules-<span class="number">0.2</span>.<span class="number">8</span> python-dateutil-<span class="number">2.8</span>.<span class="number">1</span> pyyaml-<span class="number">5.3</span> requests-oauthlib-<span class="number">1.3</span>.<span class="number">0</span> rsa-<span class="number">4.0</span></span><br></pre></td></tr></table></figure><h3 id="예제-1"><a href="#예제-1" class="headerlink" title="예제"></a>예제</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kubernetes <span class="keyword">import</span> client, config</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configs can be set in Configuration class directly or using helper utility</span></span><br><span class="line">config.load_kube_config()</span><br><span class="line"></span><br><span class="line">v1 = client.CoreV1Api()</span><br><span class="line">print(<span class="string">"Listing pods with their IPs:"</span>)</span><br><span class="line">ret = v1.list_pod_for_all_namespaces(watch=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ret.items:</span><br><span class="line">    print(<span class="string">"%s\t%s\t%s"</span> % (i.status.pod_ip, i.metadata.namespace, i.metadata.name))</span><br></pre></td></tr></table></figure><p>라이브러리에 구현되어있는 함수를 통해서 쿠버네티스 API <code>/api/v1/pods</code> 를 호출하게 된다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">return</span> self.api_client.call_api(<span class="string">'/api/v1/pods'</span>, <span class="string">'GET'</span>,</span><br><span class="line">                                        path_params,</span><br><span class="line">                                        query_params,</span><br><span class="line">                                        header_params,</span><br><span class="line">                                        body=body_params,</span><br><span class="line">                                        post_params=form_params,</span><br><span class="line">                                        files=local_var_files,</span><br><span class="line">                                        response_type=<span class="string">'V1PodList'</span>,</span><br><span class="line">                                        auth_settings=auth_settings,</span><br><span class="line">                                        async_req=params.get(<span class="string">'async_req'</span>),</span><br><span class="line">                                        _return_http_data_only=params.get(<span class="string">'_return_http_data_only'</span>),</span><br><span class="line">                                        _preload_content=params.get(<span class="string">'_preload_content'</span>, <span class="keyword">True</span>),</span><br><span class="line">                                        _request_timeout=params.get(<span class="string">'_request_timeout'</span>),</span><br><span class="line">                                        collection_formats=collection_formats)</span><br></pre></td></tr></table></figure><p>샘플 코드의 경우 아래와 같은 결과 데이터를 출력하게 된다.<br>(단일 노드의 kubernetes cluster 구성을 지원해주는 Docker Desktop을 사용해서 테스트 함.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">10.1.0.36kube-systemcoredns-5c98db65d4-5kvwh</span><br><span class="line">10.1.0.37kube-systemcoredns-5c98db65d4-6vfrz</span><br><span class="line">192.168.65.3kube-systemetcd-docker-desktop</span><br><span class="line">192.168.65.3kube-systemkube-apiserver-docker-desktop</span><br><span class="line">192.168.65.3kube-systemkube-controller-manager-docker-desktop</span><br><span class="line">192.168.65.3kube-systemkube-proxy-9l6jq</span><br><span class="line">192.168.65.3kube-systemkube-scheduler-docker-desktop</span><br></pre></td></tr></table></figure><h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><p><a href="https://github.com/kubernetes-client/python/blob/master/kubernetes/README.md#documentation-for-api-endpoints" rel="external nofollow noopener noreferrer" target="_blank">documentation-for-api-endpoints</a></p><p>쿠버네티스 API에 대한 문서는</p><blockquote><p>전체 API 관례는 <a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md" rel="external nofollow noopener noreferrer" target="_blank">API conventions doc</a>에 기술되어 있다.</p><p>API 엔드포인트, 리소스 타입과 샘플은 <a href="https://kubernetes.io/docs/reference" rel="external nofollow noopener noreferrer" target="_blank">API Reference</a>에 기술되어 있다.</p><p>API에 원격 접속하는 방법은 <a href="https://kubernetes.io/docs/reference/access-authn-authz/controlling-access/" rel="external nofollow noopener noreferrer" target="_blank">Controlling API Access doc</a>에서 논의되었다</p></blockquote><h2 id="끝"><a href="#끝" class="headerlink" title="끝"></a>끝</h2><p>공식적으로 지원되는 <a href="https://docker-py.readthedocs.io/en/stable/index.html" rel="external nofollow noopener noreferrer" target="_blank">Python Docker Engine SDK</a>,  <a href="https://kubernetes.io/ko/docs/reference/using-api/client-libraries/" rel="external nofollow noopener noreferrer" target="_blank">쿠버네티스 클라이언트 라이브러리</a> 사용하여 컨테이너 관리에 필요한 기능을 구현한 API 서버를 구축해 볼 수 있다.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2020/02/10/20200210-d-k-client/#disqus_thread</comments>
    </item>
    
    <item>
      <title>유레카 서버와 유레카 클라이언트 어떻게 동작할까?</title>
      <link>https://borakim-b.github.io/2019/12/08/20191208-eureka-log/</link>
      <guid>https://borakim-b.github.io/2019/12/08/20191208-eureka-log/</guid>
      <pubDate>Sun, 08 Dec 2019 14:37:02 GMT</pubDate>
      <description>
      
        &lt;p&gt;Eureka Server 내장한 어플리케이션의 로그와 Eureka Client가 구현되어있는 어플리케이션 로그를 보면서 유레카의 동작방식을 이해해 보자.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Eureka Server 내장한 어플리케이션의 로그와 Eureka Client가 구현되어있는 어플리케이션 로그를 보면서 유레카의 동작방식을 이해해 보자.<br><a id="more"></a></p><h2 id="어플리케이션-로그"><a href="#어플리케이션-로그" class="headerlink" title="어플리케이션 로그"></a>어플리케이션 로그</h2><h3 id="Eureka-서버"><a href="#Eureka-서버" class="headerlink" title="Eureka 서버"></a>Eureka 서버</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">11</span>:<span class="number">20.165</span>  INFO <span class="number">1</span> --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : <span class="function">Tomcat initialized with <span class="title">port</span><span class="params">(s)</span>: 8761 <span class="params">(http)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:20.325  INFO 1 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span></span><br><span class="line"><span class="function">2019-11-29 13:11:20.326  INFO 1 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.22]</span></span><br><span class="line"><span class="function">2019-11-29 13:11:20.651  INFO 1 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span></span><br><span class="line"><span class="function">2019-11-29 13:11:20.652  INFO 1 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 6067 ms</span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function">2019-11-29 13:11:29.470  INFO 1 --- [main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 20 <span class="title">endpoint</span><span class="params">(s)</span> beneath base path '/actuator'</span></span><br><span class="line"><span class="function">2019-11-29 13:11:29.974  INFO 1 --- [main] o.s.c.n.eureka.InstanceInfoFactory       : Setting initial instance status as: STARTING</span></span><br><span class="line"><span class="function">2019-11-29 13:11:30.113  INFO 1 --- [main] com.netflix.discovery.DiscoveryClient    : Initializing Eureka in region us-east-1</span></span><br><span class="line"><span class="function">2019-11-29 13:11:30.124  INFO 1 --- [main] com.netflix.discovery.DiscoveryClient    : Client configured to neither register nor query <span class="keyword">for</span> data.</span></span><br><span class="line"><span class="function">2019-11-29 13:11:30.158  INFO 1 --- [main] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp 1575000690156 with initial instances count: 0</span></span><br><span class="line"><span class="function">2019-11-29 13:11:30.330  INFO 1 --- [main] c.n.eureka.DefaultEurekaServerContext    : Initializing ...</span></span><br><span class="line"><span class="function">2019-11-29 13:11:30.337  INFO 1 --- [main] c.n.eureka.cluster.PeerEurekaNodes       : Adding new peer nodes [http:<span class="comment">//registry:8761/eureka/]</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.081  INFO 1 --- [main] c.n.d.provider.DiscoveryJerseyProvider   : Using JSON encoding codec LegacyJacksonJson</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.083  INFO 1 --- [main] c.n.d.provider.DiscoveryJerseyProvider   : Using JSON decoding codec LegacyJacksonJson</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.084  INFO 1 --- [main] c.n.d.provider.DiscoveryJerseyProvider   : Using XML encoding codec XStreamXml</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.089  INFO 1 --- [main] c.n.d.provider.DiscoveryJerseyProvider   : Using XML decoding codec XStreamXml</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.570  INFO 1 --- [main] c.n.eureka.cluster.PeerEurekaNodes       : Replica node URL:  http:<span class="comment">//registry:8761/eureka/</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.613  INFO 1 --- [main] c.n.e.registry.AbstractInstanceRegistry  : Finished initializing remote region registries. All known remote regions: []</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.614  INFO 1 --- [main] c.n.eureka.DefaultEurekaServerContext    : Initialized</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.902  INFO 1 --- [main] o.s.c.n.e.s.EurekaServiceRegistry        : Registering application REGISTRY with eureka with status UP</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.980  INFO 1 --- [Thread-11] o.s.c.n.e.server.EurekaServerBootstrap   : Setting the eureka configuration..</span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.981  INFO 1 --- [Thread-11] o.s.c.n.e.server.EurekaServerBootstrap   : Eureka data center value eureka.datacenter is not set, defaulting to <span class="keyword">default</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:31.981  INFO 1 --- [Thread-11] o.s.c.n.e.server.EurekaServerBootstrap   : Eureka environment value eureka.environment is not set, defaulting to test</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.092  INFO 1 --- [Thread-11] o.s.c.n.e.server.EurekaServerBootstrap   : isAws returned <span class="keyword">false</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.099  INFO 1 --- [Thread-11] o.s.c.n.e.server.EurekaServerBootstrap   : Initialized server context</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.100  INFO 1 --- [Thread-11] c.n.e.r.PeerAwareInstanceRegistryImpl    : Got 1 instances from neighboring DS node</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.100  INFO 1 --- [Thread-11] c.n.e.r.PeerAwareInstanceRegistryImpl    : Renew threshold is: 1</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.100  INFO 1 --- [Thread-11] c.n.e.r.PeerAwareInstanceRegistryImpl    : Changing status to UP</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.163  INFO 1 --- [Thread-11] e.s.EurekaServerInitializerConfiguration : Started Eureka Server</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.289  INFO 1 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 8761 <span class="params">(http)</span> with context path ''</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.310  INFO 1 --- [main] .s.c.n.e.s.EurekaAutoServiceRegistration : Updating port to 8761</span></span><br><span class="line"><span class="function">2019-11-29 13:11:32.312  INFO 1 --- [main] k.c.s.e.e.EurekaServerApplication        : Started EurekaServerApplication in 20.454 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">21.053</span>)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:33.010  INFO 1 --- [nio-8761-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'</span></span><br><span class="line"><span class="function">2019-11-29 13:11:33.010  INFO 1 --- [nio-8761-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'</span></span><br><span class="line"><span class="function">2019-11-29 13:11:33.019  INFO 1 --- [nio-8761-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms</span></span><br><span class="line"><span class="function">2019-11-29 13:11:34.244  INFO 1 --- [nio-8761-exec-2] c.n.e.registry.AbstractInstanceRegistry  : Registered instance TEST-SERVICE/53614fa559ab:test-service:9300 with status <span class="title">UP</span> <span class="params">(replication=<span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:36.253  INFO 1 --- [nio-8761-exec-4] c.n.e.registry.AbstractInstanceRegistry  : Registered instance ZUUL-GATEWAY/7cf3a25fe7e2:zuul-gateway:8080 with status <span class="title">UP</span> <span class="params">(replication=<span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:11:47.191  INFO 1 --- [nio-8761-exec-3] c.n.e.registry.AbstractInstanceRegistry  : Registered instance TEST-SERVICE/382f8bf1dfec:test-service:20180 with status <span class="title">UP</span> <span class="params">(replication=<span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:12:32.157  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br><span class="line"><span class="function">2019-11-29 13:13:32.157  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br><span class="line"><span class="function">2019-11-29 13:14:32.156  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br><span class="line"><span class="function">2019-11-29 13:15:32.156  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br><span class="line"><span class="function">2019-11-29 13:16:32.156  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br></pre></td></tr></table></figure><h4 id="Eureka의-인스턴스-상태"><a href="#Eureka의-인스턴스-상태" class="headerlink" title="Eureka의 인스턴스 상태"></a>Eureka의 인스턴스 상태</h4><h5 id="관련-로그"><a href="#관련-로그" class="headerlink" title="관련 로그"></a>관련 로그</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">11</span>:<span class="number">29.974</span>  INFO <span class="number">1</span> --- [main] o.s.c.n.eureka.InstanceInfoFactory       : Setting initial instance status as: STARTING</span><br><span class="line">...</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">11</span>:<span class="number">34.244</span>  INFO <span class="number">1</span> --- [nio-<span class="number">8761</span>-exec-<span class="number">2</span>] c.n.e.registry.AbstractInstanceRegistry  : Registered instance TEST-SERVICE/<span class="number">53614f</span>a559ab:test-service:<span class="number">9300</span> <span class="function">with status <span class="title">UP</span> <span class="params">(replication=<span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function">2019-11-29 13:12:32.157  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br><span class="line"><span class="function">2019-11-29 13:13:32.157  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br></pre></td></tr></table></figure><p>서비스 레지스트리의 initial instance status는 STARTING 으로 설정 함.<br>TEST-SERVICE/53614fa559ab:test-service:9300 (appID/instanceId)<br>appID는 Application Name 이고, instanceId는 <code>${spring.cloud.hostname}:${spring.application.name}:${server.port}</code> 의 조합이다.</p><h5 id="일반적인-서비스-레지스트리의-Instance-Lifecycle"><a href="#일반적인-서비스-레지스트리의-Instance-Lifecycle" class="headerlink" title="일반적인 서비스 레지스트리의 Instance Lifecycle"></a>일반적인 서비스 레지스트리의 Instance Lifecycle</h5><p>Netflix Eureka와 같은 대부분의 서비스 레지스트리는 인스턴스를 조회하고, 등록하는 인터페이스를 제공한다. (REST API) 그리고 인스턴스 생명주기는 3가지 단계로 표현된다.</p><ol><li><p>Register</p><p>서비스 레지스트리에 microservice instance를 등록 함.</p></li><li><p>Heartbeat</p><p>등록된 instance는 사전 정의된 interval에 따라 레지스트리에 heartbeat을 보낸다.</p><p>레지스트리가 특정시간동안 heartbeat을 받지 못하면 인스턴스는 down 상태로 판단하고, 레지스트리에서 삭제한다.</p></li><li><p>Deregister/Down</p><p>instance가 삭제되었을 경우에 서비스 레지스트리에 등록해제(deregister) 해주는 과정이 필요하다.</p><p>deregister 요청을 받으면 instance는 down 상태가 되고, 레지스트리에서 삭제된다.</p></li></ol><h5 id="Eureka의-Instance-Lifecycle-및-Instance의-상태"><a href="#Eureka의-Instance-Lifecycle-및-Instance의-상태" class="headerlink" title="Eureka의 Instance Lifecycle 및 Instance의 상태"></a>Eureka의 Instance Lifecycle 및 Instance의 상태</h5><p>Instance의 Lifecycle 단계 별로 유레카 Instance Status 값의 변화를 알아보자.</p><ol><li><p>STARTING</p><p>유레카 서버에 서비스가 등록되면서 <code>STARTING</code> 상태가 됨.</p></li><li><p>UP</p><p>서비스 어플리케이션이 요청을 받을 수 있는 상태가 되면 <code>STARTING</code> 에서 <code>UP</code> 상태로 변경 됨.</p></li><li><p>HEARTBEAT</p><p>사전에 정의된 interval(<code>eureka.instance.lease-renewal-interval-in-seconds</code> default:30)에 따라 유레카 서버에 heartbeat을 보내고, 특정시간(<code>eureka.instance.lease-expiration-duration-in-seconds</code> default: 90)동안 유레카 서버가 heartbeat를 받지 못하면 레지스트리에서 해당 인스턴스를 제거한다.</p></li><li><p>DOWN</p><p>인스턴스가 종료되면 <code>DOWN</code> 상태로 변경 한다.</p></li></ol><h5 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h5><blockquote><p><a href="https://github.com/Netflix/eureka/wiki/Eureka-REST-operations" rel="external nofollow noopener noreferrer" target="_blank">Eureka-REST-operations</a></p><p><a href="https://dzone.com/articles/service-registration-with-go-lang-and-eureka" rel="external nofollow noopener noreferrer" target="_blank">https://dzone.com/articles/service-registration-with-go-lang-and-eureka</a> </p></blockquote><h4 id="Eureka-Server-Peer-Node-구성"><a href="#Eureka-Server-Peer-Node-구성" class="headerlink" title="Eureka Server Peer Node 구성"></a>Eureka Server Peer Node 구성</h4><h5 id="관련로그"><a href="#관련로그" class="headerlink" title="관련로그"></a>관련로그</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">11</span>:<span class="number">30.337</span>  INFO <span class="number">1</span> --- [main] c.n.eureka.cluster.PeerEurekaNodes       : Adding <span class="keyword">new</span> peer nodes [http:<span class="comment">//registry:8761/eureka/]</span></span><br></pre></td></tr></table></figure><h5 id="참고-1"><a href="#참고-1" class="headerlink" title="참고"></a>참고</h5><blockquote><p><a href="https://github.com/Netflix/eureka/wiki/Understanding-Eureka-Peer-to-Peer-Communication" rel="external nofollow noopener noreferrer" target="_blank">Understanding Eureka Peer to Peer Communication</a></p></blockquote><h3 id="Eureka-Client-서비스"><a href="#Eureka-Client-서비스" class="headerlink" title="Eureka Client - 서비스"></a>Eureka Client - 서비스</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">com.netflix.discovery.DiscoveryClient    : Disable delta property : <span class="keyword">true</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.296</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Single vip registry refresh property : <span class="keyword">null</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.296</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Force full registry fetch : <span class="keyword">false</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.296</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Application is <span class="keyword">null</span> : <span class="keyword">false</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.297</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Registered Applications size is zero : <span class="keyword">true</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.297</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Application version is -<span class="number">1</span>: <span class="keyword">true</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.297</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Getting all instance registry info from the eureka server</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.524</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : The response status is <span class="number">200</span></span><br><span class="line">...</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.546</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp <span class="number">1575002541545</span> with initial instances count: <span class="number">2</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.548</span>  INFO <span class="number">1</span> --- [           main] o.s.c.n.e.s.EurekaServiceRegistry        : Registering application TEST-SERVICE with eureka with status UP</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.549</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=<span class="number">1575002541549</span>, current=UP, previous=STARTING]</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.554</span>  INFO <span class="number">1</span> --- [nfoReplicator-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_TEST-SERVICE/<span class="number">364</span>b4deadbc7:test-service:<span class="number">20233</span>: registering service...</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.632</span>  INFO <span class="number">1</span> --- [nfoReplicator-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_TEST-SERVICE/<span class="number">364</span>b4deadbc7:test-service:<span class="number">20233</span> - registration status: <span class="number">204</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.640</span>  INFO <span class="number">1</span> --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : <span class="function">Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 20233 <span class="params">(http)</span> with context path ''</span></span><br><span class="line"><span class="function">2019-11-29 13:42:21.645  INFO 1 --- [           main] .s.c.n.e.s.EurekaAutoServiceRegistration : Updating port to 20233</span></span><br><span class="line"><span class="function">2019-11-29 13:42:21.648  INFO 1 --- [           main] k.c.s.e.e.TestServiceApplication         : Started TestServiceApplication in 6.367 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">7.332</span>)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.538  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Disable delta property : <span class="keyword">true</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.539  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Single vip registry refresh property : <span class="keyword">null</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.540  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Force full registry fetch : <span class="keyword">false</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.540  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Application is <span class="keyword">null</span> : <span class="keyword">false</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.540  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Registered Applications size is zero : <span class="keyword">false</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.540  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Application version is -1: <span class="keyword">false</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:24.540  INFO 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : Getting all instance registry info from the eureka server</span></span><br></pre></td></tr></table></figure><h4 id="유레카-클라이언트는-유레카-서버로-부터-registry를-fetch해서-캐싱한다"><a href="#유레카-클라이언트는-유레카-서버로-부터-registry를-fetch해서-캐싱한다" class="headerlink" title="유레카 클라이언트는 유레카 서버로 부터 registry를 fetch해서 캐싱한다."></a>유레카 클라이언트는 유레카 서버로 부터 registry를 fetch해서 캐싱한다.</h4><p>서비스 목록을 3초마다 캐싱하도록 설정된 경우의 로그다.</p><p><code>2019-11-29 13:42:21.297 Getting all instance registry info from the eureka server</code> 로그가 출력된 이후 3초가 지난 <code>2019-11-29 13:42:24.540</code> 에 또 fetch해 오는 것을 확인 할 수 있다.</p><h5 id="관련-설정"><a href="#관련-설정" class="headerlink" title="관련 설정"></a>관련 설정</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    registry-fetch-interval-seconds:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">    disable-delta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>registry-fetch-interval-seconds</code> 서버로부터 레지스트리 정보를 읽어와 로컬에 캐시하게 되는데 이때 레지스트리 fetch 간격 (초) </p><p><code>disable-delta</code> 레지스트리 정보의 변경된 부분만 fetch 함.</p><blockquote><p>  Indicates whether the eureka client should disable fetching of delta and should rather resort to getting the full registry information. Note that the delta fetches can reduce the traffic tremendously, because the rate of change with the eureka server is normally much lower than the rate of fetches. The changes are effective at runtime at the next registry fetch cycle as specified by registryFetchIntervalSeconds </p></blockquote><h5 id="참고-2"><a href="#참고-2" class="headerlink" title="참고"></a>참고</h5><blockquote><p><a href="https://www.docs4dev.com/docs/en/spring-cloud/Finchley.SR2/reference/multi__appendix_compendium_of_configuration_properties.html" rel="external nofollow noopener noreferrer" target="_blank">Eureka configuration_properties</a></p></blockquote><h3 id="Instance-Scale-Out-상황에서의-로그-확인"><a href="#Instance-Scale-Out-상황에서의-로그-확인" class="headerlink" title="Instance Scale Out 상황에서의 로그 확인"></a>Instance Scale Out 상황에서의 로그 확인</h3><p>TEST-SERVICE가 레지스트리에 등록되어 있는 상황에서 TEST-SEVICE 의 Instance가 1개 더 생성되었을 때의 로그를 확인해보자.</p><h4 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.627</span>  INFO <span class="number">1</span> --- [nio-<span class="number">8761</span>-exec-<span class="number">3</span>] c.n.e.registry.AbstractInstanceRegistry  : Registered instance TEST-SERVICE/<span class="number">364</span>b4deadbc7:test-service:<span class="number">20233</span> <span class="function">with status <span class="title">UP</span> <span class="params">(replication=<span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">2019-11-29 13:42:32.160  INFO 1 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br><span class="line"><span class="function">...</span></span><br></pre></td></tr></table></figure><h4 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.546</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp <span class="number">1575002541545</span> with initial instances count: <span class="number">2</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.548</span>  INFO <span class="number">1</span> --- [           main] o.s.c.n.e.s.EurekaServiceRegistry        : Registering application TEST-SERVICE with eureka with status UP</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.549</span>  INFO <span class="number">1</span> --- [           main] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=<span class="number">1575002541549</span>, current=UP, previous=STARTING]</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.554</span>  INFO <span class="number">1</span> --- [nfoReplicator-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_TEST-SERVICE/<span class="number">364</span>b4deadbc7:test-service:<span class="number">20233</span>: registering service...</span><br><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">13</span>:<span class="number">42</span>:<span class="number">21.632</span>  INFO <span class="number">1</span> --- [nfoReplicator-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_TEST-SERVICE/<span class="number">364</span>b4deadbc7:test-service:<span class="number">20233</span> - registration status: <span class="number">204</span></span><br></pre></td></tr></table></figure><h5 id="서버로그와-클라이언트-로그를-대조해-보면"><a href="#서버로그와-클라이언트-로그를-대조해-보면" class="headerlink" title="서버로그와 클라이언트 로그를 대조해 보면.."></a>서버로그와 클라이언트 로그를 대조해 보면..</h5><p><code>클라이언트</code> - <code>2019-11-29 13:42:21.554 registering service ...</code></p><p><code>서버</code> - <code>2019-11-29 13:42:21.627 Registered instance ...</code></p><p><code>클라이언트</code> - <code>2019-11-29 13:42:21.632 registration status: 204</code></p><table><thead><tr><th><strong>Operation</strong></th><th><strong>HTTP action</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>Register new application instance</td><td>POST /eureka/v2/apps/<strong>appID</strong></td><td>Input: JSON/XML payload HTTP Code: 204 on success</td></tr></tbody></table><ol><li>서비스 등록요청</li><li>유레카 레지스트리 인스턴스 등록</li><li>등록완료</li></ol><h3 id="Instance-Scale-In-상황에서의-로그-확인"><a href="#Instance-Scale-In-상황에서의-로그-확인" class="headerlink" title="Instance Scale In 상황에서의 로그 확인"></a>Instance Scale In 상황에서의 로그 확인</h3><h4 id="Eureka-Server-1"><a href="#Eureka-Server-1" class="headerlink" title="Eureka Server"></a>Eureka Server</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">07</span> <span class="number">11</span>:<span class="number">18</span>:<span class="number">25.478</span>  INFO <span class="number">1</span> --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime <span class="number">0</span>ms</span><br><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">07</span> <span class="number">11</span>:<span class="number">18</span>:<span class="number">28.611</span>  INFO <span class="number">1</span> --- [nio-<span class="number">8761</span>-exec-<span class="number">5</span>] c.n.e.registry.AbstractInstanceRegistry  : Cancelled instance TEST-SERVICE/<span class="number">291358</span>de0d8d:test-service:<span class="number">9300</span> (replication=<span class="keyword">false</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>Operation</strong></th><th><strong>HTTP action</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>De-register application instance</td><td>DELETE /eureka/v2/apps/<strong>appID</strong>/<strong>instanceID</strong></td><td>HTTP Code: 200 on success</td></tr></tbody></table><h2 id="끝"><a href="#끝" class="headerlink" title="끝"></a>끝</h2><p><img src="/images/eureka-server-client.jpg" alt="eureka-server-client"></p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/12/08/20191208-eureka-log/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Flask 기반의 API 서버 만들기</title>
      <link>https://borakim-b.github.io/2019/12/01/20191201-flask-restplus/</link>
      <guid>https://borakim-b.github.io/2019/12/01/20191201-flask-restplus/</guid>
      <pubDate>Sun, 01 Dec 2019 12:40:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;Python 웹 어플리케이션 프레임워크인 Flask를 이용해 빠르게 REST-ful API 서버를 만들어 보고 Swagger UI documentation을 제공하는 방법을 알아보자. &lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Python 웹 어플리케이션 프레임워크인 Flask를 이용해 빠르게 REST-ful API 서버를 만들어 보고 Swagger UI documentation을 제공하는 방법을 알아보자. </p><a id="more"></a><h2 id="Flask란"><a href="#Flask란" class="headerlink" title="Flask란?"></a><a href="https://palletsprojects.com/p/flask/" rel="external nofollow noopener noreferrer" target="_blank">Flask란</a>?</h2><blockquote><p>Flask is a lightweight <a href="https://wsgi.readthedocs.io/" rel="external nofollow noopener noreferrer" target="_blank">WSGI</a> web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. It began as a simple wrapper around <a href="https://palletsprojects.com/p/werkzeug" rel="external nofollow noopener noreferrer" target="_blank">Werkzeug</a> and <a href="https://palletsprojects.com/p/jinja" rel="external nofollow noopener noreferrer" target="_blank">Jinja</a> and has become one of the most popular Python web application frameworks.<br>…</p></blockquote><h2 id="개발"><a href="#개발" class="headerlink" title="개발"></a>개발</h2><h3 id="환경-및-주요-패키지"><a href="#환경-및-주요-패키지" class="headerlink" title="환경 및 주요 패키지"></a>환경 및 주요 패키지</h3><h4 id="Python-3-x"><a href="#Python-3-x" class="headerlink" title="Python 3.x"></a><a href="https://www.python.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">Python 3.x</a></h4><p>virtualenv, virtualenvwrapper</p><h4 id="Flask-RESTPlus"><a href="#Flask-RESTPlus" class="headerlink" title="Flask-RESTPlus"></a><a href="https://flask-restplus.readthedocs.io/en/stable/" rel="external nofollow noopener noreferrer" target="_blank">Flask-RESTPlus</a></h4><blockquote><p>Flask-RESTPlus is an extension for Flask that adds support for quickly building REST APIs</p></blockquote><p>Flask-RESTPlus 와 유사한 <a href="https://flask-restful.readthedocs.io/en/latest/" rel="external nofollow noopener noreferrer" target="_blank">Flask-Restful</a> 이 있는데 Flask-RESTPlus 는 Flask-Restful 을 fork 하여 시작된 프로젝트라고 한다.</p><p>Flask-RESTPlus 는 기본적으로 Swagger UI documentation을 제공한다.</p><p><strong>설치</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-restplus</span><br></pre></td></tr></table></figure></p><h4 id="Gunicorn"><a href="#Gunicorn" class="headerlink" title="Gunicorn"></a>Gunicorn</h4><blockquote><p>Gunicorn ‘Green Unicorn’ is a Python WSGI HTTP Server for UNIX</p></blockquote><p>Flask 에는 Gunicorn을 별도로 설치하지 않아도 built-in 서버가 존재한다. 로컬에서 개발할 때에는 해당 서버를 이용해도 됨.</p><h3 id="잠깐-알고가기"><a href="#잠깐-알고가기" class="headerlink" title="잠깐 알고가기"></a>잠깐 알고가기</h3><p>패키지 리스트 저장</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>패키지 설치</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="프로젝트-구조-설계"><a href="#프로젝트-구조-설계" class="headerlink" title="프로젝트 구조 설계"></a>프로젝트 구조 설계</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">projectname</span><br><span class="line">  -- api</span><br><span class="line">  -- environment</span><br><span class="line">  -- server</span><br><span class="line">  -- services</span><br><span class="line">run.py</span><br><span class="line">Dockerfile</span><br><span class="line">requirements.txt</span><br></pre></td></tr></table></figure><ul><li><code>run.py</code> API Entry Point 에 대한 정의</li><li><p><code>environment</code> profile 에 따른 환경변수에 대한 설정 정의</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">env = os.environ.get(<span class="string">"PROFILES_ACTIVE"</span>, <span class="string">"local"</span>)</span><br><span class="line">port = os.environ.get(<span class="string">"PORT"</span>, <span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">profiles = &#123;</span><br><span class="line">    <span class="string">"local"</span>: &#123;<span class="string">"port"</span>: <span class="number">8080</span>, <span class="string">"debug"</span>: <span class="keyword">True</span>, <span class="string">"swagger-url"</span>: <span class="string">"/api/swagger"</span>&#125;,</span><br><span class="line">    <span class="string">"dev"</span>: &#123;<span class="string">"port"</span>: port, <span class="string">"debug"</span>: <span class="keyword">False</span>, <span class="string">"swagger-url"</span>: <span class="string">"/api/swagger"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">environment_config = profiles[env]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>server</code> flask와 flask-restplus의 서버 인스턴스에 대한 정의 및 설정 (app, api)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api, Resource, fields</span><br><span class="line"><span class="keyword">from</span> environment.instance <span class="keyword">import</span> environment_config</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strftime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.app = Flask(__name__)</span><br><span class="line">        self.api = Api(self.app,</span><br><span class="line">                       version=<span class="string">'1.0'</span>,</span><br><span class="line">                       title=<span class="string">'Flask API'</span>,</span><br><span class="line">                       description=<span class="string">'Flask API'</span>,</span><br><span class="line">                       doc=environment_config[<span class="string">"swagger-url"</span>],</span><br><span class="line">                       prefix=<span class="string">'/api'</span></span><br><span class="line">                       )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.app.run(</span><br><span class="line">            debug=environment_config[<span class="string">"debug"</span>],</span><br><span class="line">            port=environment_config[<span class="string">"port"</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server = Server()</span><br></pre></td></tr></table></figure><p><code>environment_config[&quot;swagger-url&quot;]</code> Swagger UI 의 URL path를 정의한다. </p></li><li><p><code>api</code> API Endpoint 에 매핑되는 Class 정의.</p><p><strong>URI : prefix + namespace + endpoint</strong></p></li></ul><p>  <strong>GET /api/test/list </strong>  </p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test_api = api.namespace(<span class="string">'test'</span>, description=<span class="string">'Test API'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">@test_api.route('/list')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestListAll</span><span class="params">(Resource)</span>:</span></span><br><span class="line"><span class="meta">    @test_api.doc('test_list_all')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        테스트 목록 조회</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        test_list = test_service.get_list(is_all=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> test_list</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>  <strong>POST /api/test/create</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@test_api.route('/create')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCreate</span><span class="params">(Resource)</span>:</span></span><br><span class="line"><span class="meta">    @test_api.expect(test, validate=True)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>  <strong>Parameter 사용  /api/test/{test_id}/update</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@test_api.route('/&lt;string:test_id&gt;/update')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestUpdate</span><span class="params">(Resource)</span>:</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><code>services</code> service 정의.</li></ul><h3 id="Docker를-이용하여-컨테이너화-해보기"><a href="#Docker를-이용하여-컨테이너화-해보기" class="headerlink" title="Docker를 이용하여 컨테이너화 해보기"></a>Docker를 이용하여 컨테이너화 해보기</h3><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="bash">RUN apt-get install -y gunicorn</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY . /app</span></span><br><span class="line"><span class="bash">WORKDIR /app</span></span><br><span class="line"><span class="bash">RUN pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"gunicorn"</span>, <span class="string">"-b"</span>, <span class="string">"0.0.0.0:8080"</span>, <span class="string">"--access-logfile"</span>, <span class="string">"access.log"</span>, <span class="string">"--error-logfile"</span>, <span class="string">"error.log"</span>, <span class="string">"run:app"</span>]</span></span><br></pre></td></tr></table></figure><h4 id="이미지-빌드"><a href="#이미지-빌드" class="headerlink" title="이미지 빌드"></a>이미지 빌드</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t flask-test-app:latest .</span><br></pre></td></tr></table></figure><h4 id="컨테이너-생성"><a href="#컨테이너-생성" class="headerlink" title="컨테이너 생성"></a>컨테이너 생성</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -d -p 8080:8080 --name flask-test-app flask-test-app:latest</span><br></pre></td></tr></table></figure><h3 id="끝"><a href="#끝" class="headerlink" title="끝"></a>끝</h3><p>간단하게 API 서버를 구성해볼 수 있고, 관련 API 문서(Swagger UI documentation)도 만들 수 있다.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/12/01/20191201-flask-restplus/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring Cloud Netflix를 이용해 API Gateway 서버 만들기</title>
      <link>https://borakim-b.github.io/2019/09/28/20190928-zuul-gateway/</link>
      <guid>https://borakim-b.github.io/2019/09/28/20190928-zuul-gateway/</guid>
      <pubDate>Sat, 28 Sep 2019 11:02:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;API 게이트웨이에 대해서 알아보고 Zuul API Gateway, Eureka Server, MicroService(EurekaClient) 구성 후 Docker를 이용해 컨테이너화 해보자.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>API 게이트웨이에 대해서 알아보고 Zuul API Gateway, Eureka Server, MicroService(EurekaClient) 구성 후 Docker를 이용해 컨테이너화 해보자.<br><a id="more"></a></p><h2 id="API-Gateway-란"><a href="#API-Gateway-란" class="headerlink" title="API Gateway 란?"></a>API Gateway 란?</h2><p>API Gateway 패턴은 마이크로서비스 아키텍처를 적용하여 개발할 때 고려된다.<br>클라이언트와 마이크로서비스 사이에 위치해서 클라이언트가 서비스에 요청을 보낼 때 사용되는데<br>API Gateway가 Single entry point를 제공하고, 클라이언트의 요청에 대해서 내부 마이크로 서비스의 엔드포인트로 라우팅하는 프록시 서버와 같은 역할을 한다.</p><p>API Gateway를 사용하게되면 클라이언트 앱에 대해서 단일 엔드포인트(URL)을 제공할 수 있고, 마이크로 서비스와 클라이언트 앱을 분리할 수 있다.<br>마이크로 서비스에서 공통적으로 필요한 인증 및 권한 부여, 응답에 대한 캐싱, 부하분산, 속도제한 등의 구현을 게이트웨이에서 처리할 수 있고, 따라서 각 마이크로 서비스의 구현을 간소화 할 수 있다.<br>반면에 단일 실패 지점이 만들어질 수 있고 추가 네트워크 호출로 응답시간이 증가 할 수 있는 등의 단점이 있을 수 있다.</p><p><a href="https://docs.microsoft.com/ko-kr/dotnet/architecture/microservices/architect-microservice-container-applications/direct-client-to-microservice-communication-versus-the-api-gateway-pattern" rel="external nofollow noopener noreferrer" target="_blank">참고1</a> <a href="https://microservices.io/patterns/apigateway.html" rel="external nofollow noopener noreferrer" target="_blank">참고2</a> </p><h2 id="Spring-Cloud-Netflix-란"><a href="#Spring-Cloud-Netflix-란" class="headerlink" title="Spring Cloud Netflix 란?"></a>Spring Cloud Netflix 란?</h2><p>Spring Cloud Netflix를 이용해서 빠르게 API Gateway 서버를 구성해보자.<br>게이트웨이로 Zuul을 사용하고, 라우팅 및 부하분산을 위해서 Eureka, Ribbon을 사용한다.</p><p><u><a href="https://spring.io/projects/spring-cloud-netflix#overview" rel="external nofollow noopener noreferrer" target="_blank">Spring Cloud Netflix</a>는 Spring Boot 어플리케이션을 위한 Netflix OSS 통합을 제공한다.</u></p><h3 id="Spring-Cloud-Netflix"><a href="#Spring-Cloud-Netflix" class="headerlink" title="Spring Cloud Netflix"></a>Spring Cloud Netflix</h3><blockquote><p>This project provides Netflix OSS integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with battle-tested Netflix components. The patterns provided include Service Discovery (Eureka), Circuit Breaker (Hystrix), Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon).</p></blockquote><p><a href="https://cloud.spring.io/spring-cloud-netflix/reference/html/" rel="external nofollow noopener noreferrer" target="_blank">reference</a></p><h3 id="Netflix-OSS-Open-Soure-Software"><a href="#Netflix-OSS-Open-Soure-Software" class="headerlink" title="Netflix OSS(Open Soure Software)"></a>Netflix OSS(Open Soure Software)</h3><h4 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a><a href="https://github.com/Netflix/zuul" rel="external nofollow noopener noreferrer" target="_blank">Zuul</a></h4><blockquote><p>Zuul is the front door for all requests from devices and web sites to the backend of the Netflix streaming application</p><p>As an edge service application,</p><p>Zuul is built to enable dynamic routing, monitoring, resiliency and security</p><p>..</p></blockquote><h4 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a><a href="https://github.com/Netflix/eureka" rel="external nofollow noopener noreferrer" target="_blank">Eureka</a></h4><p>관련 포스팅 : <a href="/2019/12/08/20191208-eureka-log/">유레카 서버와 유레카 클라이언트 어떻게 동작할까?</a></p><blockquote><p>purpose of load balancing and failover of middle-tier servers</p><p>Eureka Server, Eureka Client</p><p>…</p></blockquote><p><img src="/images/eureka-goodnote.jpg" alt="eureka-goodnote"></p><p>Eureka 에 대해서 이해할 때 <a href="https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/" rel="external nofollow noopener noreferrer" target="_blank">Service Discovery</a> 에 대해 알고가자.</p><p>클라우드에서 인스턴스는 동적으로 할당된다. IP주소 및 포트 정보도 변경된다.</p><ul><li>EurekaServer (Service Registry Server) 에 등록된 서비스들은 Eureka Client가 Eureka Server로 부터 레지스트리 정보를 가져와서 로컬에 캐시하고, 캐시된 레지스트리 정보를 이용해서 다른 서비스들을 찾을 수 있다.</li></ul><h4 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a><a href="https://github.com/Netflix/ribbon" rel="external nofollow noopener noreferrer" target="_blank">Ribbon</a></h4><p>Client Side Load Balancing Library</p><p>Ribbon Client는 Eureka Client가 알려주는 사용가능한 서비스들을 대상으로 LoadBalancing (기본 Round Robin 방식) 할 수 있다. </p><h2 id="API-Gateway-서버-구성"><a href="#API-Gateway-서버-구성" class="headerlink" title="API Gateway 서버 구성"></a>API Gateway 서버 구성</h2><p>Gradle Project, Spring Boot 2.1, Java 8</p><p><a href="https://start.spring.io" rel="external nofollow noopener noreferrer" target="_blank">Spring Initializr</a> 를 통해서 프로젝트를 생성 했다. (EurekaServer, ZuulAPIGateway, TestService)</p><p>각 프로젝트의 주요 dependency 설정과 어플리케이션 설정 내용에 대해서만 작성 함.</p><h3 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h3><h4 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h4><p>Spring Boot Actuator, Spring Security, Eureka Server</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-security'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.security:spring-security-test'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="설정-bootstrap-yml"><a href="#설정-bootstrap-yml" class="headerlink" title="설정 (bootstrap.yml)"></a>설정 (bootstrap.yml)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">$&#123;EUREKA_SERVER_NAME:eureka-server&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="string">$&#123;PORT:8081&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">$&#123;EUREKA_SERVER_NAME:eureka-server&#125;</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    lease-expiration-duration-in-seconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    lease-renewal-interval-in-seconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">            defaultZone:</span> <span class="attr">http://$&#123;EUREKA_SERVER_NAME:eureka-server&#125;:$&#123;PORT:8081&#125;/eureka/</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    max-threads-for-peer-replication:</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    shutdown:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">ALWAYS</span></span><br></pre></td></tr></table></figure><h3 id="ZuulAPIGateway"><a href="#ZuulAPIGateway" class="headerlink" title="ZuulAPIGateway"></a>ZuulAPIGateway</h3><h4 id="Dependencies-1"><a href="#Dependencies-1" class="headerlink" title="Dependencies"></a>Dependencies</h4><p>Spring Boot Actuator, Spring Security, Eureka Discovery Client, Zuul, Ribbon</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-security'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-netflix-zuul'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.security:spring-security-test'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="설정-bootstrap-yml-1"><a href="#설정-bootstrap-yml-1" class="headerlink" title="설정 (bootstrap.yml)"></a>설정 (bootstrap.yml)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">zuul-api-gateway</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="string">$&#123;PORT:8080&#125;</span></span><br><span class="line">     </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">zuul-api-gateway</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">            defaultZone:</span> <span class="attr">http://$&#123;EUREKA_SERVER_NAME:eureka-server&#125;:$&#123;EUREKA_SERVER_PORT:8081&#125;/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  ignored-services:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/api</span></span><br><span class="line"><span class="attr">  ribbonIsolationStrategy:</span> <span class="string">THREAD</span></span><br><span class="line"><span class="attr">  threadPool:</span></span><br><span class="line"><span class="attr">    useSeparateThreadPools:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    test-service:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/test-service/**</span></span><br><span class="line"><span class="attr">      sensitive-headers:</span></span><br><span class="line"><span class="attr">      service-id:</span> <span class="string">test-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span> </span><br><span class="line"><span class="attr">  eureka:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span>      </span><br><span class="line"><span class="attr">  okhttp:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    shutdown:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">ALWAYS</span></span><br></pre></td></tr></table></figure><h3 id="TestService"><a href="#TestService" class="headerlink" title="TestService"></a>TestService</h3><h4 id="Dependencies-2"><a href="#Dependencies-2" class="headerlink" title="Dependencies"></a>Dependencies</h4><p>Spring Boot Actuator, Spring Security, SpringWeb, Eureka Discovery Client</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-security'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.security:spring-security-test'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="설정-bootstrap-yml-2"><a href="#설정-bootstrap-yml-2" class="headerlink" title="설정 (bootstrap.yml)"></a>설정 (bootstrap.yml)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">test-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="string">$&#123;PORT:8090&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">test-service</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">            defaultZone:</span> <span class="attr">http://$&#123;EUREKA_SERVER_NAME:eureka-server&#125;:$&#123;EUREKA_SERVER_PORT:8081&#125;/eureka/</span></span><br><span class="line"><span class="attr">            enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    shutdown:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">ALWAYS</span></span><br></pre></td></tr></table></figure><h4 id="로드밸런싱이-잘되는지-확인-용-API"><a href="#로드밸런싱이-잘되는지-확인-용-API" class="headerlink" title="로드밸런싱이 잘되는지 확인 용 API"></a>로드밸런싱이 잘되는지 확인 용 API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">  ResponseEntity&lt;Map&lt;String, String&gt;&gt; sample() &#123;    </span><br><span class="line">    Map&lt;String, String&gt; result = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    result.put(<span class="string">"msg"</span>, String.format(<span class="string">"eureka client! PORT: %s"</span>, port));</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Docker를-이용한-컨테이너화"><a href="#Docker를-이용한-컨테이너화" class="headerlink" title="Docker를 이용한 컨테이너화"></a>Docker를 이용한 컨테이너화</h3><p>Docker Compose를 이용해 컨테이너 생성 후 테스트.</p><p>docker-comopse.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  eureka-server:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'eureka-server:0.1'</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8081:8081'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8081</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">  test-service1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'test-service:0.1'</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8090:8090'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_PORT=8081</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8090</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka-server</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">  test-service2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'test-service:0.1'</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8091:8091'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_PORT=8081</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8091</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka-server</span> </span><br><span class="line">      </span><br><span class="line"><span class="attr">  zuul-api-gateway:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'zuul-api-gateway:0.1'</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8080:8080'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_PORT=8081</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8080</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test-service1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test-service2</span></span><br></pre></td></tr></table></figure><p>동일 host 상에 배포된 container 사이는 Private IP 를 이용해 통신이 가능 하지만 IP 기반의 설정은 권고되지 않는다<br>그래서 컨테이너 간의 통신을 위해서 link 방식을 사용 했다.<br>link 방식을 사용했을 경우에 동적 IP 이슈를 피할 수 있지만 동일 docker host에 존재할 경우만 가능하고, 타 host에 존재할 경우에는 통신이 불가하다.</p><p><strong>추가. link 방식을 사용하지 않고, 네트워크 설정을 통한 컨테이너간의 통신방식</strong><br>동일한 네트워크에 컨테이너가 생성될 경우 컨테이너 간의 통신이 가능하다.<br><code>test</code>네트워크를 만들고 컨테이너를 생성할 때 네트워크를 지정(<code>test</code>)하도록 함</p><p>docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  eureka-server:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'eureka-server:0.1'</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8081:8081'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8081</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">  test-service1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'test-service:0.1'</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8090:8090'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_PORT=8081</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8090</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka-server</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">  test-service2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'test-service:0.1'</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8091:8091'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_PORT=8081</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8091</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka-server</span> </span><br><span class="line">      </span><br><span class="line"><span class="attr">  zuul-api-gateway:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'zuul-api-gateway:0.1'</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8080:8080'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_NAME=eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">EUREKA_SERVER_PORT=8081</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PORT=8080</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test-service1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">test-service2</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  test:</span></span><br></pre></td></tr></table></figure><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><p><strong>Eureka Server Dashboard</strong></p><p><code>http://localhost:8081/</code></p><p><img src="/images/eureka-server-dashboard.png" alt="eureka-server-dashboard"></p><p>GATEWAY 1개, SERVICE 2개가 Eureka registry에 등록된 것을 확인할 수 있다.</p><p><strong>Gateway API URL</strong></p><p><code>http://localhost:8080/&lt;API Prefix&gt;/&lt;Endpoint Service ID&gt;/&lt;Service API&gt;</code></p><p><code>http://localhost:8080/api/test-service/hello</code></p><p><strong>로드밸런싱 확인</strong></p><p>test-service1(8090), test-service2(8091) 로 로드밸런싱이 잘되는지 확인.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;msg&quot;:&quot;eureka client! PORT: 8090&quot;&#125;</span><br><span class="line">&#123;&quot;msg&quot;:&quot;eureka client! PORT: 8091&quot;&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/09/28/20190928-zuul-gateway/#disqus_thread</comments>
    </item>
    
    <item>
      <title>엣지컴퓨팅(Edge computing) 이란?</title>
      <link>https://borakim-b.github.io/2019/09/08/20190908-edge-computing/</link>
      <guid>https://borakim-b.github.io/2019/09/08/20190908-edge-computing/</guid>
      <pubDate>Sun, 08 Sep 2019 09:16:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;엣지 컴퓨팅에 대해서 알아보고 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C_%EC%BB%B4%ED%93%A8%ED%8C%85&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;클라우드 컴퓨팅&lt;/a&gt;과 비교해보자.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>엣지 컴퓨팅에 대해서 알아보고 <a href="https://ko.wikipedia.org/wiki/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C_%EC%BB%B4%ED%93%A8%ED%8C%85" rel="external nofollow noopener noreferrer" target="_blank">클라우드 컴퓨팅</a>과 비교해보자.<br><a id="more"></a></p><h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><blockquote><p>다양한 단말기기에서 발생하는 데이터를 클라우드와 같은 중앙 집중식 데이터센터로 보내지 않고, 데이터가 발생한 현장 혹은 근거리에서 실시간 처리하는 방식으로 데이터 흐름 가속화를 지원하는 컴퓨팅 방식.<br>..<br>기존의 클라우드 컴퓨팅(cloud computing)과는 다른 컴퓨팅 접근방법으로, 서로를 대체하는 것이 아닌 각각의 문제점을 보완하는 공생관계에 가깝다.</p><p>클라우드(중앙구름) 환경의 일부 작은 규모의 플랫폼으로 보아 클라우드렛(cloudlet, 작은구름) 용어로 쓰기도하고,<br>단말 기기 주변(Edge)에서 처리되는 것을 가리켜 포크 컴퓨팅(fog computing)이라고도 한다.</p><p>..</p><p><a href="https://terms.naver.com/entry.nhn?docId=5670035&amp;cid=42346&amp;categoryId=42346" rel="external nofollow noopener noreferrer" target="_blank">IT용어사전</a></p></blockquote><p><img src="/images/edge-computing.jpg" alt=""></p><p>중앙에서 모든 데이터의 처리를 해야하는 클라우드 컴퓨팅과 다르게 엣지컴퓨팅의 경우 엣지에서 처리한 데이터의 인사이트만 클라우드에 전송하므로 데이터 처리량이 늘어날수록 부하가 많아지는 클라우드 컴퓨팅의 단점을 극복할 수 있다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>관련있어 보이는 서비스들을 링크해보았다.</p><p><a href="https://aws.amazon.com/ko/lambda/edge/" rel="external nofollow noopener noreferrer" target="_blank">AWS Lambda@Edge</a></p><blockquote><p>Lambda@Edge는 <a href="https://aws.amazon.com/cloudfront/" rel="external nofollow noopener noreferrer" target="_blank">Amazon CloudFront</a>의 기능 중 하나로서 애플리케이션의 사용자에게 더 가까운 위치에서 코드를 실행하여 성능을 개선하고 지연 시간을 단축할 수 있게 해 줍니다</p></blockquote><p><a href="https://aws.amazon.com/ko/greengrass/" rel="external nofollow noopener noreferrer" target="_blank">AWS IoT Greengrass</a></p><blockquote><p>엣지 디바이스에 로컬 컴퓨팅, 메시징, 데이터 캐싱, 동기화 및 ML 추론 기능 제공<br>AWS IoT Greengrass에서는 인터넷에 연결되어 있지 않더라도 커넥티드 디바이스에서 <a href="https://aws.amazon.com/lambda/" rel="external nofollow noopener noreferrer" target="_blank">AWS Lambda</a> 함수를 실행하고, 기계 학습 모델을 기반으로 예측을 실행하고, 디바이스 데이터를 동기화 상태로 유지하고, 다른 디바이스와 안전하게 통신할 수 있습니다.</p></blockquote><p><a href="https://azure.microsoft.com/ko-kr/services/iot-edge/" rel="external nofollow noopener noreferrer" target="_blank">Azure IoT Edge</a></p><blockquote><p>특정 워크로드를 네트워크 에지로 이동하면 디바이스가 클라우드와 통신하는 데 걸리는 시간을 줄이고, 로컬 변경 사항에 더 빠르게 대응하며, 길어진 오프라인 기간에도 안정적으로 작동할 수 있습니다.</p></blockquote>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/09/08/20190908-edge-computing/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows docker build 배치파일 만들기.</title>
      <link>https://borakim-b.github.io/2019/09/08/20190908-windows-docker-batch/</link>
      <guid>https://borakim-b.github.io/2019/09/08/20190908-windows-docker-batch/</guid>
      <pubDate>Sun, 08 Sep 2019 09:15:45 GMT</pubDate>
      <description>
      
        &lt;p&gt;Windows 환경에서 Docker 이미지를 빌드하고, 삭제하는 배치파일(.bat)을 만들어보자.&lt;br&gt;다수의 프로젝트를 빌드하는데 Docker Compose 를 사용하지 않았을 경우 참고&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Windows 환경에서 Docker 이미지를 빌드하고, 삭제하는 배치파일(.bat)을 만들어보자.<br>다수의 프로젝트를 빌드하는데 Docker Compose 를 사용하지 않았을 경우 참고<br><a id="more"></a></p><h2 id="도커-이미지-생성"><a href="#도커-이미지-생성" class="headerlink" title="도커 이미지 생성"></a>도커 이미지 생성</h2><h3 id="Docker-command-line"><a href="#Docker-command-line" class="headerlink" title="Docker command line"></a>Docker command line</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t test-app1:0.1 .</span><br></pre></td></tr></table></figure><h3 id="docker-build-bat"><a href="#docker-build-bat" class="headerlink" title="docker-build.bat"></a>docker-build.bat</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo CREATE DOCKER IMAGES</span><br><span class="line">cd ./testApp1</span><br><span class="line">docker build -t test-app1:0.1 .</span><br><span class="line">cd ./testApp2</span><br><span class="line">docker build -t test-app2:0.1 .</span><br><span class="line">cd ./testApp3</span><br><span class="line">docker build -t test-app3:0.1 .</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="도커-컨테이너-중지-삭제-이미지-모두-삭제"><a href="#도커-컨테이너-중지-삭제-이미지-모두-삭제" class="headerlink" title="도커 컨테이너 중지, 삭제, 이미지 모두 삭제"></a>도커 컨테이너 중지, 삭제, 이미지 모두 삭제</h2><h3 id="Docker-command-line-1"><a href="#Docker-command-line-1" class="headerlink" title="Docker command line"></a>Docker command line</h3><p>모든 컨테이너 중지 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -q)</span><br></pre></td></tr></table></figure><p>모든 컨테이너 제거</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><p>이미지 전체 삭제</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="docker-remove-bat"><a href="#docker-remove-bat" class="headerlink" title="docker-remove.bat"></a>docker-remove.bat</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@echo DELETE DOCKER IMAGES</span><br><span class="line">IF &quot;%1&quot;==&quot;c&quot; (</span><br><span class="line">@echo Only remove containers !!!</span><br><span class="line">goto c</span><br><span class="line">) ELSE (</span><br><span class="line">goto all</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:c</span><br><span class="line">FOR /f &quot;tokens=*&quot; %%i IN (&apos;docker ps -aq&apos;) DO docker rm %%i</span><br><span class="line">GOTO:EOF</span><br><span class="line"></span><br><span class="line">:all</span><br><span class="line">FOR /f &quot;tokens=*&quot; %%i IN (&apos;docker ps -aq&apos;) DO docker stop %%i</span><br><span class="line">FOR /f &quot;tokens=*&quot; %%i IN (&apos;docker ps -aq&apos;) DO docker rm %%i</span><br><span class="line">FOR /f &quot;tokens=*&quot; %%i IN (&apos;docker images --format &quot;&#123;&#123;.ID&#125;&#125;&quot;&apos;) DO docker rmi %%i</span><br><span class="line">GOTO:EOF</span><br></pre></td></tr></table></figure><p>파라미터를 받는 케이스를 추가했다.</p><p> <code>c</code> 파라미터를 같이 넘길 경우 컨테이너만 삭제되도록 함. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./docker-remove.bat c</span><br></pre></td></tr></table></figure><h2 id="끝"><a href="#끝" class="headerlink" title="끝"></a>끝</h2><p>멀티 컨테이너 구성을 할 경우에는 <a href="https://docs.docker.com/compose/" rel="external nofollow noopener noreferrer" target="_blank">Docker Compose</a>  를 사용하는게 좋다.<br>다만 맥이나 리눅스 환경이 아니라 윈도우 환경에서 docker-compose 로 구성하기 전이라면 참고.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/09/08/20190908-windows-docker-batch/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS 컨테이너 관련 서비스</title>
      <link>https://borakim-b.github.io/2019/08/20/20190820-aws-container-service/</link>
      <guid>https://borakim-b.github.io/2019/08/20/20190820-aws-container-service/</guid>
      <pubDate>Mon, 19 Aug 2019 16:01:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;AWS 컨테이너 관련 서비스를 알아보기 위한 리서치 용도로 링크만 걸어두었다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>AWS 컨테이너 관련 서비스를 알아보기 위한 리서치 용도로 링크만 걸어두었다.<br><a id="more"></a></p><h2 id="Amazon-ECS-Elastic-Container-Service"><a href="#Amazon-ECS-Elastic-Container-Service" class="headerlink" title="Amazon ECS(Elastic Container Service)"></a><a href="https://aws.amazon.com/ko/ecs/" rel="external nofollow noopener noreferrer" target="_blank">Amazon ECS(Elastic Container Service)</a></h2><p><img src="/images/aws_ecs.png" alt=""></p><h2 id="AWS-Fargate"><a href="#AWS-Fargate" class="headerlink" title="AWS Fargate"></a><a href="https://aws.amazon.com/ko/fargate/" rel="external nofollow noopener noreferrer" target="_blank">AWS Fargate</a></h2><p><img src="/images/aws_farate.png" alt=""></p><h2 id="Amazon-EKS-Elastic-Kubernetes-Service"><a href="#Amazon-EKS-Elastic-Kubernetes-Service" class="headerlink" title="Amazon EKS(Elastic Kubernetes Service)"></a><a href="https://aws.amazon.com/ko/eks/" rel="external nofollow noopener noreferrer" target="_blank">Amazon EKS(Elastic Kubernetes Service)</a></h2><p><img src="/images/aws_eks.png" alt=""></p><h2 id="AWS-App-Mesh"><a href="#AWS-App-Mesh" class="headerlink" title="AWS App Mesh"></a><a href="https://aws.amazon.com/ko/app-mesh/" rel="external nofollow noopener noreferrer" target="_blank">AWS App Mesh</a></h2><ul><li><a href="https://aws.amazon.com/ko/app-mesh/getting-started/" rel="external nofollow noopener noreferrer" target="_blank">가이드</a></li></ul><p><img src="/images/aws_app_mesh.png" alt=""></p><h2 id="AWS-Cloud-Map"><a href="#AWS-Cloud-Map" class="headerlink" title="AWS Cloud Map"></a><a href="https://aws.amazon.com/ko/cloud-map/" rel="external nofollow noopener noreferrer" target="_blank">AWS Cloud Map</a></h2><h2 id="Firecracker"><a href="#Firecracker" class="headerlink" title="Firecracker"></a><a href="https://firecracker-microvm.github.io/" rel="external nofollow noopener noreferrer" target="_blank">Firecracker</a></h2><ul><li><a href="https://aws.amazon.com/ko/blogs/korea/firecracker-lightweight-virtualization-for-serverless-computing/" rel="external nofollow noopener noreferrer" target="_blank">AWS RE:Invent</a></li></ul>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/08/20/20190820-aws-container-service/#disqus_thread</comments>
    </item>
    
    <item>
      <title>동영상 스틸 컷 만들어보기</title>
      <link>https://borakim-b.github.io/2019/08/03/20190803-python-opencv-stillcut/</link>
      <guid>https://borakim-b.github.io/2019/08/03/20190803-python-opencv-stillcut/</guid>
      <pubDate>Sat, 03 Aug 2019 12:39:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;동영상 스틸컷 or 썸네일 or 스냅샷 추출 어떻게 할까?&lt;br&gt;opencv-python 라이브러리를 이용해서 관련 예제를 만들어 보자.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>동영상 스틸컷 or 썸네일 or 스냅샷 추출 어떻게 할까?<br>opencv-python 라이브러리를 이용해서 관련 예제를 만들어 보자.<br><a id="more"></a></p><h2 id="OpenCV-란"><a href="#OpenCV-란" class="headerlink" title="OpenCV 란?"></a><a href="https://opencv.org/" rel="external nofollow noopener noreferrer" target="_blank">OpenCV</a> 란?</h2><blockquote><p><strong>OpenCV</strong>(Open Source Computer Vision)은 실시간 <a href="https://ko.wikipedia.org/wiki/컴퓨터_비전" rel="external nofollow noopener noreferrer" target="_blank">컴퓨터 비전</a>을 목적으로 한 프로그래밍 <a href="https://ko.wikipedia.org/wiki/라이브러리" rel="external nofollow noopener noreferrer" target="_blank">라이브러리</a>이다. 원래는 <a href="https://ko.wikipedia.org/wiki/인텔" rel="external nofollow noopener noreferrer" target="_blank">인텔</a>이 개발하였다. <strong>실시간</strong> 이미지 프로세싱에 중점을 둔 라이브러리이다.<br><a href="https://ko.wikipedia.org/wiki/마이크로소프트_윈도" rel="external nofollow noopener noreferrer" target="_blank">윈도</a>, <a href="https://ko.wikipedia.org/wiki/리눅스" rel="external nofollow noopener noreferrer" target="_blank">리눅스</a> 등에서 사용 가능한 <a href="https://ko.wikipedia.org/wiki/크로스_플랫폼" rel="external nofollow noopener noreferrer" target="_blank">크로스 플랫폼</a>이며 <a href="https://ko.wikipedia.org/wiki/오픈소스" rel="external nofollow noopener noreferrer" target="_blank">오픈소스</a> <a href="https://ko.wikipedia.org/wiki/BSD_허가서" rel="external nofollow noopener noreferrer" target="_blank">BSD 허가서</a> 하에서 무료로 사용할 수 있다<br>OpenCV는 <a href="https://ko.wikipedia.org/wiki/C" rel="external nofollow noopener noreferrer" target="_blank">C</a>/<a href="https://ko.wikipedia.org/wiki/C%2B%2B" rel="external nofollow noopener noreferrer" target="_blank">C++</a> 프로그래밍 언어로 개발 되었으며 <a href="https://ko.wikipedia.org/wiki/파이썬" rel="external nofollow noopener noreferrer" target="_blank">파이썬</a> , <a href="https://ko.wikipedia.org/wiki/자바" rel="external nofollow noopener noreferrer" target="_blank">자바</a> 및 <a href="https://ko.wikipedia.org/wiki/매트랩" rel="external nofollow noopener noreferrer" target="_blank">매트랩</a> / <a href="https://ko.wikipedia.org/w/index.php?title=OCTAVE&amp;action=edit&amp;redlink=1" rel="external nofollow noopener noreferrer" target="_blank">OCTAVE</a>에 <a href="https://ko.wikipedia.org/wiki/바인딩" rel="external nofollow noopener noreferrer" target="_blank">바인딩</a> 되어 프로그래머에게 개발 환경을 지원합니다.<br> ..</p></blockquote><p><a href="https://ko.wikipedia.org/wiki/OpenCV" rel="external nofollow noopener noreferrer" target="_blank">위키백과</a></p><h2 id="opencv-python를-이용한-예제"><a href="#opencv-python를-이용한-예제" class="headerlink" title="opencv-python를 이용한 예제"></a><a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_gui/py_video_display/py_video_display.html" rel="external nofollow noopener noreferrer" target="_blank">opencv-python</a>를 이용한 예제</h2><p>python 라이브러리를 이용해 첫 번째 프레임 메인 스틸컷 이미지 한개를 생성 하거나<br>약 10초 단위로 프레임 이미지 N개를 생성하도록 작성했다. </p><h3 id="관련-용어"><a href="#관련-용어" class="headerlink" title="관련 용어"></a>관련 용어</h3><ul><li><a href="https://ko.wikipedia.org/wiki/%ED%94%84%EB%A0%88%EC%9E%84_%EB%A0%88%EC%9D%B4%ED%8A%B8" rel="external nofollow noopener noreferrer" target="_blank">프레임레이트</a><br>FPS(Frame Per Second): 프레임레이트 단위 . 초당 프레임 개수.<br>예) 영화 24fps : 1초에 24장의 그림을 보여 줌.</li></ul><h3 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h3><h4 id="라이브러리-설치"><a href="#라이브러리-설치" class="headerlink" title="라이브러리 설치"></a><a href="https://pypi.org/project/opencv-python/" rel="external nofollow noopener noreferrer" target="_blank">라이브러리 설치</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ pip install opencv-python</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Package       Version</span><br><span class="line">------------- --------</span><br><span class="line">numpy         1.16.4</span><br><span class="line">opencv-python 4.1.0.25</span><br></pre></td></tr></table></figure><p>opencv-python 라이브러리 설치 시 numpy 도 설치 됨.</p><h4 id="still-cut-py"><a href="#still-cut-py" class="headerlink" title="still-cut.py"></a>still-cut.py</h4><script src="https://gist.github.com/borakim-b/3905aa40c9be65e3a91f69357f821cc3.js"></script><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><p>29초 길이의 test.mp4 파일 프레임 이미지 추출</p><p><img src="/images/python-fun-opencv-stillcut.png" alt="python-fun-opencv-stillcut"></p><h3 id="끝"><a href="#끝" class="headerlink" title="끝."></a>끝.</h3><p>동영상을 업로드 후 자동으로 스틸컷 이미지를 만들 때.<br>특정 프레임 이미지가 있는 곳 부터 동영상을 재생하려고 할 때.<br>활용해볼 수 있을 것 같다.</p><h5 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h5><p><em>스틸컷 추출에 걸리는 시간 체크</em><br><em>별도의 워커에서 동작</em></p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/08/03/20190803-python-opencv-stillcut/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular 프로젝트 Travis 빌드 후 Amazon S3에 업로드 해보자</title>
      <link>https://borakim-b.github.io/2019/07/08/20190708-travis-angular-s3/</link>
      <guid>https://borakim-b.github.io/2019/07/08/20190708-travis-angular-s3/</guid>
      <pubDate>Sun, 07 Jul 2019 20:34:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;Angular 웹 프로젝트 배포는 어떻게 할까? &lt;code&gt;GitHub - Travis CI - S3&lt;/code&gt; - Ansible Deploy&lt;br&gt;&lt;a href=&quot;https://travis-ci.com/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Travis CI&lt;/a&gt; 에 대해서 알아보고 프로젝트 빌드 후 Amazon S3에 업로드 하는 예제를 만들어 본다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Angular 웹 프로젝트 배포는 어떻게 할까? <code>GitHub - Travis CI - S3</code> - Ansible Deploy<br><a href="https://travis-ci.com/" rel="external nofollow noopener noreferrer" target="_blank">Travis CI</a> 에 대해서 알아보고 프로젝트 빌드 후 Amazon S3에 업로드 하는 예제를 만들어 본다.<br><a id="more"></a></p><h2 id="Travis-CI-란"><a href="#Travis-CI-란" class="headerlink" title="Travis CI 란?"></a>Travis CI 란?</h2><h3 id="소개"><a href="#소개" class="headerlink" title="소개"></a><a href="https://docs.travis-ci.com/user/languages/" rel="external nofollow noopener noreferrer" target="_blank">소개</a></h3><blockquote><p>As a continuous integration platform, Travis CI supports your development process by automatically building and testing code changes, providing immediate feedback on the success of the change. Travis CI can also automate other parts of your development process by managing deployments and notifications.</p><p>…</p><p>When you run a build, Travis CI clones your GitHub repository into a brand new virtual environment, and carries out a series of tasks to build and test your code.</p></blockquote><h3 id="요금정책"><a href="#요금정책" class="headerlink" title="요금정책"></a><a href="https://travis-ci.com/plans" rel="external nofollow noopener noreferrer" target="_blank">요금정책</a></h3><p>Trial 사용가능.</p><blockquote><p>Set up your first project in just one minute.<br>Your first 100 builds are free!</p><p>…</p><p>Always free for open source projects</p></blockquote><h2 id="AWS"><a href="#AWS" class="headerlink" title="AWS"></a><u>AWS</u></h2><p>S3 접근 권한만 가진 사용자를 생성해서 사용한다.</p><h3 id="IAM-Identity-and-Access-Management-gt-사용자-추가"><a href="#IAM-Identity-and-Access-Management-gt-사용자-추가" class="headerlink" title="IAM(Identity and Access Management) &gt; 사용자 추가"></a>IAM(Identity and Access Management) &gt; 사용자 추가</h3><p>AWS 엑세스 유형 </p><ul><li>프로그래밍 방식 엑세스</li></ul><p>S3 &gt; 정책필터 </p><ul><li>AmazonS3FullAccess</li></ul><p>사용자 생성이 완료되면 <code>엑세스 키 ID</code> 와 <code>시크릿 엑세스 키</code> 를 확인할 수 있다. (보안자격증명 &gt; 엑세스키)<br><u>해당 키는 Travis CI 설정에서 사용함.</u></p><h3 id="S3-버킷-생성"><a href="#S3-버킷-생성" class="headerlink" title="S3 버킷 생성"></a>S3 버킷 생성</h3><p>버킷 생성 시 <code>권한 &gt; 모든 퍼블릭 엑세스 차단</code> 옵션으로 생성한다.</p><h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a><u>Travis CI</u></h2><p>github 계정 연결 후 로그인하면 Github 저장소를 선택할 수 있다.</p><h3 id="Integration-대상-프로젝트-선택"><a href="#Integration-대상-프로젝트-선택" class="headerlink" title="Integration 대상 프로젝트 선택"></a>Integration 대상 프로젝트 선택</h3><p>github &gt; Personal settings &gt; Applications &gt; Installed Github Apps<br>Travis CI &gt; Configure<br>Repository access 설정 &gt; CI 적용할 repository 선택 후 저장.</p><h3 id="APP-gt-Settings"><a href="#APP-gt-Settings" class="headerlink" title="APP &gt; Settings"></a>APP &gt; Settings</h3><h4 id="General"><a href="#General" class="headerlink" title="General"></a>General</h4><p>코드 push 되었을 때 빌드되도록 설정.</p><p><img src="/images/travis-setting-g.png" alt=""></p><h4 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h4><p>travis 빌드에 사용할 환경변수를 설정한다.</p><p><img src="/images/travis-setting-ev.png" alt=""></p><h3 id="Config-파일-설정-travis-yml"><a href="#Config-파일-설정-travis-yml" class="headerlink" title="Config 파일 설정 (.travis.yml)"></a>Config 파일 설정 (.travis.yml)</h3><p><a href="https://docs.travis-ci.com/user/deployment/s3" rel="external nofollow noopener noreferrer" target="_blank">S3 Deployment 참고</a></p><h4 id="travis-yml-파일-생성"><a href="#travis-yml-파일-생성" class="headerlink" title=".travis.yml 파일 생성"></a>.travis.yml 파일 생성</h4><script src="https://gist.github.com/borakim-b/0f830a63f39520dc6e0e129927dded44.js"></script><p>.travis.yml 파일을 master 브랜치에 push 하면 코드변경사항이 push될 때마다 빌드가 실행 된다.<br>angular cli 설치 후 빌드, 빌드결과를 zip 파일로 만들어 S3에 업로드한다.<br>배포과정은 Job log 에서 확인 할 수 있고, 결과는 메일로 발송된다. <a href="https://docs.travis-ci.com/user/notifications#configuring-slack-notifications" rel="external nofollow noopener noreferrer" target="_blank">Slack</a>같은 채널로 알림을 받을 수도 있다.</p><h4 id="Job-log"><a href="#Job-log" class="headerlink" title="Job log"></a>Job log</h4><p><img src="/images/travis-job-log.png" alt=""></p><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p><img src="/images/travis-history-r.png" alt=""></p><p><img src="/images/travis-s3-r.png" alt=""></p><h3 id="빌드가-실패했을-때"><a href="#빌드가-실패했을-때" class="headerlink" title="빌드가 실패했을 때"></a>빌드가 실패했을 때</h3><p>빌드 요청은 <code>More options &gt; Requests</code> 에서 확인할 수 있다.<br>단순 Syntax 오류 같은 경우 <code>Could not parse..</code> 라고 메시지가 노출 됨.<br>로컬에서 .travis.yml 기준으로 확인해볼 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ sudo gem install travis</span><br><span class="line">❯ travis lint</span><br><span class="line">Warnings for .travis.yml:</span><br><span class="line">[x] syntax error: (&lt;unknown&gt;): found character that cannot start any token while scanning for the next token at line 19 column 3</span><br></pre></td></tr></table></figure><h3 id="끝"><a href="#끝" class="headerlink" title="끝."></a>끝.</h3><p>이후에 과정은 S3에 업로드된 파일을 Instance에 배포 하면 된다.</p><p>.</p><p>.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/07/08/20190708-travis-angular-s3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS 인스턴스 생성하고 SSH 원격 접속 해보자</title>
      <link>https://borakim-b.github.io/2019/06/28/20190628-aws-instance-ssh/</link>
      <guid>https://borakim-b.github.io/2019/06/28/20190628-aws-instance-ssh/</guid>
      <pubDate>Fri, 28 Jun 2019 10:04:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;AWS 인스턴스 생성 시 보안그룹 설정 할 때 참고할 사항과 인스턴스 요금을 알아보고&lt;br&gt;인스턴스 생성 후 SSH Config 설정을 통해 원격접속 해본다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>AWS 인스턴스 생성 시 보안그룹 설정 할 때 참고할 사항과 인스턴스 요금을 알아보고<br>인스턴스 생성 후 SSH Config 설정을 통해 원격접속 해본다.<br><a id="more"></a></p><h2 id="AWS-인스턴스-생성"><a href="#AWS-인스턴스-생성" class="headerlink" title="AWS 인스턴스 생성"></a>AWS 인스턴스 생성</h2><p>EC2 대시보드 &gt; 인스턴스 생성 메뉴로 들어가서 인스턴스를 빠르게 생성해 볼 수 있다.<br><u>AMI 를 선택하고, 인스턴스 유형 선택, 인스턴스 구성, 스토리지 추가, 태그추가, 검토</u> 의 과정이 있음.<br>시작 시 기존 키페어 파일을 지정하거나 새로 생성할 수 있다.<br>키파일은 퍼블릭 키는 AWS에 저장되고 프라이빗 키파일은 다운로드 받게 된다.<br>이 프라이빗 키파일을 가지고 나중에 SSH로 접속 할 수 있게 된다.</p><h3 id="보안그룹-설정"><a href="#보안그룹-설정" class="headerlink" title="보안그룹 설정"></a>보안그룹 설정</h3><p>보안그룹 설정 시 일반적인 웹 서비스의 경우 HTTP, HTTPS, SSH 정도의 타입에 대해 설정 해주면 됨.<br>특정 IP 에 대해서만 허용하도록 할 경우 사용지지정 옵션 선택 후 <a href="http://checkip.amazonaws.com/" rel="external nofollow noopener noreferrer" target="_blank">사용자 IP</a> 를 등록 하면 됨.</p><h3 id="인스턴스-수명주기"><a href="#인스턴스-수명주기" class="headerlink" title="인스턴스 수명주기"></a><a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html" rel="external nofollow noopener noreferrer" target="_blank">인스턴스 수명주기</a></h3><p><img src="/images/instance_lifecycle.png" alt=""></p><p>인스턴스 수명주기를 알고있으면 인스턴스 상태 변경에 따라 데이터나 볼륨 등이 지워지거나<br>인스턴스 사용 요금에 대해서 주의하는데 도움이 된다.</p><p>확인할 만한 사항을 요약해 보면..  </p><ul><li><p>인스턴스 상태가 pending, stopped, shutting-down, terminated 상태면 인스턴스 사용 요금 <u>미청구</u></p></li><li><p>인스턴스가 <code>running</code> 상태로 전환되는 즉시 인스턴스 실행이 지속된 각 초(최소 1분)에 대해 비용 <u>청구</u></p></li><li><p>인스턴스 재부팅 시 퍼블릭 DNS 이름, 프라이빗 IP 주소 및 인스턴스 스토어 볼륨의 모든 데이터가 유지</p></li><li><p>인스턴스를 Terminate 시킬 경우 루트 디바이스 볼륨이 삭제 되고, 중지 시킬경우 그대로 유지 됨. (프리티어 사용 시 EBS 사용량에 주의해야 함.)</p></li></ul><h2 id="SSH-원격-접속"><a href="#SSH-원격-접속" class="headerlink" title="SSH 원격 접속"></a>SSH 원격 접속</h2><p>Amazon Linux 2 또는 Amazon Linux AMI의 경우 사용자 이름은 <u>ec2-user</u> 이다.<br><code>public-dns-hostname</code> 은 인스턴스의 퍼블릭 DNS 또는 IP를 입력한다.</p><h3 id="SSH-클라이언트-사용"><a href="#SSH-클라이언트-사용" class="headerlink" title="SSH 클라이언트 사용"></a>SSH 클라이언트 사용</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ ssh -i /path/my-key-pair.pem ec2-user@public-dns-hostname</span><br></pre></td></tr></table></figure><h3 id="SSH-Config-설정"><a href="#SSH-Config-설정" class="headerlink" title="SSH Config 설정"></a>SSH Config 설정</h3><p>~/.ssh/my-key-pair.pem 키페어 파일 다운로드.<br>~/.ssh/config 파일 생성.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host aws-test</span><br><span class="line">HostName public-dns-hostname</span><br><span class="line">User ec2-user</span><br><span class="line">IdentityFile ~/.ssh/my-key-pair.pem</span><br></pre></td></tr></table></figure><p>접속<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ ssh aws-test</span><br></pre></td></tr></table></figure></p><h3 id="끝"><a href="#끝" class="headerlink" title="끝."></a>끝.</h3><p><img src="/images/aws-ssh-done.png" alt=""></p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/06/28/20190628-aws-instance-ssh/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Custom HTTP 헤더 네이밍 컨벤션?</title>
      <link>https://borakim-b.github.io/2019/06/28/20190628-custom-header-x/</link>
      <guid>https://borakim-b.github.io/2019/06/28/20190628-custom-header-x/</guid>
      <pubDate>Fri, 28 Jun 2019 10:04:39 GMT</pubDate>
      <description>
      
        &lt;p&gt;개발을 하다보면 추가적인 정보를 헤더에 담아야 할 때가 있다.&lt;br&gt;이 때 헤더의 이름을 어떻게 지으면 좋을까?&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>개발을 하다보면 추가적인 정보를 헤더에 담아야 할 때가 있다.<br>이 때 헤더의 이름을 어떻게 지으면 좋을까?<br><a id="more"></a><br>헤더의 이름 앞에 prefix로 <code>X-</code> 를 사용하는 경우 Custom 헤더라고 볼 수 있는데<br>그런 식의 이름을 짓는 것을 권장하지 않는다고 한다.</p><blockquote><p>Deprecating the “X-“ Prefix and Similar Constructs in Application Protocols</p><p><a href="https://tools.ietf.org/html/rfc6648" rel="external nofollow noopener noreferrer" target="_blank">RFC6648</a></p></blockquote><p>그냥. 적절한 이름으로 지으면 된다.</p><p><strong>참고</strong><br><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers" rel="external nofollow noopener noreferrer" target="_blank">https://developer.mozilla.org/ko/docs/Web/HTTP/Headers</a></p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/06/28/20190628-custom-header-x/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular 빠르게 시작하기</title>
      <link>https://borakim-b.github.io/2019/06/24/20190624-angular-start/</link>
      <guid>https://borakim-b.github.io/2019/06/24/20190624-angular-start/</guid>
      <pubDate>Mon, 24 Jun 2019 09:14:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;Bootstrap, Material 테마 설치 후 Angular CLI 이용해 빠르게 개발을 시작해 본다.&lt;br&gt;별도의 API서버가 없는 상태에서 프로토타입을 개발하는 방법을 확인해 본다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Bootstrap, Material 테마 설치 후 Angular CLI 이용해 빠르게 개발을 시작해 본다.<br>별도의 API서버가 없는 상태에서 프로토타입을 개발하는 방법을 확인해 본다.</p><a id="more"></a><h2 id="Angular-8-Bootstrap-4-3-Material-8-0"><a href="#Angular-8-Bootstrap-4-3-Material-8-0" class="headerlink" title="Angular 8 + Bootstrap 4.3 + Material 8.0"></a>Angular 8 + Bootstrap 4.3 + Material 8.0</h2><h3 id="Angular-CLI-설치"><a href="#Angular-CLI-설치" class="headerlink" title="Angular CLI 설치"></a><a href="https://angular.io/guide/setup-local" rel="external nofollow noopener noreferrer" target="_blank">Angular CLI 설치</a></h3><h4 id="Angular-CLI-란"><a href="#Angular-CLI-란" class="headerlink" title="Angular CLI 란?"></a>Angular CLI 란?</h4><blockquote><p>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ npm install -g @angular/cli</span><br></pre></td></tr></table></figure><p>Angular CLI 설치가 정상적으로 안될 경우 Node.js 와 npm package manager가 설치되어 있는지 확인해야 함.</p><h3 id="자주쓰는-CLI-명령"><a href="#자주쓰는-CLI-명령" class="headerlink" title="자주쓰는 CLI 명령"></a>자주쓰는 CLI 명령</h3><p>WebStorm 과 같은 IDE를 사용하면 직접 커맨드 명령을 사용할 일이 드물지만 알고있으면 좋다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ ng help</span><br><span class="line">❯ ng g --help</span><br></pre></td></tr></table></figure><p>주로 클래스, 컴포넌트, 서비스, 모듈 등을 생성해주거나 빌드할 때 사용한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ ng g class &lt;클래스명&gt;</span><br><span class="line">❯ ng g component &lt;컴포넌트명&gt;</span><br><span class="line">❯ ng g service &lt;서비스명&gt;</span><br><span class="line">❯ ng g module &lt;모듈명&gt;</span><br><span class="line">...</span><br><span class="line">❯ ng build</span><br></pre></td></tr></table></figure><p><a href="https://angular.io/cli" rel="external nofollow noopener noreferrer" target="_blank">Angular CLI</a> 를 이용해서 generate된 경우 네이밍이나 디렉토리 구조 등 일관되게 가져갈 수 있기 때문에 사용하는 것이 좋다.</p><h3 id="프로젝트-생성"><a href="#프로젝트-생성" class="headerlink" title="프로젝트 생성"></a>프로젝트 생성</h3><p>angular-dash라는 프로젝트를 만들고 port 4300 으로 서버 실행</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ ng new angular-dash</span><br><span class="line">❯ ng serve --port 4300</span><br></pre></td></tr></table></figure><h3 id="Angular-Material-설치"><a href="#Angular-Material-설치" class="headerlink" title="Angular Material 설치"></a><a href="https://material.angular.io/" rel="external nofollow noopener noreferrer" target="_blank">Angular Material 설치</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ npm install --save @angular/material @angular/cdk @angular/animations</span><br><span class="line"></span><br><span class="line"># Some components (mat-slide-toggle, mat-slider, matTooltip) 를 위해 설치.</span><br><span class="line">❯ npm install --save hammerjs</span><br></pre></td></tr></table></figure><p>angular.json 파일에 사용하고자 하는 테마의 css 파일 경로 추가.<br>material-module.ts 파일을 생성 후 사용하고자하는 material 모듈을 import 시켜 두었다.<br>그리고 MaterialModule 을 app.module.ts 에 import 하는 과정이 있었음.</p><h3 id="Bootstrap-설치"><a href="#Bootstrap-설치" class="headerlink" title="Bootstrap 설치"></a><a href="https://getbootstrap.com/" rel="external nofollow noopener noreferrer" target="_blank">Bootstrap 설치</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ npm install bootstrap</span><br></pre></td></tr></table></figure><p>angular.json 파일에 bootstrap.min.css 파일 경로 추가.</p><h2 id="Mock-데이터-활용-템플릿에-랜더링-하기"><a href="#Mock-데이터-활용-템플릿에-랜더링-하기" class="headerlink" title="Mock 데이터 활용 템플릿에 랜더링 하기"></a>Mock 데이터 활용 템플릿에 랜더링 하기</h2><p>별도의 API서버가 없는 상태에서 프로토타입을 개발할 때 유용하다.</p><script src="https://gist.github.com/borakim-b/94ea88118409d41e6a78fea06a4a4764.js"></script><h3 id="끝"><a href="#끝" class="headerlink" title="끝."></a>끝.</h3><p><img src="/images/angular_start.png" alt=""></p><p><a href="https://github.com/borakim-b/angular-dash" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/borakim-b/angular-dash</a></p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/06/24/20190624-angular-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mysql 설치</title>
      <link>https://borakim-b.github.io/2019/06/15/20190615-docker-mysql/</link>
      <guid>https://borakim-b.github.io/2019/06/15/20190615-docker-mysql/</guid>
      <pubDate>Sat, 15 Jun 2019 08:45:57 GMT</pubDate>
      <description>
      
        &lt;p&gt;docker를 이용해서 빠르게 데이터베이스 개발환경을 만들어 본다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>docker를 이용해서 빠르게 데이터베이스 개발환경을 만들어 본다.<br><a id="more"></a></p><h3 id="도커-이미지-다운로드-후-실행"><a href="#도커-이미지-다운로드-후-실행" class="headerlink" title="도커 이미지 다운로드 후 실행"></a>도커 이미지 다운로드 후 실행</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ docker search mysql</span><br><span class="line">❯ docker pull mysql</span><br><span class="line">❯ docker images</span><br></pre></td></tr></table></figure><p>실행</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=1234 --name mysql mysql --default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure><p>접속정보</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host: 127.0.0.1</span><br><span class="line">Username: root</span><br><span class="line">Password: 1234</span><br></pre></td></tr></table></figure><p>컨테이너에 접속해서 확인해보려면</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ docker exec -i -t mysql bash</span><br><span class="line">root@a4ce950e20aa:/# mysql -u root -p</span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml-파일을-만들어-더-간단하게-해보면"><a href="#docker-compose-yml-파일을-만들어-더-간단하게-해보면" class="headerlink" title="docker-compose.yml 파일을 만들어 더 간단하게 해보면.."></a>docker-compose.yml 파일을 만들어 더 간단하게 해보면..</h3><script src="https://gist.github.com/borakim-b/e923539bdd54240c46930dd024b05991.js"></script><ul><li>working_dir 를 설정 후 호스트의 디렉토리와 마운트 되도록 한다.</li><li>version은 <a href="https://docs.docker.com/compose/compose-file/" rel="external nofollow noopener noreferrer" target="_blank">docker engine 버전</a> 을 고려하여 작성한다.</li><li>기본 Encoding 과 Collation 값을 설정한다.<br>charset 옵션 없이 실행할 경우 DB 기본 Encoding 과 Collation 값이 latin1 로 설정된다.</li></ul><p>실행<br><code>❯ docker-compose up</code></p><h3 id="끝"><a href="#끝" class="headerlink" title="끝."></a>끝.</h3><p>docker-compose.yml 로 작성해 두면 빠르게 개발환경을 구성해서 시작하기 좋다.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/06/15/20190615-docker-mysql/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PHP 개발환경 구성 (Docker, CodeIgniter, Nginx, mariadb ..)</title>
      <link>https://borakim-b.github.io/2019/06/09/20190609-php-env-docker/</link>
      <guid>https://borakim-b.github.io/2019/06/09/20190609-php-env-docker/</guid>
      <pubDate>Sun, 09 Jun 2019 09:41:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;PHP framework 중 CodeIgniter를 이용한 웹 서비스 개발 방법을 알아보고&lt;br&gt;Docker를 활용해 개발환경을 구성해본다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>PHP framework 중 CodeIgniter를 이용한 웹 서비스 개발 방법을 알아보고<br>Docker를 활용해 개발환경을 구성해본다.</p><a id="more"></a><h2 id="PHP-개발환경-구성"><a href="#PHP-개발환경-구성" class="headerlink" title="PHP 개발환경 구성"></a>PHP 개발환경 구성</h2><p>CI 프레임워크를 사용해서 서비스를 개발할 때 zip 파일을 내려받은 후 웹서버의 config에 root 경로를 설정하고.. 필요한 라이브러리 다운받고 환경설정하고 하는데….</p><h3 id="Docker-기반으로-PHP-웹-서비스-개발환경-구성해보기"><a href="#Docker-기반으로-PHP-웹-서비스-개발환경-구성해보기" class="headerlink" title="Docker 기반으로 PHP 웹 서비스 개발환경 구성해보기"></a>Docker 기반으로 PHP 웹 서비스 개발환경 구성해보기</h3><h5 id="PHPDocker-io-에서-도커-파일-생성"><a href="#PHPDocker-io-에서-도커-파일-생성" class="headerlink" title="PHPDocker.io 에서 도커 파일 생성"></a><a href="https://phpdocker.io/generator" rel="external nofollow noopener noreferrer" target="_blank">PHPDocker.io</a> 에서 도커 파일 생성</h5><blockquote><p>PHPDocker.io is a tool that will help you build a typical PHP development environment based on Docker with just a few clicks</p></blockquote><p><img src="/images/php_docker.png" alt=""></p><p>다운로드된 파일을 보면 phpdocker 폴더와 docker-compose.yml 파일이 있음.</p><script src="https://gist.github.com/borakim-b/f841edadb7b335a0572894a69e54b08d.js"></script><p>docker-compose.yml 파일에 보면 각 컨테이너 서비스 별로 정의되어 있는 것을 확인할 수 있음.<br>redis, mariadb, webserver, php-fpm</p><p>phpdocker 파일내의 nginx 설정파일과 php 실행환경 파일에 대해 컨테이너에서 사용할 경로가 지정되어 있음.</p><h5 id="php-ini-overrides-ini-파일-수정"><a href="#php-ini-overrides-ini-파일-수정" class="headerlink" title="php-ini-overrides.ini 파일 수정"></a>php-ini-overrides.ini 파일 수정</h5>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date.timezone = Asia/Seoul</span><br><span class="line">short_open_tag = On</span><br></pre></td></tr></table></figure><p>   short_open_tags는 <code>&lt;?php</code> 를 <code>&lt;?</code> 도 허용한다는..</p><h5 id="CI-3-x-의-경우-nginx-conf-파일-수정"><a href="#CI-3-x-의-경우-nginx-conf-파일-수정" class="headerlink" title="CI 3.x 의 경우 nginx.conf 파일 수정"></a>CI 3.x 의 경우 nginx.conf 파일 수정</h5><p>   CI 4.x 의 경우에는 수정하지 않아도 되는데..<br>   <code>root /application/public;</code> 에서 <code>root /application</code>로 변경 함.</p><h5 id="CodeIgniter-다운로드"><a href="#CodeIgniter-다운로드" class="headerlink" title="CodeIgniter 다운로드"></a><a href="https://www.codeigniter.com/user_guide/installation/downloads.html" rel="external nofollow noopener noreferrer" target="_blank">CodeIgniter</a> 다운로드</h5><p>   zip 파일 해제 후 1에서 받은 파일과 같은 디렉토리에 위치 시킴.</p><h5 id="docker-실행"><a href="#docker-실행" class="headerlink" title="docker 실행"></a>docker 실행</h5>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>   <img src="/images/php_docker_ps.png" alt=""></p><h5 id="확인"><a href="#확인" class="headerlink" title="확인"></a>확인</h5><p>   <a href="http://localhost:8000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8000/</a><br>   <img src="/images/php_docker_web.png" alt=""></p><h5 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h5><p><a href="https://github.com/borakim-b/php-starter-kit" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/borakim-b/php-starter-kit</a></p><hr><p>PHP5.4 부터는 내장 웹서버를 제공한다. 간단히 사용할 때만 쓰고.. 권장은 안하는 것 같다.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/06/09/20190609-php-env-docker/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PHP 서비스 개발에 필요한 최소한의 것</title>
      <link>https://borakim-b.github.io/2019/06/09/20190609-php-start-tip/</link>
      <guid>https://borakim-b.github.io/2019/06/09/20190609-php-start-tip/</guid>
      <pubDate>Sun, 09 Jun 2019 09:41:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;PHP 언어에 대해서 알아보고 PHP 웹 프레임워크, 템플릿엔진, 개발 시 사용한 IDE 에 대해 정리해본다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>PHP 언어에 대해서 알아보고 PHP 웹 프레임워크, 템플릿엔진, 개발 시 사용한 IDE 에 대해 정리해본다.<br><a id="more"></a></p><h2 id="PHP-기반의-웹-서비스-개발"><a href="#PHP-기반의-웹-서비스-개발" class="headerlink" title="PHP 기반의 웹 서비스 개발"></a>PHP 기반의 웹 서비스 개발</h2><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP?"></a>PHP?</h3><blockquote><p>PHP: Hypertext Preprocessor 서버사이드 스크립트 언어</p><p>근본적으로, PHP의 문법은 C스타일을 따른다.<br>PHP 7 is the latest stable release</p><p><a href="https://ko.wikipedia.org/wiki/PHP" rel="external nofollow noopener noreferrer" target="_blank">위키피디아</a></p></blockquote><p><a href="https://www.php.net/manual/en/" rel="external nofollow noopener noreferrer" target="_blank">PHP Manual</a></p><h3 id="PHP-Web-Framework"><a href="#PHP-Web-Framework" class="headerlink" title="PHP Web Framework"></a>PHP Web Framework</h3><p><a href="https://codeigniter.com/" rel="external nofollow noopener noreferrer" target="_blank">Codeigniter 공식</a><br><a href="http://www.ciboard.co.kr/user_guide/kr/" rel="external nofollow noopener noreferrer" target="_blank">Codeigniter 한글매뉴얼</a></p><p>CI Application Flow (<a href="https://www.codeigniter.com/user_guide/overview/appflow.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.codeigniter.com/user_guide/overview/appflow.html</a>)</p><p><img src="/images/php_ci_appflowchart.gif" alt=""></p><h5 id="템플릿-엔진"><a href="#템플릿-엔진" class="headerlink" title="템플릿 엔진"></a>템플릿 엔진</h5><p><a href="https://tpl.xtac.net/introduction/" rel="external nofollow noopener noreferrer" target="_blank">템플릿언더바(Template Underscore)</a></p><h5 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h5><p><a href="https://www.jetbrains.com/phpstorm/" rel="external nofollow noopener noreferrer" target="_blank">PhpStorm</a></p><hr><p>PHP 프레임 워크로 <a href="https://laravel.com/" rel="external nofollow noopener noreferrer" target="_blank">라라벨</a> 도 있다고 하는데 사용해보지 않았다.<br>템블릿 언더바 문법 중 이러한 <code>&lt;!--{ }--&gt;</code> 템플릿 태그는 정말 난해했다. 정말 코드 가독성이 떨어진다.</p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/06/09/20190609-php-start-tip/#disqus_thread</comments>
    </item>
    
    <item>
      <title>QR코드 생성 어떻게 할까</title>
      <link>https://borakim-b.github.io/2019/06/05/20190605-python-qrcode-generator/</link>
      <guid>https://borakim-b.github.io/2019/06/05/20190605-python-qrcode-generator/</guid>
      <pubDate>Wed, 05 Jun 2019 06:29:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;QR코드 관련 개발을 진행할 때 필요한 배경지식과 python 라이브러리를 활용해 QR이미지를 생성해 본다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>QR코드 관련 개발을 진행할 때 필요한 배경지식과 python 라이브러리를 활용해 QR이미지를 생성해 본다.<br><a id="more"></a></p><h3 id="QR-코드는-뭘까"><a href="#QR-코드는-뭘까" class="headerlink" title="QR 코드는 뭘까?"></a>QR 코드는 뭘까?</h3><blockquote><p><strong>QR</strong> <strong>코드</strong>(Quick Response code)은 흑백 격자무늬 패턴으로 정보를 나타내는 매트릭스 형식의 이차원 바코드 </p><p>바코드의 용량 제한을 극복하고 그 형식과 내용을 확장한 2차원의 바코드</p><p>기존의 바코드는 기본적으로 가로 배열에 최대 20여 자의 숫자 정보만 넣을 수 있는 1차원적 구성이지만, </p><p>QR코드는 가로, 세로를 활용하여 숫자는 최대 7,089자, 문자는 최대 4,296자, 한자도 최대 1,817자 정도를 기록할 수 있는 2차원적 구성이다</p><p>QR코드를 처음 개발한 일본의 덴소웨이브(1994년)가 (고맙게도) 특허권을 행사하지 않아 현재는 누구라도 다양한 목적으로 쉽게 제작, 사용할 수 있다는 점도 빼놓을 수 없다.</p><p><a href="https://terms.naver.com/entry.nhn?docId=3571963&amp;cid=59088&amp;categoryId=59096" rel="external nofollow noopener noreferrer" target="_blank">네이버캐스트</a>, <a href="https://ko.wikipedia.org/wiki/QR_코드" rel="external nofollow noopener noreferrer" target="_blank">위키</a></p></blockquote><h3 id="QR-코드-종류"><a href="#QR-코드-종류" class="headerlink" title="QR 코드 종류"></a>QR 코드 종류</h3><blockquote><p>QR코드 모델2는 코드가 일그러진 경우에도 문제없이 인식이 가능하도록 모델1을 개량한 코드입니다.</p><p>코드를 곡면에 인쇄하거나, 인식시의 각도로 인해 코드가 일그러진 상태에서도, 코드 내부에 배치된 얼라이먼트 패턴에 의해 뛰어난 성능으로 인식할 수 있습니다.</p><p>최대 버전은 40(177 X 177셀)로 7089자리의 숫자까지 취급할 수 있습니다.</p><p><a href="https://www.qrcode.com/ko/codes/" rel="external nofollow noopener noreferrer" target="_blank">https://www.qrcode.com/ko/codes/</a></p></blockquote><p>일상에서 보게되는 QR코드 이미지가 모델2인가 보다.</p><h3 id="QR-코드는-어떻게-만들까"><a href="#QR-코드는-어떻게-만들까" class="headerlink" title="QR 코드는 어떻게 만들까?"></a>QR 코드는 어떻게 만들까?</h3><p><a href="https://segno.readthedocs.io/en/stable/comparison-qrcode-libs.html#create-a-qr-code" rel="external nofollow noopener noreferrer" target="_blank">Python QRCode Generator 라이브러리 비교</a></p><p>간단하게 <a href="https://pypi.org/project/qrcode/" rel="external nofollow noopener noreferrer" target="_blank">qrcode</a> 를 이용해서 QR 이미지를 생성해보면..</p><script src="https://gist.github.com/borakim-b/694fa5d60cb3dce3019ba03e5acee54b.js"></script><p><img src="/images/qrcode_c.png" alt=""></p><p>QR코드 이미지를 스캔하면 <a href="https://borakim-b.github.io/">https://borakim-b.github.io/</a> 로 링크된다.    </p><hr><p>QR Code Generator 서비스를 활용해서 간단하게 만들어 볼 수도 있다.<a href="https://qr.naver.com/" rel="external nofollow noopener noreferrer" target="_blank">네이버QR코드</a>, <a href="https://zxing.appspot.com/generator" rel="external nofollow noopener noreferrer" target="_blank">zxing</a></p><h5 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h5><p><em>QRCode 스캐너</em></p>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/06/05/20190605-python-qrcode-generator/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS 프리티어 사용 및 계정 생성</title>
      <link>https://borakim-b.github.io/2019/06/03/20190603-aws-free-tier/</link>
      <guid>https://borakim-b.github.io/2019/06/03/20190603-aws-free-tier/</guid>
      <pubDate>Mon, 03 Jun 2019 06:41:16 GMT</pubDate>
      <description>
      
        &lt;p&gt;AWS 프리티어 사용 방법을 알아보고, 사용하는 과정에서 확인한 사항을 기록해보자.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>AWS 프리티어 사용 방법을 알아보고, 사용하는 과정에서 확인한 사항을 기록해보자.<br><a id="more"></a></p><h2 id="AWS-프리티어"><a href="#AWS-프리티어" class="headerlink" title="AWS 프리티어"></a>AWS 프리티어</h2><p>AWS 프리티어는 처음 AWS에 가입한 날부터 12개월 동안 사용 가능</p><p><a href="https://aws.amazon.com/ko/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc&amp;awsf.Free%20Tier%20Types=categories%23featured" rel="external nofollow noopener noreferrer" target="_blank">AWS 프리 티어 세부정보</a></p><p>미리보기 (2019. 6. 1 기준. 익숙한 서비스 위주로 확인)</p><p><strong>12 개월 무료</strong> </p><blockquote><blockquote></blockquote><ul><li>Elastic Block Storage <ul><li>30GB </li></ul></li><li>ElastiCache<ul><li>750시간</li><li>cache t2micro 노드 사용량</li></ul></li><li>Trusted Advisor<ul><li>4개</li><li>성능 및 보안에 대한 점검 항목</li></ul></li><li>RDS<ul><li>750시간</li><li>db.t2.micro 데이터 베이스 사용량</li></ul></li><li>EC2<ul><li>750시간</li><li>Linux, RHEL 또는 SLES t2.micro 인스턴스를 월별 <strong>750</strong>시간 사용</li></ul></li><li>S3<ul><li>표준스토리지 5GB</li><li><strong>Get</strong> <strong>요청</strong> <strong>20,000</strong>개</li><li><strong>Put</strong> <strong>요청</strong> <strong>2,000</strong>개</li></ul></li><li>Elastic Container Registry<ul><li>월별 500MB</li><li>docker 이미지 저장 및 검색</li></ul></li></ul></blockquote><p><strong>항상 무료</strong></p><blockquote><blockquote></blockquote><ul><li>SES<ul><li>62000 개</li><li>월별 아웃바운드 메시지</li></ul></li><li>CloudFront<ul><li>50GB의 데이터 송신, 2백만 건의 HTTP 및 HTTPS 요청</li></ul></li><li>Lambda<ul><li>월별 1백만개</li></ul></li><li>DynamoDB<ul><li>25GB 스토리지</li></ul></li><li>CloudWatch<ul><li>사용자 정의 지표 10개 및 경보 10개</li><li><strong>로그</strong> <strong>데이터</strong> <strong>수집</strong> <strong>5GB</strong> <strong>및</strong> <strong>로그</strong> <strong>데이터</strong> <strong>아카이브</strong> <strong>5GB</strong></li><li>대쉬보드 3개</li></ul></li><li>Cognito<ul><li>모바일 자격증명</li><li>사용자 풀 기능에는 월별 50,000 MAU </li></ul></li></ul></blockquote><hr><h3 id="AWS-계정-생성-하면서-…"><a href="#AWS-계정-생성-하면서-…" class="headerlink" title="AWS 계정 생성 하면서 …"></a>AWS 계정 생성 하면서 …</h3><ul><li><p>계정 생성 시 결제 카드 정보를 입력하게 되어있다.<br>계정 생성 후 등록한 카드로 USD 1달러가 결제 됨 몇일 후에 돌려준다고 함.</p></li><li><p>계정생성이 완료되면 등록한 메일주소로 3개의 소개 및 확인 메일이 옴</p></li><li><p>AWS Management Console로 들어가서 계정 생성 시 입력한 이메일로 로그인 하면 됨.</p></li></ul><h3 id="AWS-계정-생성-후-한일"><a href="#AWS-계정-생성-후-한일" class="headerlink" title="AWS 계정 생성 후 한일"></a>AWS 계정 생성 후 한일</h3><ul><li>루트 계정 MFA 활성화<ul><li>사용자 &gt; 내 보안 자격 증명. 루트 계정에서 MFA 활성화 함.</li></ul></li><li>예상금액 1달러 초과 시 과금알림 설정<ul><li>Budgets &gt; 예산작성 으로 들어가서 비용예산 유형으로 과금설정을 해둠</li><li>1달러가 초과 되었을 경우 이메일로 알림이 오도록 설정해 두었다.</li></ul></li></ul>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2019/06/03/20190603-aws-free-tier/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo blog framework 를 이용한 Github Pages Blog 만들기.</title>
      <link>https://borakim-b.github.io/2018/05/15/github-blog-hexo-tranquilpeak/</link>
      <guid>https://borakim-b.github.io/2018/05/15/github-blog-hexo-tranquilpeak/</guid>
      <pubDate>Tue, 15 May 2018 05:31:08 GMT</pubDate>
      <description>
      
        &lt;p&gt;Hexo 블로그 프레임워크에 tranquilpeak Theme를 적용해서 블로그를 만들어보고 Markdown을 사용하여 포스팅 해보자.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Hexo 블로그 프레임워크에 tranquilpeak Theme를 적용해서 블로그를 만들어보고 Markdown을 사용하여 포스팅 해보자.<br><a id="more"></a></p><h2 id="Hexo-란"><a href="#Hexo-란" class="headerlink" title="Hexo 란?"></a>Hexo 란?</h2><blockquote><p>Hexo is a fast, simple and powerful blog framework. You write posts in <a href="http://daringfireball.net/projects/markdown/" rel="external nofollow noopener noreferrer" target="_blank">Markdown</a> (or other languages) and Hexo generates static files with a beautiful theme in seconds.</p></blockquote><h2 id="Hexo-블로그-프레임워크-설치"><a href="#Hexo-블로그-프레임워크-설치" class="headerlink" title="Hexo 블로그 프레임워크 설치"></a><a href="https://hexo.io/ko/docs/setup.html" rel="external nofollow noopener noreferrer" target="_blank">Hexo 블로그 프레임워크 설치</a></h2><h3 id="설치환경"><a href="#설치환경" class="headerlink" title="설치환경"></a>설치환경</h3><p>node v8.9.1<br>npm 5.5.1</p><h3 id="repository-생성"><a href="#repository-생성" class="headerlink" title="repository 생성"></a>repository 생성</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Username&gt;.github.io</span><br></pre></td></tr></table></figure><p>로컬에 생성한 repository를 clone 받는다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/&lt;Username&gt;/&lt;Username&gt;.github.io.git</span><br><span class="line">$ <span class="built_in">cd</span> &lt;Username&gt;.github.io</span><br></pre></td></tr></table></figure><h3 id="Hexo-설치"><a href="#Hexo-설치" class="headerlink" title="Hexo 설치"></a>Hexo 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="folder-생성-초기화"><a href="#folder-생성-초기화" class="headerlink" title="folder 생성 초기화"></a>folder 생성 초기화</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>blog 라는 폴더명으로 생성했다고 가정한다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="tranquilpeak-Theme-적용"><a href="#tranquilpeak-Theme-적용" class="headerlink" title="tranquilpeak Theme 적용."></a><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" rel="external nofollow noopener noreferrer" target="_blank">tranquilpeak</a> Theme 적용.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog/themes</span><br></pre></td></tr></table></figure><p>원하는 테마를 내려받는다. <a href="https://hexo.io/themes/" rel="external nofollow noopener noreferrer" target="_blank">https://hexo.io/themes/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak.git</span><br><span class="line">$ mv hexo-theme-tranquilpeak tranquilpeak</span><br><span class="line">$ <span class="built_in">cd</span> tranquilpeak</span><br><span class="line">$ npm install -g bower grunt-cli</span><br><span class="line">$ npm install</span><br><span class="line">$ bower install</span><br><span class="line">$ grunt build</span><br></pre></td></tr></table></figure><h3 id="config-yml-수정"><a href="#config-yml-수정" class="headerlink" title="_config.yml 수정"></a>_config.yml 수정</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: tranquilpeak</span><br></pre></td></tr></table></figure><h3 id="Enable-post-assets-folder-Enable-RSS-feed-Enable-pages"><a href="#Enable-post-assets-folder-Enable-RSS-feed-Enable-pages" class="headerlink" title="Enable post assets folder, Enable RSS feed, Enable pages"></a>Enable post assets folder, Enable RSS feed, Enable pages</h3><p><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/DOCUMENTATION.md" rel="external nofollow noopener noreferrer" target="_blank">Hexo configuration</a></p><h3 id="빌드-후-로컬에서-확인해보기"><a href="#빌드-후-로컬에서-확인해보기" class="headerlink" title="빌드 후 로컬에서 확인해보기"></a>빌드 후 로컬에서 확인해보기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p><a href="http://localhost:4000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000</a></p><p><code>$ hexo g</code> 빌드가 완료되면 public 폴더가 생성된다.<br>public 폴더 내의 파일을 배포하면 된다.</p><h2 id="관리"><a href="#관리" class="headerlink" title="관리"></a>관리</h2><p>draft 파일은 private 프로젝트로 올려두고,<br>tranquilpeak 는 fork 받아 필요한 부분만 수정하여 별도 프로젝트로 두었다.</p><p>로컬에서 draft 파일을 받아서 포스팅을 작성하고<br>hexo 빌드 후에 public 폴더내의 파일을 borakim-b.github.io 내에 copy 하는 스크립트 실행 후<br>두개의 프로젝트에 모두 code push 하는 형태</p><p><a href="https://github.com/borakim-b/borakim-b.github.io" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/borakim-b/borakim-b.github.io</a><br><a href="https://github.com/borakim-b/github-blog-draft" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/borakim-b/github-blog-draft</a><br><a href="https://github.com/borakim-b/hexo-theme-tranquilpeak" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/borakim-b/hexo-theme-tranquilpeak</a></p><h3 id="포스트-쓰기"><a href="#포스트-쓰기" class="headerlink" title="포스트 쓰기"></a>포스트 쓰기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure><h3 id="배포-플러그인-설치-후-배포하는-방법"><a href="#배포-플러그인-설치-후-배포하는-방법" class="headerlink" title="배포 플러그인 설치 후 배포하는 방법"></a>배포 플러그인 설치 후 배포하는 방법</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>_config.yml 파일에서 deploy 확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;Username&gt;/&lt;Username&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>배포 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://borakim-b.github.io/2018/05/15/github-blog-hexo-tranquilpeak/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
